;--
;	model.scm -- Written by Randall Gray 
;	Initial coding: 
;		Date: 2013.02.05
;		Location: odin:/home/gray/study/src/model.scm
;
;-  Code 

(begin
  (define initialisation-start-time (cpu-time))

  (include "framework.config")

;(set! monitors-monitor-themselves #t) ;; If false, monitors will ignore any other monitor

;(set-kernel-msg-tags '(trace-model-methods trace-object-methods trace-attribute-methods))
  (add-kernel-msg-tag 'trace-model-methods)
  (add-kernel-msg-tag 'trace-object-methods)
  (add-kernel-msg-tag 'trace-attribute-methods)

  (set-kernel-msg-collection #t)

  "Read kdnl.scm to get more info"


  ;; Tweeks to logger output
  (define adjust-grey #t)
  (set! heartbeat 1)


;--- Flag to make access to the kernel impossible for agents when they aren't running

  ;; If this is set to true, the kernel becomes inaccessible to the
  ;; agent when it is not running. Thus, it is unable to access
  ;; non-local information when answering queries and performing updates

  (define blue-meanie #f)



;- ===============Define the model domain now ================================================


  (define still-working-on-things #t) ;; When set to false, the modeljust starts running.

;-- Temporal
  (define start 0) ;; day zero
  (define end 7) ;; end at some day after the start

  (if (< end start) (error "+++Entropy Error+++  The model doesn't work in that direction"))

;--- Set scheduled tick times.
  ;;Scheduled dump times for the logger: by default the first six days,
  ;;then every tenth day from the start.  I should make it so that it
  ;;can be a function rather than a list.
  (define N-days 740)
  (define schedtimes (unique
							 (sort
							  (cons 0 (seq end))
							  <)))
;-- Spatial

  (define A4domain (list 210 294 80)) ;; (x y z) corresponds to the size of an A4 page
  (define mA4domain (list 178 250 80))

  (define domain mA4domain)


;- Global data ---------------------------------------------------------------

  (define missing-value 0)  ;; things arrived at by mortality are likely
  ;; to be inexact
  (define Q '())            ;; This is the queue which holds the agents
  ;; in the simulation

;(define end (* 365.25 32)) ;; simulate 32 years
;(define end (* 365.25 10)) ;; simulate 10 years
;(define end (* 365.25 6))  ;; simulate 6 years
;(define end (* 365.25 4))  ;; simulate 4 years
;(define end (* 365.25 2))  ;; simulate 2 years
  (define end 7)

  (define record-ecoservice-history #t) ;; track ecoservice changes in a
  ;; list

  (define (filter-hist-by-patch s d)
	 (filter (lambda (x) (string=? (car x) s)) d))


;-- Set kernel flags ---------------------------------------------------------

  ;; The kernel will emit messages (with kdnl*) which have a label which
  ;; matches something in the kernel-msg-tags list

;(set! kernel-msg-tags (append '(*) kernel-msg-tags))


;- Indicate any nesting
  ;; As an example patches may be present either as independent things or 
  ;; as components within a habitat

;(set! nested-agents '(nested-habitat)) ;; No, each patch does its own thing....



  ;;(load-submodels) -- no longer required

;-- Example code to run things....

  (define (Doit q) ;; Run till end without pause
	 (dnl* "RUNNING")
	 (let ((start-time (cpu-time)))
		(if #f
			 (check-service-data-lists service-name-list
												service-type-list service-eqn-sym-list))
		(dnl "|Q| = " (length q))
		(prep-agents q start end)
		(set! q (queue start end q))
		(dnl* "Elapsed cpu time = " (- (cpu-time) start-time))
		))


  (define Dunnit #f)
  (define *dunnit* #f)

  (define (doit q . n)
	 (set! Dunnit (lambda () (shutdown-agents q)))
	 (set! n (if (pair? n) (car n) 1))
	 (let ((start-time (cpu-time)))
		(if (not *dunnit*) (begin (prep-agents q start end) (set! *dunnit* 0)))
		(set! q (queue *dunnit* (+ *dunnit* n) q))
		(dnl* "Elapsed cpu time = " (- (cpu-time) start-time)))
	 (set! *dunnit* (+ *dunnit* n))
	 )



;-- nominate the models to include

  (define use-psdumper #f)  ;;; Not currently working
;;; (define psdumper 
;;;   (make-agent <log-map> (list 'name "Map" 
;;; 								'format 'ps
;;; 								'timestep-schedule schedtimes 
;;; 								'filename "map-" 'filetype "0.ps"
;;; 							  )
;;; 		  ))

  ;; <log-data> is pretty forgiving, but at the expense of verbosity
  ;; <log-agent-table> insists that only one agent be logged
  ;; <log-table> insists that all the agents possess all the fields, 

;;; (define logger
;;;   (if #t
;;; 		(make-agent <log-data> (list 'name "Data" 
;;; 									  'timestep-schedule schedtimes 
;;; 									  'filename "Data"
;;; 									  ;'variables (list 'name 'subjective-time 'value)
;;; 									  )
;;; ;; log-table does not automatically log the name at the front of the line
;;; 				)
;;; 		#f
;;; 		))


  (dnl* "Beginning to make a habitat")
  (define habitat
	 (let* ((ll '(0 0))
			  (lowest 300)
			  (ur (list-head A4domain 2))
			  (highest 900)
			  (terrain  (lambda (x y)
							  (abs (+  (* (- 120 x)
											  (- x 60)
											  (+ x 10))
										  (* (- y 120)
											  (- (* y x)
												  560)
											  (+ y 80))
										  )
									 )))
			  (h-centre (map / (map + ll ur) '(1/2 1/2)))
			  (H (make-habitat "Kunlun" 300 (list (append ll (list lowest)) (append A4domain (list highest)))
									 terrain
									 (make-grid "kunlun" <dynamic-patch> <polygon> 3 3 ll ur terrain)
									 ))
			  (G (make-agent <patch> 'name "Kunlun-Totals"  'type 'global-patch 'rep <polygon>
								  'locus h-centre 'perimeter (bbox ll ur)
								  ))
			  )
		(dnl* "And populate the habitat at a coarse level")

		(populate-patch-with-ecoservices G (list 
								 ;; The plant representation has a Kp which is the carrying capacity.
								 (simple-ecoservice "N_F" 'N_F 0 (days 7) 1.0 10000 #f 'linear G)  ;; number of fruit
								 (simple-ecoservice "N_S" 'N_S 0 (days 7) 1.0 10000 #f 'linear G)  ;; number of seeds
								 (simple-ecoservice "N_P" 'N_P 0 (days 7) 1.0 10000 #f 'linear G)  ;; number of plants
								 (simple-ecoservice "N_H" 'N_H 0 (days 7) 1.0 10000 #f 'linear G)  ;; number of herbivores
								 (simple-ecoservice "N_C" 'N_C 0 (days 7) 1.0 10000 #f 'linear G)) ;; number of carnivores
							 )
		(dnl* ".... populated")
		(slot-set! H 'global-patch G)
		H
		)
	 )
  (dnl* "Made the continent")


  (if (uninitialised? habitat 'patch-list)
		(error "uninitialised habitat"))

  (define trees '())

  (for-each
	(lambda (patch)
	  (populate-patch-with-ecoservices patch
							(list 
							 ;; The plant representation has a Kp which is the carrying capacity.
							 (simple-ecoservice "N_F" 'N_F 0 (days 7) 1.0 10000 #f 'linear patch)  ;; number of fruit
							 (simple-ecoservice "N_S" 'N_S 0 (days 7) 1.0 10000 #f 'linear patch)  ;; number of seeds
							 (simple-ecoservice "N_P" 'N_P 0 (days 7) 1.0 10000 #f 'linear patch)  ;; number of plants
							 (simple-ecoservice "N_H" 'N_H 0 (days 7) 1.0 10000 #f 'linear patch)  ;; number of herbivores
							 (simple-ecoservice "N_C" 'N_C 0 (days 7) 1.0 10000 #f 'linear patch)) ;; number of carnivores
							)	  )
	(slot-ref H 'patch-list)
	)
	  


  ;; This will be the runqueue!
  (define Q '());

  ;; Define a nice function to insert an agent into the runqueue
  (define (iQ agnt)
	 (set! Q (q-insert Q agnt Qcmp)))


  (dnl* "Building the runqueue")

  (iQ habitat) ;; Add the habitat..................
  (for-each iQ (slot-ref habitat  'patch-list)) ;; and its subsidiary agents


  ;; An introspection-list is a list of agents to be examined by a logging agent (in this case "logger")
  ;;(set-introspection-list! psdumper (list-copy Q))
  ;;(set-introspection-list! logger (list-copy (service-list habitat)))

  (dnl* "Setting projections")

  ;; Tell each agent what spatial ordinate system their output should be in (if we don't do this,
  ;; it defaults to whatever they use internally) 
  (for-each (lambda (x) (set-map-projection! x mm->points)) Q) 

;;; (if use-psdumper
;;; 	 (if psdumper (set! Q (cons psdumper Q)))
;;; 	 (if logger (set! Q (cons logger Q)))
;;; 	 )



  (definition-comment 'terminating-condition
	 "If this condition becomes true, (queue) bails out immediately. Recall that it is"
	 "(run-simulation) that forces a 'shutdown on agents."
	 "Often this will just be a lambda returning #f")

  (define terminating-condition-test
	 (let* ((tct terminating-condition-test) ;; chains from other terminating conditions
			  (l (lambda (Q)
					 (and (tct Q)
							#f
							)
					 )))
		l))













  (set! initialisation-start-time (- (cpu-time) initialisation-start-time))
  (dnl* "Initialisation time: " initialisation-start-time)

;;;======================================================================

  (if still-working-on-things
		(begin
		  (dnl "Run with (Doit Q) to run from the start to the end\n")
		  (dnl "Run with (doit Q n) to run for n days (not necessarily n ticks!)")
		  (dnl "             so you can run the next step in a similar fashion\n")
		  (dnl "Close up shop with (shutdown-agents Q) -- this closes files and things.")
		  )
		(Doit Q))

  )
;(display "Loaded: ")
;(apply dnl* (map (lambda (x) (slot-ref x 'name)) Q))

;-  The End 


;;; Local Variables:
;;; mode: scheme
;;; outline-regexp: ";-+"
;;; comment-column:0
;;; comment-start: ";;; "
;;; comment-end:"" 
;;; End:
