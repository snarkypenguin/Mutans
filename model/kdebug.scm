; -*- mode: scheme; -*-
;-  Identification and Changes

;--
;	kdebug.scm -- Written by Randall Gray 
;	Initial coding: 
;		Date: 2016.10.23
;		Location: zero.grayrabble.org:/home/randall/Thesis/Example-Model/model/kdebug.scm
;
;	History:
;

;-  Copyright 

;
;   (C) 2016 Randall Gray
;   All rights reserved
;

(define kdebug-info-string
"

The variable \"kdebug-messages-list\" records all the messages
generated by calling kdebug with a tag (or tags) withis overlap with
the members of the target list \"kdebug-messages\". 
The routines to manipulate the kernel messages are
   (kdebug-message-state [#t/#f])  return state, emit or suppress messages
   (kdebug-msg-tag? tag)           which indicates if tag is a target
   (clear-kdebug-msg-tags)         sets the target list to null
   (copy-kdebug-msg-tags)          returns a list of the target tags
   (set-kdebug-msg-tags lst)       assign a new set of target tags
   (add-kdebug-msg-tag tag)        add a new tag to the list of targets
   (remove-kdebug-msg-tag tag)     remove a tag from the list of targets
   (get-kdebug-message-list)       return a list of all the messages logged
   (clear-kdebug-messages          flush the list of all the messages logged
   (set-kdebug-msg-collection B)   #t to collect messages #f otherwise
   (set-kdebug-msg-display B)      #t to display messages #f otherwise



Catch all messages:
  '*

In general, you can use wildcards anywhere to match particular sets of
messages: '*-ecoservice-* would match
'logdata-ecoservice-initialisation as well as
habitat-ecoservice-shutdown.  Some tags may have a taxon embedded in
them, and that will work too: 'fish-L.sebae-hunting would match
'fish-L.* '*L.s* and *L.s*hunting.  Wildcards can be used in either
the tag part of a (kdebug tag ...) or (kdebug taglist...), or when
adding things with (add-kdebug-msg-tag tag) or (add-kdebug-msg-tags lst).

Look in wildcard.scm for a more complete description of the matching possible.


Messages associated with the framework:
  'trace-bodies                    Entry and departure of model bodies is logged
  'track-init                      Tracks initialisation process
  'track-subjective-times          Tracks the subjective times of agents
  'passing-control-to-model        Tracks the interface between framework and model
  'prep                            Follows the preparation of agents for a run
  'running                         Things associated with a running system
  'run-agent                       Tracks dynamics associated with the run-agent routine
  'run-model-body                  Useful for debugging nested agents
  'model-bodies                    Indicates when model bodies are being run
  'monitor-bodies                  Indicates when monitor bodies are being run
Logger messages:
  'info
  'introspection
  'introspection-trace
  'log-animal
  'log-data
  'log-ecoservice
  'log-map
  'log-patch
  'log-sched-error
  'log-simple-plant
  'logfile
  'logging-debug
  'do-map-conversion
  'snapshot

Animal messages:
  'animal-running
  'focus
  'debugging-eating
  'stomach
  'metabolism

Plant messages:
  'plant-running
  'focus
  'debugging-eating
  'stomach
  'metabolism

Landscape/habitat/patch/ecoservice messages:
  'landscape-running
  'habitat-running
  'patch-running
  'nested-habitat
  'nesting
")

(define (kdebug-info . args)
  (display kdebug-info-string)
  )


;-- Warning messages and kernel reporting

;--- warnings

(define show-warnings #f)


(define (warning . args)
  (if show-warnings
		(begin
		  (display "*** warning: ")
		  (apply dnl* args)
		  )))

;--- kernel message closure and accessors

(define kdebug-message-state #!void)

(define debugkdebug #!void) ;; activate (debugkdebug #t), or disactivate (debugkdebug #f) debugging code for kdebug
(define kdebug-msg-tag? #!void) ;; returns #t if the argument is a current member of the list of tags
(define clear-kdebug-msg-tags #!void) ;; set the list of target tags to null
(define get-kdebug-msg-tags #!void) ;; get the list of target tags
(define set-kdebug-msg-tags #!void) ;; set the list of target tags
(define add-kdebug-msg-tag #!void)  ;; add a tag to the target list
(define remove-kdebug-msg-tag #!void) ;; remove a tag from the target list
(define get-kdebug-messages #!void)  ;; return the collection-list of matched messages
(define clear-kdebug-messages #!void) ;; clear the collection-list of matched messages
(define set-kdebug-msg-collection #!void) ;; indicate that matched messages should be added to the collection-list or not
(define set-kdebug-msg-display #!void) ;; indicat that matched messages should be displayed or not
(define kdebug? #!void) ;; predicate that indicates if a kdebug would print
(define kdebug-production! #!void) ;; set or unset production model (by-passes everything)
(define kdebug-wildcards! #!void) ;; set or unset the use of wildcards in the tags
(define kdebug #!void)
;; like 
;;     (kdebug 'things "yadda yadda" mass)
;;     (kdebug '(big-things little-things) "Y'know?")
;; and
;;     (kdebug '*things "Will match 'anything' and 'everything', but not 'this'!")
;; if using wildcards.


;(definition-comment 'kdebug kdebug-info-string)
(define (->str s)
  (if (string? s)
		s
		(object->string s)))

(define (map->string s)
  (if (pair? s)
		(map ->str s)
		(->str s)))

(let* ((production-state #f)
		 (use-wildcards #t)
		 (dbgkdbg #f)
		 (kdebug-msg-tags '())
		 (kdebug-message-list '())
		 (collect-messages #t) ;; by default collects everything
		 (display-messages #t)
		 (set-kdebug-msg-col (lambda (#!optional x) (set! collect-messages (if x #t #f))))
		 (set-kdebug-msg-dsp (lambda (#!optional x) (set! display-messages (if x #t #f))))
		 (kdebug-production (lambda (#!optional x) (set! production-state (if x #t #f))))
		 (kdebug-wildcards (lambda (#!optional x) (set! use-wildcards (if x #t #f))))
		 (kdebug%? (lambda (msg)
						 (set! msg (map->string msg))
						 (if production-state
							  #f
							  (let* ((kmtags kdebug-msg-tags)
										(result
										 (if (pair? kmtags)
											  (if use-wildcards ; use more capable system
													(begin
													  (or 
														(apply orf (map
																		(lambda (P)
																		  (apply orf
																					(map
																					 (lambda (S) (wildmatch P S))
																					 msg)
																					))
																		kmtags))
														(apply orf (map
																		(lambda (P)
																		  (apply orf
																					(map
																					 (lambda (S) (wildmatch P S))
																					 kmtags)
																					))
																		msg))
														))
													(begin
													  (or (member "*" kmtags)
															(and (string? msg) (member msg kmtags))
															(and (list? msg)	(not (null? (list-intersection msg kmtags))))))
													)
											  #f))
											  )
								 (if dbgkdbg
									  (begin
										 (dnl "DEBUGGING kdebug:")
										 (dnl "  kdebug-msg-tags: " kmtags)
										 (dnl "   kdebug message: " msg)
										 (dnl "           result: " result)
										 ))
								 result
								 ))
						 ))
		 (kms (lambda x (cond
							  ((null? x) display-messages)
							  ((car x) (set! display-messages #t))
							  (#t (set! display-messages #f)))))
		 (isa? (lambda (x)
					(if production-state
						 (member x kdebug-msg-tags))))
		 (copy (lambda ()
					(list-copy kdebug-msg-tags)))
		 (clear (lambda ()
					 (set! kdebug-msg-tags '())))
		 (set (lambda (lst)
			    (if (not (list? lst))
					  (error "set-kdebug-msg-tags! requires a list of tags" lst))
				 (set! kdebug-msg-tags (list-copy (map->string lst)))))
		 (add (lambda (msg)
				  (set! kdebug-msg-tags (uniq (sort (map->string (cons msg kdebug-msg-tags)) string<=?)))))
		 (remove (lambda (msg)
					  (set! kdebug-msg-tags (filter (lambda (x) (not (eqv? (map->string msg) x))) kdebug-msg-tags))))
		 (get-list (lambda ()
						 (list-copy kdebug-message-list)))
		 (clear-list (lambda ()
						 (set! kdebug-message-list '())))
		 (kdebug% (lambda (msg . args)
						(set! msg (map->string msg))
						
						(if production-state
							 (void)
							 (begin
								(if (kdebug%? msg)
									 (let ((str (with-output-to-string
													  '()
													  (lambda () (display "kdebug: ")(display msg)(display " ---> ") (apply dnl* args)))))
										(if display-messages
											 (display str))
										(set! kdebug-message-list (append kdebug-message-list (list str)))))))))

		 (dkd (lambda (#!optional x)
				  (set! dbgkdbg (if x #t #f))))
		 )

  (set! debugkdebug dkd)
  (set! kdebug-message-state kms)

  (set! kdebug-msg-tag? isa?)
  (set! get-kdebug-msg-tags copy)
  (set! set-kdebug-msg-tags set)
  (set! add-kdebug-msg-tag add)
  (set! remove-kdebug-msg-tag remove)
  (set! clear-kdebug-msg-tags clear)
  (set! get-kdebug-messages get-list)
  (set! set-kdebug-msg-display set-kdebug-msg-dsp)
  (set! set-kdebug-msg-collection set-kdebug-msg-col)
  (set! clear-kdebug-messages clear-list)
  (set! kdebug kdebug%)
  (set! kdebug? kdebug%?)
  (set! kdebug-production! kdebug-production)
  (set! kdebug-wildcards! kdebug-wildcards)
)





;-  The End 


;;; Local Variables: 
;;; comment-end: " ;;;" ;;;
;;; comment-start: ";;; " ;;;
;;; mode: scheme ;;;
;;; outline-regexp: ";-+" ;;;
;;; comment-column: 0 ;;;
;;; End:
