; -*- mode: scheme; -*-
;--
; Test model configuration
;-  Code 

;(dump wally)(newline)
;(aborts "Incomplete initialisation is making things fail when it runs")


;; This loads the framework
;;(include "framework") ;; this is for the time-probe macros
(load "loadem.scm")

;-- Configure the informational output (e.g. for debugging)


(kdebug-production! #t) ;; bypass all kdebug messages (they can be slow to process)

(set! indicate-progress #t) ;; print an indication of how far the run has progressed.  Should be #t or #f

(clear-kdebug-msg-tags)
;(define kdebug? (lambda x #f)) ;; This shorts it out as rapidly as possible.
;(define kdebug kdebug?)        ;; We might later convert it to a macro that just "disappears"

;(add-kdebug-msg-tag 'logger-redundancy-check)
;(add-kdebug-msg-tag 'B.exemplarii)
;(add-kdebug-msg-tag 'fruit)
;(add-kdebug-msg-tag 'seeds)
;(add-kdebug-msg-tag 'run)
(add-kdebug-msg-tag 'PSsst)
;(debugkdebug #t)
;(debugkdebug #f)

(kdebug-message-state #f)


;; This needs to be done before we start loading agent into things,
;; else they may set up their filenames incorrectly
(set! time-field-width 8)
;; defaults to 8, needs to be 12 to accomodate 3000 years from t = 0sec


;- =================  Define the model domain now =======================
;========================================================================

"The model domain must be defined before the model itself is loaded."


;-- First do time

(define start 0) ;; day zero
;(define end (* 12 days)) ;; of christmas y'know
;(define end (* 480 days)) ;; 
(define end (* 6 weeks)) ;; 
;(define end (* 61 days)) ;; end at some day after the start
;(define end (* 365.25 32)) ;; simulate 32 years
;(define end (* 365.25 10)) ;; simulate 10 years
;(define end (* 365.25 6))  ;; simulate 6 years
;(define end (* 365.25 4))  ;; simulate 4 years
;(define end (* 365.25 2))  ;; simulate 2 years

(if (< end start)
	 (error "The model doesn't work in that direction")
	 (dnl* "***** Running from" start "to" end))


;-- Now space

(set-model-domain '(-5040 -5040 -100) '(5040 5040 3000) isoA4)
                  ;; ll ur optional-pagesize
;(set-model-domain '(-5040 -5040 -100) '(5040 5040 3000) isoA4r)
;; rotated


;-- --------------- Load parameters from the parameters directory -------

;; This should be the first thing in a model configuration file after
;; the framework is loaded.
(load-parameter-set "parameters") ;; params is the directory which
											 ;; contains the parameter files

;-- Global data ---------------------------------------------------------
;========================================================================

(set! default-margins 10) ;; this is for "map" output and is always in mm


(define missing-value 0+1e-347i)
;; things arrived at by mortality are 
;; likely to be inexact

(define Q '())  ;; This is the queue which holds the agents
					 ;; in the simulation

;-- Set kernel flags ----------------------------------------------------

;; The kernel will emit messages (with kdebug) which have a label which
;; matches something in the kdebug-messages list

;(set! kdebug-messages (append '(*) kdebug-messages))

;; Indicate which agents are "nested"; as an example patches may be
;; present either as independent things or as components within a
;; habitat

;(set! nested-agents '(nested-habitat)) ;; No, run simply for the moment

;(add-kdebug-msg-tag 'introspection)
;(add-kdebug-msg-tag 'log-*)


;-- load the specific model configuration ------------------------------------------------

"The following code takes the list of registered submodels and loads any files they may be 
dependent on.  Loggers must be loaded after the other submodels, so we take two passes."

(load "specific-model.scm")					 



;; Run till end without pause.  If you are a penguin, run without paws.
(define (Doit q)
  (display "Ok.\n")
  (let ((state (kdebug-message-state)))
	 (kdebug-message-state #t)

	 (if #f
		  (check-service-data-lists service-name-list
											 service-type-list
											 service-eqn-sym-list))
	 (dnl* "Prepping")
	 (prep-agents q start end)
	 (dnl* "Running")
	 (set! q (queue start end q))
	 (kdebug-message-state state)
	 
	 (dnl* "Remember to run (shutdown-agents Q)")
	 )
  )


(define Dunnit #f)
(define *dunnit* #f)

(define (doit q . n)
  (set! Dunnit (lambda () (shutdown-agents q)))
  (set! n (if (pair? n) (car n) 1))
  (if (not *dunnit*) (begin (prep-agents q start end) (set! *dunnit* 0)))
  (set! q (queue *dunnit* (+ *dunnit* n) q))
  (set! *dunnit* (+ *dunnit* n))
  )

;;======================================================================

(dnl "Run with (Doit Q) to run from the start to the end\n")
(dnl "Run with (doit Q n) to run for n days (not necessarily n ticks!)")
(dnl "             so you can run the next step in a similar fashion\n")
(dnl "Close up shop with (shutdown-agents Q) -- this closes files and things.")


(display "Loaded: ")
(apply dnl* (map (lambda (x) (slot-ref x 'name)) Q))

;-  The End 


;;; Local Variables:
;;; mode: scheme
;;; outline-regexp: ";-+"
;;; comment-column:0
;;; comment-start: ";;; "
;;; comment-end:"" 
;;; End:
