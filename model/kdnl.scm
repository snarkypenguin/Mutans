; -*- mode: scheme; -*-
;-  Identification and Changes

;--
;	kdnl.scm -- Written by Randall Gray 
;	Initial coding: 
;		Date: 2016.10.23
;		Location: zero.grayrabble.org:/home/randall/Thesis/Example-Model/model/kdnl.scm
;
;	History:
;

;-  Copyright 

;
;   (C) 2016 Randall Gray
;   All rights reserved
;

(define kdnl-info-string
"

The variable \"kernel-messages-list\" records all the messages
generated by calling kdnl* with a tag (or tags) withis overlap with
the members of the target list \"kernel-messages\". 
The routines to manipulate the kernel messages are
   (kernel-message-state #t/#f)    emit or suppress messages
   (kernel-msg-tag? tag)           which indicates if tag is a target
   (clear-kernel-msg-tags)         sets the target list to null
   (copy-kernel-msg-tags)          returns a list of the target tags
   (set-kernel-msg-tags lst)       assign a new set of target tags
   (add-kernel-msg-tag tag)        add a new tag to the list of targets
   (remove-kernel-msg-tag tag)     remove a tag from the list of targets
   (get-kernel-message-list)       return a list of all the messages logged
   (clear-kernel-messages          flush the list of all the messages logged
   (set-kernel-msg-collection B)   #t to collect messages #f otherwise
   (set-kernel-msg-display B)      #t to display messages #f otherwise



Catch all messages:
  '*

Messages associated with the framework:
  'trace-bodies                    Entry and departure of model bodies is logged
  'track-init                      Tracks initialisation process
  'track-subjective-times          Tracks the subjective times of agents
  'passing-control-to-model        Tracks the interface between framework and model
  'prep                            Follows the preparation of agents for a run
  'running                         Things associated with a running system
  'run-agent                       Tracks dynamics associated with the run-agent routine
  'run-model-body                  Useful for debugging nested agents
  'model-bodies                    Indicates when model bodies are being run
  'monitor-bodies                  Indicates when monitor bodies are being run
Logger messages:
  'info
  'introspection
  'introspection-trace
  'log-*
  'log-animal
  'log-data
  'log-ecoservice
  'log-map
  'log-patch
  'log-sched-error
  'log-simple-plant
  'logfile
  'logging-debug
  'do-map-conversion
  'snapshot

Animal messages:
  'animal-running
  'focus
  'debugging-eating
  'stomach
  'metabolism

Plant messages:
  'plant-running
  'focus
  'debugging-eating
  'stomach
  'metabolism

Landscape/habitat/patch/ecoservice messages:
  'landscape-running
  'habitat-running
  'patch-running
  'nested-habitat
  'nesting
")

(define (kdnl-info . args)
  (display kdnl-info-string)
  )


;-- Warning messages and kernel reporting

;--- warnings

(define show-warnings #f)


(define (warning . args)
  (if show-warnings
		(begin
		  (display "*** warning: ")
		  (apply dnl* args)
		  )))

;--- kernel message closure and accessors

(define kernel-message-state #f)

(define kernel-msg-tag? #f)
(define clear-kernel-msg-tags #f)
(define get-kernel-msg-tags #f)
(define set-kernel-msg-tags #f)
(define add-kernel-msg-tag #f)
(define remove-kernel-msg-tag #f)
(define kdnl* #f)
(define get-kernel-messages #f)
(define clear-kernel-messages #f)
(define set-kernel-msg-collection #f)
(define set-kernel-msg-display #f)
(define kdnl*? #f) ;; predicate that indicates if a kdnl would print

(definition-comment 'kdnl* kdnl-info-string)

(let* ((kernel-messages '())
		 (kernel-message-list '())
		 (collect-messages #t)
		 (display-messages #f)
		 (set-kernel-msg-col (lambda (x) (set! collect-messages x)))
		 (set-kernel-msg-dsp (lambda (x) (set! display-messages x)))
		 (kdnl%? (lambda (msg)
							  (or (member msg kernel-messages)
							  (member '* kernel-messages)
							  (and (list? msg)
									 (not (null? (list-intersection msg kernel-messages)))))))
		 (kms (lambda x (cond
							  ((null? x) display-messages)
							  ((car x) (set! display-messages #t))
							  (#t (set! display-messages #f)))))
		 (isa? (lambda (x)
					(member x kernel-messages)))
		 (copy (lambda ()
					(list-copy kernel-messages)))
		 (clear (lambda ()
					 (set! kernel-messages '())))
		 (set (lambda (lst)
			    (if (not (list? lst))
					  (error "set-kernel-messages! requires a list of symbols" lst))
				 (set! kernel-messages (list-copy lst))))
		 (add (lambda (msg)
				  (if (not (symbol? msg))
						(error "add-kernel-message! requires a symbol" msg))
				  (set! kernel-messages (uniq (sort (cons msg kernel-messages) symbol<?)))))
		 (remove (lambda (msg)
					  (if (not (symbol? msg))
							(error "remove-kernel-messages! requires a symbol" msg))
					  (set! kernel-messages (filter (lambda (x) (not (eqv? msg x))) kernel-messages))))
		 (get-list (lambda ()
						 (list-copy kernel-message-list)))
		 (clear-list (lambda ()
						 (set! kernel-message-list '())))
		 (kdnl (lambda (msg . args)
					(if (kdnl%? msg)
						 (let ((str (with-output-to-string
										  '()
										  (lambda () (display msg)(display " ---> ") (apply dnl* args)))))
							(if display-messages
								 (display str))
							(set! kernel-message-list (append kernel-message-list (list str)))))))
		 )

  (set! kernel-message-state kms)
  
  (set! kernel-msg-tag? isa?)
  (set! get-kernel-msg-tags copy)
  (set! set-kernel-msg-tags set)
  (set! add-kernel-msg-tag add)
  (set! remove-kernel-msg-tag remove)
  (set! clear-kernel-msg-tags clear)
  (set! get-kernel-messages get-list)
  (set! set-kernel-msg-display set-kernel-msg-dsp)
  (set! set-kernel-msg-collection set-kernel-msg-col)
  (set! clear-kernel-messages clear-list)
  (set! kdnl* kdnl)
  (set! kdnl*? kdnl%?)
)





;-  The End 


;;; Local Variables: 
;;; comment-end: " ;;;" ;;;
;;; comment-start: ";;; " ;;;
;;; mode: scheme ;;;
;;; outline-regexp: ";-+" ;;;
;;; comment-column: 0 ;;;
;;; End:
