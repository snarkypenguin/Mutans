; -*- mode: scheme; -*-
'Parameters
(define <agent>-parameters
  (list
	(list 'active-subsidiary-agents '())
	(list 'replaced-by #f) ;; usually a list of the agent(s) which replaced it or #f
	(list 'agent-body-ran #f)
	(list 'no-model-body #f) ;; This needs to be true for some agent classes, such as <log-data> and <log-map>
	(list 'agent-epsilon (* 1e-6 seconds))
	(list 'agent-schedule '())
	(list 'agent-state 'ready-for-prep ) ;; This must only be changed if you *really* understand what you are doing!
	(list 'queue-state 'ready-for-prep ) ;; This must only be changed if you *really* understand what you are doing!
	(list 'counter 0)
	(list 'subjective-time 0) ;; we assume we start at t=0, but this may not be the case
	(list 'dt (* seconds 1.0))
	(list 'unused-time 0)
	(list 'jiggle 0)
	(list 'maintenance-list '()) ;; this is a list of funcs
	(list 'model->local '($ (cdr (assoc 'I *default-projections*))))
	(list 'local->model '($ (cdr (assoc 'I *default-projections*))))
	(list 'migration-test  (lambda args #f)) ;; Don't migrate by default
	(list 'name '<nameless>)
	(list 'note "")
	(list 'priority 0) ;; give no advantage
	(list 'state-flags '())
	(list 'subjective-time 0.0)
	(list 'subsidiary-agents '())
	(list 'timestep-schedule '()) ;; does nothing unless there are numbers in it
	(list 'always-log #f) ;; true or false -- this is used so that "context" agents appear irrespective of time
	(list 'memory '()) 
	(list 'dont-log
			'(ready-for-prep
			  ;; agent things
			  agent-body-ran
			  agent-epsilon local->model model->local counter 
			  migration-test state-flags
			  dont-log kernel
			  ;; log agent things
			  introspection-list
			  timestep-epsilon 
			  dims
			  ;; thing things
			  ;; environment things
			  default-value minv maxv 
			  ;; ecoservice things
			  plateau-interval growth-rate 
			  ;; landscape things
			  service-list service-update-map
			  update-equations terrain-function
			  dump-times scale 
			  log-services-from-patch
			  log-patches-from-habitat
			  ;; animal things
			  domain-attraction food-attraction 
			  near-food-attraction searchspeed
			  wanderspeed foragespeed	
			  movementspeed foodlist homelist
			  breedlist habitat
			  ))
))
(set! global-parameter-alist (cons (cons <agent> <agent>-parameters) global-parameter-alist))



