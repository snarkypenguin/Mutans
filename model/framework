; -*- mode: scheme; -*-
;-  Identification and Changes

;--
;	framework -- Written by Randall Gray 
;	Initial coding: 
;		Date: 2012.11.12
;
;	History:
;

;;; The code in this file is supposed to make things a little easier.

;;;
;;;  This model framework uses SCLOS by Gregor Kiczales, and released
;;;  by Xerox Corp. in 1992. None of the code from sclos.scm has been 
;;;  included in the other files which form the modelling framework.


;;; NOTE: The lower case word 'INITIALIZE' and its derivatives have been 
;;; changed to a lower case 'INITIALISE' in SCLOS.
;;; There were two reasons:
;;;     - the debugging got very tedious when trying to use the two
;;;       forms together (yes, foolish)
;;; and
;;;     - my primitive brain rebelled when I tried to adopt the 'z' (OED)
;;;       form.  Muscle memory being what it is, I again spent far too
;;;       much time correcting (and uncorrecting) the words. 

;;; I have included normalizing/normalising programs so that future users
;;; can choose their preferred spelling.  The programs in question are 

;;; 	Normalize  ... which converts the code to OED spellings, and 
;;;   Normalise  ... converts the code to the (mostly) standard 
;;;                   Australian spelling. 

;;; It is not hard to change it to catch specializer as well. 

;(let ((loading-list (load 'loading-list)))
;  (display ";;; Loading: ")
;  (display loading-list)
;  (newline))
;





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;                                           ;;;;;;;;;;;;;
;;;;;;;;;;;;; This file *must* be included, not loaded. ;;;;;;;;;;;;;
;;;;;;;;;;;;;                                           ;;;;;;;;;;;;;
;;;;;;;;;;;;; Macros are only active within the file    ;;;;;;;;;;;;;
;;;;;;;;;;;;; in which they are defined.                ;;;;;;;;;;;;;
;;;;;;;;;;;;;                                           ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-macro (assert tst #!rest msg)
  (if #t
		`(if (not ,tst)
			  (begin
				 (display "Assertion ")
				 (display ',tst)
				 (display " failed\n")
				 (if (not (null? (list ,@msg))) (begin (apply display (list ,@msg))(newline)))
				 (abort)))
		))
		




;; This is used to determine where bottlenecks might be.
;; The variables
;;               collecting-times
;;               time-register
;; and
;;               tr-serial-number
;; are defined in code-timer.scm.  collecting-times should be true or
;; false (#t/#f) and controls whether or not timing information is
;; collected.

(define-macro (END . body)
  `(begin ,@body (error "c.f. 'Mort', 'Reaper Man', 'Soul Music', 'Hogfather' and 'Thief of Time'")))

;--- (time-probe name . body) macro
(define-macro (time-probe name . body)
  `(let* ((x_x_name ,name)
			(x_x_s (process-times))
			(x_x_n (let () ,@body))
			(x_x_f (process-times)))
	  (if collecting-times
			(let ((sn tr-serial-number))
			  (set! tr-serial-number (+ 1 tr-serial-number))
			  (if (null? time-register)
					(let ((r (real-time)))
					  (set! time-register (cons (list "origin" (list 0 0 r 'start) (list 0 0 r 'finish) (list 0 0 0 'difference sn)) time-register))))
			  (set! time-register (cons (list x_x_name ;; times columns are user system wallclock
														 ;; the rows are start, finish, difference
														 (append (f64vector->list x_x_s) (list 'start sn))
														 (append (f64vector->list x_x_f) (list 'finish sn))
														 (append (map - (f64vector->list x_x_f) (f64vector->list x_x_s)) (list 'difference sn))
														 )
												 time-register))))
	  x_x_n))

;--- (time-probe* name . body) macro
(define-macro (time-probe* name . body)
  `(begin
	  (if collecting-times
			(let ((sn tr-serial-number))
			  (set! tr-serial-number (+ tr-serial-number 1))
			  
			  (if (null? time-register)
					(let ((r (real-time)))
					  (set! time-register (cons (list "origin" (list 0 0 r 'origin sn)) time-register))))
			  
			  
			  (let* ((x_x_name ,name)
						(x_x_s (process-times))
						)
				 (set! time-register (cons (list "origin" (list 0 0 r 'origin sn)) time-register))
				 (let* ((x_x_n (let () ,@body))
						  (x_x_f (process-times)))
					(set! time-register (cons (list x_x_name ;; times columns are user system wallclock
															  ;; the rows are start, finish, difference
															  (append (map - (f64vector->list x_x_f) (f64vector->list x_x_s)) (list difference sn))
															  )
													  time-register))))
			  x_x_n))))


;; This ought to be done with define-syntax, but this is more convenient than loading the sytax stuff.
(define-macro (while condition . body)
  `(let while-loop-call ((c ,condition))
	 (if c
		  (begin
			 ,@body
			 (while-loop-call ,condition)
			 ))))
		  



;; This should be true if you want UNFINISHED-BUSINESS reported.
(define UNFINISHED #f) 
(define monitor-inits #f)
(include "framework-flags.scm")

;-  Code 

;; See also Kiczales, Gregor; Jim des Rivieres; Daniel G. Bobrow (July
;; 30, 1991). The Art of the Metaobject Protocol. The MIT . ISBN
;; 978-0262610742.

;; This prefixes the scheme (error...) call with a routine that spits
;; out the current file being loaded.
(define (Error #!rest args)
  `(let ()
	 (display "In ")
	 (display (load 'now-loading))
	 (display ": ")
	 (error ,@args)))


(define-macro (define% formals #!rest body)
  (let ((txt (if (list? formals)
					  `(define ,formals
						  (kdebug 'deep-debugging  "Function:" (,(car formals) ,@(cdr formals)))
						  (let* ((%%%-timer-start-%%% (process-times))
								  (%%%-timer-stop-%%% #f)
								  (result (begin ,@body)))
								(set! %%%-timer-stop-%%% (process-times))
								(set! %%%-time-register-%%% (cons (list ',formals %%%-timer-start-%%% %%%-timer-stop-%%%) %%%-time-register-%%%))
								(kdebug 'deep-debugging "Exiting" ,@formals " ==> " result)
								result))
					  (error "We cannot use define% except on definitions of the form (define (func ...) ...)" formals)
					  ;;; `(define ,formals
					  ;;; 	  "second clause"
					  ;;; 	  (let* ((%%%-timer-start-%%% (process-times))
					  ;;; 				(%%%-timer-stop-%%% '())
					  ;;; 				(result (begin ,@body)))
					  ;;; 		 (set! %%%-timer-stop-%%% (process-times))
					  ;;; 		 (set! %%%-time-register-%%% (cons (list ',formals %%%-timer-start-%%% %%%-timer-stop-%%%) %%%-time-register-%%%))
					  ;;; 		 (kdebug 'deep-debugging "Defining " ',formals " = " result)
					  ;;; 		 result))
					  )
				 ))
	 ;;(pp txt)
	 txt))



(define-macro (define-debug formals #!rest body)
  (let ((txt (if (list? formals)
					  `(define ,formals
						  "first clause"
						  (kdebug 'deep-debugging  "Function:" (,(car formals) ,@(cdr formals)))
						  (let ((result (begin	,@body)))
							 (kdebug 'deep-debugging "Exiting" ,@formals " ==> " result)
							 result))
					  `(define ,formals (let ((result (begin ,@body)))
												 (kdebug 'deep-debugging "Defining " ',formals " = " result)
												 result))
					  )))
	 ;;(pp txt)
	 txt))

;; Calls to a closure function are of the form (name t reqvar1 reqvar2 ....)
;; Note: t is passed in, rather than dt, since we don't want accidental multiple updates
(define-macro (define-update-closure name class-id svlist reqlist . body)
  `(define ,name
	  (let* ((id ,id)
			  ,@(map (lambda (sv) (list (list sv #f))) ,svlist)
			  (Reqlist ',reqlist) ;; all possible requirements
			  (reqlist ',reqlist) ;; current reqlist
			  (T #f)
			  (this-continuation
				(lambda x
				  (cond
					((null? x)  ;; the closure with no arguments returns its requirements (which may change through time)
					 reqlist)
					((and (= 1 (length x))
							(symbol? (car x)))
					 (case (car x)
						((requirements) reqlist)
						((all-requirements) Reqlist)
						((values) #f) ;; cannot ask for values without the class-id
						((
						(else (Error "bad call to update-closure function" x)))
					 )
					((and (= 1 (length x))
							(symbol? (car x)))
					 (case (car x)
						((requirements) reqlist)
						((all-requirements) Reqlist)
						((values) #f) ;; cannot ask for values without the class-id
						(else (Error "bad call to update-closure function" x)))
					 )
					((number? (car x))
					 (if (eq? (length (cdr x)) (+ 1 (length reqlist)))
						  (let* ((dt (if (< T t) (- (car x) T) 0))
								  )
							 (let ((result (begin ,@body)))
								(set! T t)
								result)
							 )
						  (Error "Failed to pass in the necessary number of arguments!" x)))
					))
					(#t (Error "+++Incomprehensible Update+++" x)))))
			  )
		 this-continuation))
  )
					 

(define-macro (UNFINISHED-BUSINESS . body)
  (if UNFINISHED
		(dnl* (load 'now-loading) " has unfinished business:\n" body))
  `#!void)

(define-macro (excise-s-expression . body)
  `#!void)

(define-macro (conditional-load yea-or-nay . body)
  (if yea-or-nay
		 `(let ()
			 ,@body)
		 ))

(define-macro (code-variants:use select A B)
  (cond
	((member select '(first one 1)) `,A)
	((member select '(second two 2)) `,B)
	))

(define-macro (code-block-variants:use select A B)
  (cond
	((member select '(first one 1)) `(let () ,@A))
	((member select '(second two 2)) `(let () ,@B))
	))

(define-macro (with-exit name . body)
  `(call-with-current-continuation
    (lambda (,name) ,@body)))


(define-macro (state-variables . svlst)
  (let ((rslt `'(,@svlst)))
	 ;;(pp rslt)
	 rslt))

(define-macro (no-state-variables . nsvlst)
  (let ((rslt '()))
	 rslt))


(define-macro (default-values . dvlst)
  (let ((rslt `'(,@dvlst)))
	 ;;(pp rslt)
	 rslt))

(define-macro (no-default-values . lst)
  (let ((rslt '()))
	 rslt))

(define-macro (no-values . lst)
  (let ((rslt '()))
	 rslt))


;; This makes it clear when classes are defining NO state vars

(define-macro (inherits-from . iflst) `(list ,@iflst))

(define-macro (default-initialisation class . iflst)
  `(add-default-initialisation
	 ,class ;; uses actual class as the key
	 '(,@iflst)))

;; Support for the "isa?" calls and for a mapping from the class
;; object to a name

;; Remember, if you try to unquote classtype without splicing, the
;; interpreter tries to evaluate it.


;;; ;; cpl... class precedence list
;;; (define-macro (isa? self . classtype)
;;;   (letrec ((orf (lambda x (if (null? x #f) (or (car x) (apply orf (cdr x)))))))
;;; 	 (let ((txt `(let ((ancestors (class-cpl (class-of ,self))))
;;; 						(if (apply orf
;;; 									  (map (lambda (x) (member x ancestors))
;;; 											 (list ,@classtype))) 
;;; 							 #t #f)
;;; 						)
;;; 					))
;;; 		;;(pp txt) ;; Uncomment to print the constructed code during the startup phase 
;;; 		txt)))



(define-macro (extend-symbol sym extn)
  `,(string->symbol (string-append (symbol->string sym) "-" extn)))


;;; (define-macro (make-object% class . initargs)
;;;   `(let ((instance (allocate-instance ,class)))
;;; 	  (initialise instance ,@initargs)
;;; 	  instance))

;;; (define-macro (make-agent% class . initargs)
;;;   `(let ((instance (allocate-instance ,class)))
;;; 	  (for-each (lambda (x) (slot-set! instance x '<uninitialised>)) (class-slots-of instance))
;;; 	  (initialise instance ,@initargs)
;;; 	  instance))

;-  Code 

(define-macro (register regname mname . val)
  ;;(display (list 'register `,regname `,mname `,val))(newline)
  (let ((txt
			(if (not (null? val))
				 `(,(string->symbol (string-append (symbol->string regname) "-register")) 'add ,mname ',mname ,(object->string mname) ,@val)
				 `(,(string->symbol (string-append (symbol->string regname) "-register")) 'add ,mname ',mname  ,(object->string mname))) )
		  )
	 ;;(display "register: ") (pp txt)  ;; Uncomment to print the constructed code during the startup phase 
	 txt))

(define-macro (register-unique regname mname . val)
  ;;(display (list 'register-unique `,regname `,mname `,val))(newline)
  (let ((txt
			(if (not (null? val))
				 `(,(string->symbol (string-append (symbol->string regname) "-register")) 'add-unique ,mname ',mname ,(object->string mname) ,@val)
				 `(,(string->symbol (string-append (symbol->string regname) "-register")) 'add-unique ,mname ,(object->string mname) ',mname)) )
		  )
	 ;;(display "register-unique: ") (pp txt) ;; Uncomment to print the constructed code during the startup phase 
	 txt))


(define-macro (define-class #!rest args)
  ;; (dnl (load 'current-file)": ""Defining class: " args)
  (let* ((cname (car args))
			;;(icname (string->symbol (string-append "<" (symbol->string cname) ">")))
			)
	 ;;(dnl "Defining " cname)
	 (let ((parents (cadr args)))
		;;(dnl "... which inherits from " parents)
		(let ((variables (caddr args) ))
		  (if (and (pair? variables) (not (memq (car variables) '(state-variables no-variables default-initialisation))))
				(Error "(define-class..) expects (state-variables name1...) or (no-variables)" args))
		  (let ((V  (append (cdr variables)
								  	 (if (or #t (and #t (not (eqv? cname  '<object>))))
										  (list (string->symbol (string-append (symbol->string (car args)) "-initialised")))
										  '())
								  )))
			 ;;(dnl "... with variables " variables)
			 ;;(pp V)
			 (let* ((txt `(define ,cname
								 (let ((,cname (make-class ,parents ',V)))
									(register-unique class ,cname)
									,cname
									)))
					 )
				;;(dnl "-----")
				;;(pp txt)
				;;(dnl "_____")
					  
				txt
				))))))



(define-macro (declare-method #!rest args)
  ;;(dnl (load 'current-file) ": Declaring method: " args) ;; set to #t to announce method declarations
  (let ((cname (car args))
		  (description (cadr args))
		  )
	 (if (eqv? cname 'initialise)
		  (error "You must not declare the initialise generic-method, doing so breaks things badly." args))
	 (if (eqv? cname 'initialise)
		  (dnl "It may be a bad idea to use 'initialise' as a method name."))
	 (let ((txt `(define ,cname
						(let ((,cname (make-generic)))
						  (register-unique generic-method ,cname)
						  (class-register)
						  ,cname))))
		;;(pp txt)
		txt 
		)))


;; This doesn't work yet.... ought to be a part of the declaration, y'know.
;;(define-macro (guard-method mname)
;;  (let ((txt `(add-method '() (lambda args (error ',mname "has probably been called without a 'self' object or agent")))))
;;	 txt))

;; This works like so:
;;(model-method <parent1> (methname) body)
;;(model-method <parent1> (methname arg1 #!rest rest) body)
;;(model-method <parent1> (methname #!rest rest) body)
;;(model-method (<parent1>) (methname) body)
;;(model-method (<parent1>) (methname arg1 arg2...) body)
;;(model-method (<parent1> <parent2>...) (methname) body)
;;(model-method (<parent1> <parent2>...) (methname arg1 arg2..) body)
;;(model-method (<parent1>) (methname arg1 arg2 #!rest rest) body)
;;(model-method (<parent1> <parent2>...) (methname arg1 arg2 #!rest rest) body)
;;----------->   classlst                  mname    mm-args.....          body

;; "(parent-methname)" can be used to invoke the parent's body --- sclos
;; handles any arguments that might be needed: "self" is the name of
;; the agent within the body code "t" is the current model time dt is
;; the requested dt the state variables are not directly available --
;; use "my" or "set-my!", "slot-ref" or "slot-set!"
;; (parents-methods clss clss...) can be used to invoke the  methods
;; associated with the


;; An object is a discrete component of a model which does not
;; communicate directly with the kernel -- this means that an object
;; cannot query the state or garner data from other parts of the model
;; without cheating.  Objects do *not* have kernel pointers, so the kernel
;; variable is set to #f.

(define-macro (model-method% #!rest madness)
  ;; Call like (model-method classname (mname args) #!rest body) where
  ;; the args doesn't include the call-parent-method and 'self' is
  ;; the placeholder
  (case (length madness)
	 ((0)
	  (Error "model-method: There is nothing here!" madness))
	 ((1) (Error "model-method: Only 1/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got" (cons 'model-method madness)))
	 ((2) (Error "model-method: Only 2/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got " (cons 'model-method madness)))
	 )
  (if (not (and (pair? (cadr madness)) (symbol? (caadr madness)) ))
		(Error "model-method: bad (mname mm-margs...) in (model-method ...) "
				 (caadr madness)))
  (if (not (eq? (cadadr madness) 'self))
		(Error "model-method: missing 'self' placeholder in the (model-method (classes) (methname self ...) ...) definition "
				 (caadr madness)))

  (let* ((classlst (if (list? (car madness))
							  (car madness)
							  (list (car madness))))
			(mname (caadr madness))
			(mm-args (cddadr madness))
			(body (cddr madness))
			)
	 
	 `(model-method ,classlst (,mname ,@mm-args)
						 (let* ((%%%-timer-start-%%% (process-times))
								  (%%%-timer-stop-%%% #f)
								  (result (begin ,@body)))
							(set! %%%-timer-stop-%%% (process-times))
							(set! %%%-time-register-%%% (cons (list ',mname ',mm-args %%%-timer-start-%%% %%%-timer-stop-%%%) %%%-time-register-%%%))
							result)
						 )))

(define-macro (model-method%% #!rest madness)
  ;; Call like (model-method classname (mname args) #!rest body) where
  ;; the args doesn't include the call-parent-method and 'self' is
  ;; the placeholder
  (case (length madness)
	 ((0)
	  (Error "model-method: There is nothing here!" madness))
	 ((1) (Error "model-method: Only 1/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got" (cons 'model-method madness)))
	 ((2) (Error "model-method: Only 2/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got " (cons 'model-method madness)))
	 )
  (if (not (and (pair? (cadr madness)) (symbol? (caadr madness)) ))
		(Error "model-method: bad (mname mm-margs...) in (model-method ...) "
				 (caadr madness)))
  (if (not (eq? (cadadr madness) 'self))
		(Error "model-method: missing 'self' placeholder in the (model-method (classes) (methname self ...) ...) definition "
				 (caadr madness)))

  (let* ((classlst (if (list? (car madness))
							  (car madness)
							  (list (car madness))))
			(mname (caadr madness))
			(mm-args (cddadr madness))
			(body (cddr madness))
			(tag (string->symbol (string-append (symbol->string mname) "-" (symbol->string (car classlst)))))
			)
	 
	 `(model-method ,classlst (,mname ,@mm-args)
						 (let* ((result (begin (start-timer ',tag) ,@body)))
							(stop-timer ',tag)
							result)
						 )))



(define-macro (model-method #!rest madness)
  ;; Call like (model-method classname (mname * args) #!rest body) where
  ;; the args doesn't include the call-parent-method and 'self' is
  ;; the placeholder
  (case (length madness)
	 ((0)
	  (Error "model-method: There is nothing here!" madness))
	 ((1) (Error "model-method: Only 1/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got" (cons 'model-method madness)))
	 ((2) (Error "model-method: Only 2/3 elements have been supplied!\nNeeds a specifier, a function-name and args, and a body, got " (cons 'model-method madness)))
	 )
  (if (not (and (pair? (cadr madness)) (symbol? (caadr madness)) ))
		(Error "model-method: bad (mname mm-margs...) in (model-method ...) "
				 (caadr madness)))
  (if (not (eq? (cadadr madness) 'self))
		(Error "model-method: missing 'self' placeholder in the (model-method (classes) (methname self ...) ...) definition "
				 (caadr madness)))

  (let* ((classlst (if (list? (car madness))
							  (car madness)
							  (list (car madness))))
			(mname (caadr madness))
			(mm-margs (cddadr madness))
			(body (cddr madness))
			(method-id (string-append  (object->string classlst) ": "(object->string mname) " " (object->string mm-margs)))
			)

;;	 (display "Dispatching parent calls with ")
;;	 (display `',(string->symbol (string-append "parent-" (symbol->string mname))))
;;	 (newline)

	 (if #f (begin ;; set to #t to announce method definitions
				  (dnl "************************************************************")
				  (dnl (load 'current-file)": Defining method: " classlst mname)
				  (pp body)))

	 (if (and #t (not (generic-method-register 'type? ',mname)))
		  (begin
			 (display "********* Instantiating the method (")
			 (display ',mname)
			 (display " ...) ********* before the method has been declared\n")
			 (Error "instantiating without declaration" ',mname))
		  (let ((txt `(let* ((M (make-method
										 (list ,@classlst) ;; make-method returns a function....
										 (lambda (,(string->symbol (string-append "parent-" (symbol->string mname))) self ,@mm-margs);; Provides ,parent-mname for the "best match"
											(kdebug (list (construct-symbol (cnc self)) (construct-symbol (cnc self) 'methods) 'model-methods) "Entering (" ',mname ',classlst  ") for" (cnc self))
											(let* (;; note: the only args accepted by the call-parents routine are the parents to call.
													 (kdebug-state #f)
													 (+kdebug! (lambda x (set! kdebug-state #t)))
													 (-kdebug! (lambda x (set! kdebug-state #f)))
													 (kdebug (lambda x (apply (if kdebug-state dnl* kdebug) x)))
													 (call-all-parents
													  (let ()
														 (lambda x (call-all-parent-methods ,mname 'self ,@mm-margs))))
													 (call-parents$
													  (let ()
														 (lambda restrictions (call-parent-methods$ restrictions ,mname  self ,@mm-margs))))
													 (call-parents
													  (let ()
														 (lambda restrictions (call-parent-methods (list restrictions ,mname self ,@mm-margs)))))

											  ;; provides ,parent-mname for arbitrary sets .. may be called more than once, and with different sets of parents
											  
											  ;; this provides the setter and getter for this entities variables (they can be passed about too)
													 ,(if production-run
															'(my (lambda (x) (slot-ref self x)))
															'(my (lambda (x) (if (symbol? x) (slot-ref self x)
																						(begin (dnl* "Passing" x "as the slotname in the" ',mname "method for" ',classlst)
																								 (abort))))))
													 ,(if production-run
															'(set-my! (lambda (x y) (slot-set! self x y)))
															'(set-my! (lambda (x y) (if (symbol? x) (slot-set! self x y)
																								 (begin (dnl* "Passing" x "as the slotname in the" ',mname "method for" ',classlst)
																										  (abort))))))
													 ;; it also provides a kernel call function (if it is an <agent> rather than an <object>)
													 (kernel (if (member 'kernel (map car (class-slots (class-of self))))
																	 (slot-ref self 'kernel)
																	 #f))
													 (method-id ,method-id)
													 (my-class (if (pair? ',classlst) (car ',classlst) ,classlst))
													  ;; The aboveis an example of of how one might add a "builtin" for every model-method 
													  ;;for all agents.  Not that it will be present in *all* agents, so care should be taken to
													  ;; make sure that they handle missing slots appropriately. Also notice how it handles the
													  ;; classlst parameter
													  
													  ;; Similarly, this would define a local variable (which is only valid while the method runs).
													  ;;   (my-taxon (slot-ref self 'taxon))
													  ;;
													  ;; The advantage with these is that we can potentially reduce the number of function invocations
													  ;; by permanently recording frequently used values.  
													 )
												 
												 (let ((mm-result
														  (begin
															 (kdebug '(list ,(construct-symbol ',myclass 'model-method) model-methods (construct-symbol ,method-id)) "Running " method-id " for "  (cnc self) (if (has-slot? self 'subjective-time) (string-append " at " (object->string (slot-ref self 'subjective-time ))) ""))
															 dt ;; If there is no body, then we just assume that doing nothing is easy.
															 ,@body) ))
													(kdebug (list (construct-symbol (cnc self)) (construct-symbol (cnc self) 'methods) 'model-methods) "Leaving (" ',mname ',classlst ") for" (cnc self)  "with" mm-result)
													mm-result)
												 )
											)
										 )
										))
							 (add-method ,mname M)
							 (method-register 'add M ',mname )
							 )
						 ))
			 (if (member ',mname '()) 
				  (begin
					 (dnl ";------------------------------------------------------------;")
					 (pp txt)))

			 (if #f (dnl "************************************************************")) ;;; set it to #t to make output pretty
			 txt))))



"*** The biggest differences between an model-method and a model-body is
that model-methods do not necessarily have access to the kernel.

The function that provides an agent's kernel access is assigned to the
'kernel slot at the beginning of its model-body.  If the global
boolean flag 'blue-meanie' is set to true, the slot is set to false
when then the agent leaves its model body with the result that any of
the agent's model-methods invoked while the model-body is not running
will not have access to the kernel.
"

;; model-body% records timing, model-body does not

(define-macro (model-body% myclass #!rest body)
  `(model-body ,myclass (let ((%%%-timer-start-%%% (process-times))
									  (%%%-timer-stop-%%% #f))
								 (let ((result (begin	,@body)))
									(set! %%%-timer-stop-%%% (process-times))
									(set! %%%-time-register-%%% (cons (list 'model-body ',myclass %%%-timer-start-%%% %%%-timer-stop-%%%) %%%-time-register-%%%))
									result))))

;; model-body%% records timing in a different way, model-body does not

(define-macro (model-body%% myclass #!rest body)
  (let ((tag (string->symbol (string-append (symbol->string myclass) "-model-body"))))
	 `(model-body ,myclass 		
					  (let ((result (begin (start-timer ',tag)	,@body)))
						 (stop-timer ',tag)
						 result))))


(define-macro (model-body myclass #!rest body)
  (if #f (begin ;; set to #t to announce the model bodies
  									  (dnl "************************************************************")
  									  (dnl (load 'current-file)": Defining body: " myclass) (pp body)))
  (if (not (symbol? myclass))
		(aborts "model-body: the class " myclass " should be an atom"))
  (if (eqv? myclass 'self) (error "No, I don't think that _self_ is a class...." myclass ) )


  (let ((method-id (string-append (object->string myclass) ": model-body")))
		  `(if (and #t (not (generic-method-register 'type? 'run-model-body)))
				 (Error "instantiating model-body with a declaration of run-model-body"))
		  (let* ((txt `(let ((M (make-method (list ,myclass <number> <number>)
														 (lambda (parent-model-body self t dt)
															(kdebug '(list ,(construct-symbol myclass 'model-body) model-bodies) "Running " ',myclass "model body"  (cnc self) (slot-ref self 'name) (if (has-slot? self 'subjective-time) (string-append " at " (object->string (slot-ref self 'subjective-time ))) ""))
															(let ((ccd (slot-ref self 'current-class-depth))
																	)
															  
															  ;;(dnl* ',myclass (cnc self) (name self) "model body at" t)
															  (if (and (zero? ccd)
																		  (member (slot-ref self 'queue-state) '(ready-to-run)))
																	(slot-set! self 'queue-state 'running))
															  (slot-set! self 'current-class-depth (+ ccd 1)))
															(kdebug (list (construct-symbol (cnc self)) (construct-symbol (cnc self) 'model-body)
																			  (construct-symbol (slot-ref self 'taxon)) 'model-bodies
																			  (construct-symbol (slot-ref self 'name)))
																	  (slot-ref self 'name) "Entering"
																	  (class-name-of ,myclass) "model-body at time" t "+" dt)
															(letrec ((no-parent-body (lambda args (set! call-parents no-parent-body) dt)))
															  (let* (
																		,(if production-run
																			  '(my (lambda (x) (slot-ref self x)))
																			  '(my (lambda (x) (if (symbol? x) (slot-ref self x)
																										  (begin (dnl* "Passing" x "as the slotname in the" ',mname "method for" ',classlst)
																													(abort))))))
																		,(if production-run
																			  '(set-my! (lambda (x y) (slot-set! self x y)))
																			  '(set-my! (lambda (x y) (if (symbol? x) (slot-set! self x y)
																													(begin (dnl* "Passing" x "as the slotname in the" ',mname "method for" ',classlst)
																															 (abort))))))
																		(call-all-parents
																		 (lambda x (call-all-parent-methods run-model-body (append (list self t dt) x))))
																		(call-parents$
																		 (lambda restrictions (apply call-parent-methods$ (cons restrictions (cons run-model-body (list self t dt))))))
																		(call-parents
																		 (lambda restrictions
																			(apply call-parent-methods
																					 (cons restrictions (cons run-model-body
																							 (list self t dt))))))

																		(initialised? (lambda () (slot-ref! self 'initialised)))
																		(initialised! (lambda () (slot-set! self 'initialised #t)))
																		(initialise (lambda  state (dnl* (cnc self) "/" (my 'name) "called initialise in body?")))
																		(reset-taxon (lambda (newtax) (slot-set! self 'taxon newtax)))
																		(my-class ,myclass)
																		(method-id ,method-id)
																		(kernel (slot-ref self 'kernel))
																		
																		;; This is an example of of how one might add a "builtin" for the model bodies of all agents.
																		;; Not that it will be present in *all* agents, so care should be taken to
																		;; make sure that they handle missing slots appropriately.
																		;;    (my-class (let ((c (car ,classlst))) (lambda () c)))
																		;; NOTE: my-class is already defined for model-bodies and for model-methods
																		
																		;; Similarly, this would define a local variable (which is only valid while the method runs).
																		;;   (my-taxon (slot-ref self 'taxon))
																		;;
																		;; The advantage with these is that we can potentially reduce the number of function invocations
																		;; by permanently recording frequently used values.  
																		)
																 (kdebug 'time-team "Entering wrapper with st of " (my 'subjective-time) ":" (my 'dt) "!" t ":"dt)
																 (if (> (abs (- (slot-ref self 'subjective-time) t)) (slot-ref self 'agent-epsilon))
																	  (error "Too much lost time! Possibly uncontrolled numeric error or a bug\n"
																				'st: (slot-ref self 'subjective-time) 't: t ))
																 (set! dt (min (my 'dt) dt))

																 (kdebug 'time-team "About to enter submodel with st of " (my 'subjective-time) ":" (my 'dt) "!" t ":"dt)
																 (let ((body-result
																		  (begin
																			 (kdebug (list (construct-symbol (cnc self)) (construct-symbol (my 'name))
																								(construct-symbol (my 'taxon)) (construct-symbol (cnc self) 'body)
																								'model-bodies) "Running model body for " method-id
																								(if (agent? self) (slot-ref self 'name) "<object>")
																								" at " t '/ (slot-ref self 'subjective-time) '+ dt)
																			 ;; if there is no body , the whole timestep needs to be used (but no more than the agent can chew)
																			 (if (not (eqv? (queue-state self) 'suspended))
																				  (begin
																					 dt
																					 ,@body)
																				  dt)
																			 ))
																		 )
																	(set! body-result 
																			(if (and trap-model-bodies-with-bad-return-values (or (void? body-result) (null? body-result)))
																				 (begin
																					(dnl* "#### The model-body of" (cnc self) "returned a void or a null list! This is not recommended.  Returning dt")
																					dt)
																				 ))														

																	(if (list? body-result)
																		 (set! body-result (map (lambda (x) (if (or (null? x) (void? x)) dt x))
																																  body-result)))
																	
																	(kdebug 'time-team "About to enter submodel with st of " (my 'subjective-time) ":" (my 'dt) "!" t ":"dt)
																	(kdebug 'model-body "returns with dt" dt " and with result" body-result)

																	(if (and (number? dt) (> dt 0)
																				(not (slot-ref self 'agent-body-ran)) ;; this ensures that the update only happens once per timestep
																				(or (my 'no-model-body)
																					 (eq? ,myclass (class-of self)) ;; this restricts the block to executing in the 'outermost'
																					 ))                             ;; model body (that of the the first argument in the (create ...) call)
																		 (begin
																			;; DO NOT CHANGE THE SUBJECTIVE TIME -- it is handled in the "run" method in framework-methods.  If
																			;; times are not being adjusted, it indicates that there is a break in the chaining back through parent model-bodies


																			
																			;; The counter variable can be used as an indicator for conditional initialisation -- it is only zero on the
																			;; first pass through an agent's chain of model bodies.
																			(slot-set! self 'agent-body-ran #t))
																		 )
																	(kdebug (list (construct-symbol (cnc self)) (construct-symbol (my 'name)) (construct-symbol (my 'taxon))
																					  (construct-symbol (cnc self) 'body) 'model-bodies) "Leaving" (cnc self)": " self "with" body-result)


																	(let ((ccd (slot-ref self 'current-class-depth)))
																	  (slot-set! self 'current-class-depth (- ccd 1))
																	  (cond
																		((< ccd 0) (dnl* "Impossible class depth") (abort))
																		((zero? ccd)
																		 (slot-set! self 'counter (+ 1 (slot-ref self 'counter)))
																		 (if (not (member (slot-ref self 'queue-state) '(terminated suspended)))
																			  (slot-set! self 'queue-state 'ready-to-run))
																		 )
																		))

																	(kdebug (list ',(construct-symbol myclass 'model-body) 'model-bodies) "Leaving " ',myclass "model body"  (cnc self) (slot-ref self 'name) (if (has-slot? self 'subjective-time) (string-append " at " (object->string (slot-ref self 'subjective-time ))) ""))
																	body-result
																	)
																 ))
															;; exit point
															)
														 )
										))
							  (add-method run-model-body M)
							  (method-register 'add M 'run-model-body)
							  )
						  ))
;			 (if #f ;; set to #t to emit the expanded model bodies (useful for debugging cryptic behaviour)
			 (if #f
				  (begin
					 (dnl "------------------------------------------------------------")
					 (pp txt)))

			 (if #f (dnl "************************************************************")) ;; set to  #t to make it prettier

			 txt)))
	 
;; like model-body, but chains straight to parent
(define-macro (use-parent-body myclass) 
  `(model-body ,myclass
					(kdebug (list (construct-symbol (cnc self)) (construct-symbol (my 'taxon)) (construct-symbol (cnc self) 'body) 'model-bodies)
					 ',myclass (slot-ref self 'name) "is using its parents model-body")
					(call-parents)))



(define-macro (sclos-setter myclass variable)
  (if (or (not (symbol? variable))
			 (not (symbol? myclass)))
		(aborts "model-body: the class " myclass " and variable "
				  variable " must be atoms"))
  `(add-method ,(string->symbol
					  (string-append "set-" (symbol->string variable) "!"))
					(make-method (list ,myclass)
									 (lambda (self arg)
										(slot-set! self ',variable arg)))))

(define-macro (sclos-getter myclass variable)
  (if (or (not (symbol? variable)) (not (symbol? myclass)))
		(aborts "model-body: the class " myclass " and variable "
				  variable " must be atoms"))
  `(add-method ,variable
					(make-method (list ,myclass) 
									 (lambda (self)
										(slot-ref self ',variable)))))

(define-macro (load-config)
  `( include "model.config"))


;-  The End 


;;; Local Variables:
;;; mode: scheme
;;; outline-regexp: ";-+"
;;; comment-column:0
;;; comment-start: ";;; "
;;; comment-end:"" 
;;; End:
