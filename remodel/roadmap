IF-THERE-ARE-ERRORS:(DEFINE (MAKE-SEQUENCE GEN M MX . STEP)
LOADER.SCM: (DEFINE (MAYBE-EXPAND-PATH PATH . DIR)
NORMALISE:(DEFINE (LIST-HEAD L N)
NORMALISE:(DEFINE (PROCESS-FILE F FROM TO)
NORMALIZE:(DEFINE (LIST-HEAD L N)
NORMALIZE:(DEFINE (PROCESS-FILE F FROM TO)
__REGISTERS.SCM:(DEFINE (ABSTRACT-REGISTER THINGTYPE THINGNAME . UNIQUE-NAMES)
ABSTRACT-REGISTER.SCM:(DEFINE (ABSTRACT-REGISTER THINGTYPE THINGNAME . UNIQUE-NAMES)
BASIC-POPULATION.SCM:(DEFINE (LIST2-ASSOC-SET! K V K2 V2) 
BASIC-POPULATION.SCM:(DEFINE (LIST2-ASSOC K V K2) 
BASIC-POPULATION.SCM:;;(DEFINE (LOGISTIC-- A K) (IF (EQV? K UNBOUNDED) 1.0 (- 1 (POW (/ A K) 2.4))))
BASIC-POPULATION.SCM:(DEFINE (LOGISTIC-- A K) (IF (EQV? K UNBOUNDED) 1.0 (- 1 (/ A K))))
BASIC-POPULATION.SCM:(DEFINE (LOGISTIC-GROWTH-- A K) (IF (> A K) 0.0 (- 1.0 (/ A K))))
BASIC-POPULATION.SCM:(DEFINE (LOGISTIC-MORT-- A K) (IF (< A K) 0.0 (- (/ A K) 1.0)))
BASIC-POPULATION.SCM:(DEFINE (MORTALITY-TERMS-- . ARGS) (- 0 (APPLY + ARGS)))
BASIC-POPULATION.SCM:(DEFINE (MAKE-BASIC-POPULATION NAME POPULATION-NAMES . REST)
BUILD-MODEL:(DEFINE (ANDF #!REST ARGS) (IF (NULL? ARGS) #T (AND (CAR ARGS) (APPLY ANDF (CDR ARGS)))))
BUILD-MODEL:(DEFINE (MAKE-LOADABLE-LIBRARY LST LIBNAME)
BUILD-MODEL:(DEFINE (BUILD)
DEBUGGING.SCM:;;(DEFINE (MAKE-PLOT-ARRAY F DT END MO)
EX.SCM:(DEFINE (F  FUN DATA) (LET ((FUN FUN) (DATA DATA)) (LAMBDA (X) (FUN (LIST-REF DATA X)))))
EX.SCM:(DEFINE (NON-NEGATIVE X) (IF (< X 0) 0 X))
EX.SCM:(DEFINE (IF-PRESENT X VAL) (IF (> X 0) VAL 0))
EX.SCM:;(DEFINE (NON-NEGATIVE X) (IF (< X 0) 0 X))
EX.SCM:;(DEFINE (IF-PRESENT X VAL) VAL )
EX.SCM:(DEFINE (CAPCLIP K V)
EX.SCM:(DEFINE (STARVE RATE PRED K FOOD)
EX.SCM:(DEFINE (IXIN SYM LST)
EX.SCM:(DEFINE (SYMBOLIST #!REST A)
EX.SCM:(DEFINE (GETIX LST #!REST A)
EX.SCM:(DEFINE (SPECIES-SUBSET SYS SPECIES-SYMS #!REST A)
EX.SCM:(DEFINE (PLOT-SPECIES DATA SYMS S F)
EX.SCM:(DEFINE (SUBSET-SPECIES DATA GLST LST) 
EX.SCM:(DEFINE (SPECIES-SUBSET-LIST DATA LST #!REST A) 
EX.SCM:(DEFINE (SPECIES-DATA-LIST DATA LST)
EX.SCM:(DEFINE (N-SAMPLES LST) (- (LENGTH LST) 1))
EX.SCM:(DEFINE (SUBPLOT SYS SYMS STT FIN)
EX.SCM:(DEFINE (SUB-PLOT-DATA D SYMS STT FIN)
EX.SCM-KEEP:(DEFINE (F  FUN DATA) (LET ((FUN FUN) (DATA DATA)) (LAMBDA (X) (FUN (LIST-REF DATA X)))))
EX.SCM-KEEP:(DEFINE (NON-NEGATIVE X) (IF (< X 0) 0 X))
EX.SCM-KEEP:(DEFINE (IF-PRESENT X VAL) (IF (> X 0) VAL 0))
EX.SCM-KEEP:;(DEFINE (NON-NEGATIVE X) (IF (< X 0) 0 X))
EX.SCM-KEEP:;(DEFINE (IF-PRESENT X VAL) VAL )
EX.SCM-KEEP:(DEFINE (CAPCLIP K V)
EX.SCM-KEEP:(DEFINE (STARVE RATE PRED K FOOD)
EX.SCM-KEEP:(DEFINE (IXIN SYM LST)
EX.SCM-KEEP:(DEFINE (SYMBOLIST #!REST A)
EX.SCM-KEEP:(DEFINE (GETIX LST #!REST A)
EX.SCM-KEEP:(DEFINE (SPECIES-SUBSET SYS SPECIES-SYMS #!REST A)
EX.SCM-KEEP:(DEFINE (PLOT-SPECIES DATA SYMS S F)
EX.SCM-KEEP:(DEFINE (SUBSET-SPECIES DATA GLST LST) 
EX.SCM-KEEP:(DEFINE (SPECIES-SUBSET-LIST DATA LST #!REST A) 
EX.SCM-KEEP:(DEFINE (SPECIES-DATA-LIST DATA LST)
EX.SCM-KEEP:(DEFINE (N-SAMPLES LST) (- (LENGTH LST) 1))
EX.SCM-KEEP:(DEFINE (SUBPLOT SYS SYMS STT FIN)
EX.SCM-KEEP:(DEFINE (SUB-PLOT-DATA D SYMS STT FIN)
EXAMPLES-WITH-TREES.SCM:(DEFINE (P-N . ARG)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RANDOM-POLYNOMIAL-TERM L S E) 
EXAMPLES-WITH-TREES.SCM:(DEFINE (POLY-TO-TREE P)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RANDOM-POLYNOMIAL L S K E)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RNDPOLY . ARGS)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RANDOM-NODE L W D E Z )
EXAMPLES-WITH-TREES.SCM:(DEFINE (MAKE-RANDOM-TREE S C E TC D) ;; SETOFSYMS CONST-RANGE MAXEXPONENT TERMCOUNT DEPTH
EXAMPLES-WITH-TREES.SCM:(DEFINE (POLYS . LST)
EXAMPLES-WITH-TREES.SCM:(DEFINE (POLY . LST)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TREES . LST)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RANDOM-TEST-TREE D)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RTT . ARGS)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-ASSOCIATIVITY-+ P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (DEBUG-NON-ASSOCIATIVE-ADDITION P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-COMMUTATIVITY-+ P Q)
EXAMPLES-WITH-TREES.SCM:(DEFINE (DEBUG-NON-ASSOCIATIVE-MULTIPLICATION P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-ASSOCIATIVITY-* P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-COMMUTATIVITY-* P Q)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-DISTRIBUTION P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (DEBUG-MULTIPLICATION-DOES-NOT-DISTRIBUTE-OVER-ADDITION P R S)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-MULTIPLICATION-COMPATIBILITY S P)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-SIMPLE-PROPERTIES P Q R)
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-PROPERTIES P Q R )
EXAMPLES-WITH-TREES.SCM:(DEFINE (TEST-PROPERTIES! N D)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RNDTREE)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RUN-TRIAL) (APPLY TEST-PROPERTIES (LIST-REF RTREES (MAP (LAMBDA X (RANDOM-INTEGER (LENGTH RTREES))) (SEQ 3)))))
EXAMPLES-WITH-TREES.SCM:(DEFINE (*+* R1 R2 R3)
EXAMPLES-WITH-TREES.SCM:(DEFINE (*+ R1 R2 R3)
EXAMPLES-WITH-TREES.SCM:(DEFINE (*+*II R1 R2 R3)
EXAMPLES-WITH-TREES.SCM:(DEFINE (*+II R1 R2 R3)
EXAMPLES-WITH-TREES.SCM:(DEFINE (RUN-IITRIAL)
EXMOD.SCM:(DEFINE (MONITOR-PASS:ALG1 CURRENT-NICHE-CONFIGURATION-LIST #!REST ARGS)
EXMOD.SCM:(DEFINE (FRUIT-PRODUCTION T DOMAIN)    ;; DOMAIN IS AN AGENT (POSSIBLY JUST A "NUMBER" AGENT)
EXMOD.SCM:(DEFINE (FRUIT-EATEN DOMAIN)
EXMOD.SCM:(DEFINE (FRUIT-SPOILAGE T DOMAIN)
EXMOD.SCM:(DEFINE (DN_F T DOMAIN) (- (FRUIT-PRODUCTION T DOMAIN) (FRUIT-SPOILAGE T DOMAIN) (FRUIT-EATEN DOMAIN)))
EXMOD.SCM:(DEFINE (DN_S T DOMAIN)
GENERATE-PARAM-FILE.SCM:(DEFINE (MAKE-LIST% N . INIT)
GENERATE-PARAM-FILE.SCM:(DEFINE (MAKE-CLASS #!REST ARGS) (VOID))
GENERATE-PARAM-FILE.SCM:;;(DEFINE (EVENS LST) (IF (NULL? LST) '() (CONS (CAR LST) (IF (PAIR? (CDR LST)) (EVENS (CDDR LST)) '()))))
GENERATE-PARAM-FILE.SCM:;;(DEFINE (ODDS LST) (IF (PAIR? (CDR LST)) (EVENS (CDR LST)) '()))
GENERATE-PARAM-FILE.SCM:(DEFINE (GO)
GLYPHS.SCM:(DEFINE (SIMPLE-GLYPH? G)
GLYPHS.SCM:(DEFINE (COMPOUND-GLYPH? G)
GLYPHS.SCM:(DEFINE (GLYPH? G) (OR (SIMPLE-GLYPH? G) (COMPOUND-GLYPH? G)))
GLYPHS.SCM:(DEFINE (RESCALE-SIMPLE-GLYPH SCALE GLYPH)
GLYPHS.SCM:(DEFINE (TRANSLATE-SIMPLE-GLYPH OFFSET GLYPH)
GLYPHS.SCM:(DEFINE (SHIFT-SIMPLE-GLYPH-TO-ORIGIN GLYPH)
GLYPHS.SCM:(DEFINE (RESCALE-SIMPLE-GLYPH-TO-UNIT GLYPH)
GLYPHS.SCM:(DEFINE (ROTATE-SIMPLE-GLYPH THETA GLYPH)
GLYPHS.SCM:(DEFINE (TRANSLATE-GLYPH OFFSET GLYPH)
GLYPHS.SCM:(DEFINE (SHIFT-GLYPH-TO-ORIGIN GLYPH)
GLYPHS.SCM:(DEFINE (RESCALE-GLYPH-TO-UNIT GLYPH)
GLYPHS.SCM:(DEFINE (ROTATE-GLYPH THETA GLYPH)
GLYPHS.SCM:(DEFINE (RESCALE-GLYPH SCALE GLYPH)
GLYPHS.SCM:(DEFINE (NORMALISE-GLYPH GLYPH)
INTEGRATE.SCM:(DEFINE ($1- X) (- X 1))
INTEGRATE.SCM:(DEFINE (DIFFERENTIAL F X . EPS)
INTEGRATE.SCM:(DEFINE (DERIVATIVE F X . EPS)
INTEGRATE.SCM:(DEFINE (D/DX F A B SS)
INTEGRATE.SCM:(DEFINE (INNER-ADAPTIVE-INTEGRATE F A B EPS ESTIMATE FA FC FB K)
INTEGRATE.SCM:(DEFINE (ADAPTIVE-INTEGRATE F A B EPS . K)
INTEGRATE.SCM:(DEFINE (INTEGRATE F A B EPS . K) ;; CALLS THE ADAPTIVE INTEGRATE CODE
INTEGRATE.SCM:(DEFINE (INTEGRATE% F A B EPS IGNORE-SS . K) ;; IDENTICAL TO (INTEGRATE F A B EPS . K), BUT REQUIRES AN IGNORED STEP SIZE
INTEGRATE.SCM:(DEFINE (INTEGRATE* F A B EPS SS . K) ;; REQUIRES A STEP SIZE
INTEGRATE.SCM:(DEFINE (INTEGRATE2D FUNC A B EPS . K) ;; NO STEPSIZE SPECIFIED
INTEGRATE.SCM:(DEFINE (INTEGRATE2D* FUNC A B EPS SS . K) ;; REQUIRES A STEP SIZE
INTEGRATE.SCM:(DEFINE (INTEGRATE2D% F A B EPS IGNORE-SS . K) ;; REQUIRES STEP SIZE, BUT IGNORES IT AND USES ADAPTIVE INTEGRATION
INTEGRATE.SCM:(DEFINE (INTEGRATE2D%* F A B EPS SS . K) ;; USES ADAPTIVE INTEGRATION ON THE FIRST ORD, SECOND USES STEP SIZE
INTEGRATE.SCM:(DEFINE (INTEGRATE2D*% F A B EPS SS . K) ;; USES ADAPTIVE INTEGRATION ON THE FIRST USES STEP SIZE, SECOND ORD
INTEGRATE.SCM:(DEFINE (INTEGRATE2D** F A B EPS SS . K) ;; USES ADAPTIVE INTEGRATION.
INTEGRATE.SCM:(DEFINE (TEST-INTEGRATE2D P)
INTEGRATE.SCM:(DEFINE (INNER-GENERAL-ADAPTIVE-INTEGRATE F A B EPS ESTIMATE FA FC FB << ** // ++ -- K)
INTEGRATE.SCM:(DEFINE (GENERAL-ADAPTIVE-INTEGRATE F A B EPS SWAP-ORDER MULT DIV ADD SUB . K)
INTEGRATE.SCM:(DEFINE (GENERAL-INTEGRATE F A B EPS SWAP-ORDER MULT DIV ADD SUB . K)
INTEGRATE.SCM:(DEFINE (INTEGRATE-R F A B EPS . K)
INTEGRATE.SCM:(DEFINE (INTEGRATE-R% F A B EPS IGNORE-SS . K)
INTEGRATE.SCM:(DEFINE (NO-ORDER-SWAP A B)
INTEGRATE.SCM:(DEFINE (INTEGRATE-RV F A B EPS . K)
INTEGRATE.SCM:(DEFINE (INTEGRATE-RV% F A B EPS IGNORE-SS . K)
INTEGRATE.SCM:(DEFINE (INTEGRATE-RV* F A B EPS SS . K)
INTEGRATE.SCM:(DEFINE (RK4 F A B SS Y0) 
INTEGRATE.SCM:(DEFINE (MAKE-INVERSE-FUNCTION F A B SS)
INTEGRATE.SCM:(DEFINE (RK4-2D F G A B SS X0 Y0) 
INTEGRATE.SCM:(DEFINE (RK*-EXAMPLE-1)
INTEGRATE.SCM:(DEFINE (RK*-EXAMPLE-2)
INTEGRATE.SCM:(DEFINE (RK4* F A B SS XO . ZT) ;; F IS A LIST OF FUNCTIONS, SAY DY/DT DX/DT, AND DZ/DT, WHERE EACH IS IN TERMS OF T, X, Y, Z
INTEGRATE.SCM:(DEFINE (REAL->INTEGER_ X) (INEXACT->EXACT (ROUND X)))
INTEGRATE.SCM:(DEFINE (REAL->INTEGER X) (INEXACT->EXACT (ROUND (+ 0.5 X))))
INTEGRATE.SCM:(DEFINE (*N-CELLS* M M S)
INTEGRATE.SCM:(DEFINE (MAKE-LINEAR-LIST M M SS VAR-MIN VAR-MAX VAR-SS)
INTEGRATE.SCM:(DEFINE (GRID-VALUES M M S)
INTEGRATE.SCM:(DEFINE (RELEVANT-INDICES X L) ;; THIS REALLY SUCKS.
INTEGRATE.SCM:(DEFINE (*CROSS* . ARGS)
INTEGRATE.SCM:  (DEFINE (CROSS2 A B)
INTEGRATE.SCM:(DEFINE (MAKE-HYPERCUBE VAR-MIN VAR-MAX VAR-SS)
INTEGRATE.SCM:(DEFINE (RK4P DF/DT  MINS MAXS VAR-SS FO) ;; 
INTEGRATE.SCM:(DEFINE (RKF* F A B SS XO) 
INTROSPECTION-METHODS.SCM:(DEFINE (EXCLUDE-VOIDS LST)
KDEBUG.SCM:(DEFINE (KDEBUG-INFO . ARGS)
KDEBUG.SCM:(DEFINE (WARNING . ARGS)
KDEBUG.SCM:(DEFINE (->STR S)
KDEBUG.SCM:(DEFINE (MAP->STRING S)
KERNEL.SCM:(DEFINE (SET-KERNEL-DISPLAY-UNITS STR)
KERNEL.SCM:(DEFINE (TERMINATING-CONDITION-TEST . ARGS)
KERNEL.SCM:(DEFINE (EXAMINE-QUEUE Q)
KERNEL.SCM:(DEFINE (EXCISE OBJ LST)
KERNEL.SCM:(DEFINE (QCMP R1 R2) ;; REDUCING THE AMOUNT OF TIME THIS TAKES WILL HAVE A PERFORMANCE IMPACT
KERNEL.SCM:(DEFINE (MAP-Q ARG Q)
KERNEL.SCM:(DEFINE (Q-FILTER QF-RQ PREDICATE)
KERNEL.SCM:(DEFINE (RUNNING-QUEUE RQ-RQ STOP)
KERNEL.SCM:(DEFINE (MODEL-TIME MT-RQ STOP)
KERNEL.SCM:(DEFINE (INTERVAL T DDT STOPAT TLIST)
KERNEL.SCM:(DEFINE (INSERT@ LST OB CMP) 
KERNEL.SCM:(DEFINE (QI Q REC RECCMP)
KERNEL.SCM:;;(DEFINE (BROKEN-Q-INSERT Q REC RECCMP)
KERNEL.SCM:;;; (DEFINE (Q-MIS-INSERT Q REC RECCMP) ***
KERNEL.SCM:(DEFINE (TEST-QUEUE-SIZE TQS-RQ N)
KERNEL.SCM:(DEFINE (HOODOO AGENT PROC)
KERNEL.SCM:(DEFINE (QUEUE T STOP RUNQUEUE #!REST N)
KERNEL.SCM:(DEFINE (CONVERT-PARAMS PARAMS REP)
KERNEL.SCM:(DEFINE (DISTANCES-TO WHAT AGENTLIST LOC)
KERNEL.SCM:(DEFINE (DISTANCES-TO-AGENTS AGENTLIST LOC)
KERNEL.SCM:(DEFINE (DISTANCES-TO-POPULATIONS AGENTLIST LOC)
KERNEL.SCM:(DEFINE (MIN-INDEX NUMBER-LIST)
KERNEL.SCM:;;; (DEFINE (MIN-INDEX N-LIST)
KERNEL.SCM:(DEFINE (AGENT-KCALL ME #!REST ARGS)
KERNEL.SCM:(DEFINE (KERNEL-CALL CLIENT Q CALL-OP #!REST ARGS)
KERNEL.SCM:(DEFINE (PREP-ACTIVATE PA-RQ Q-ENTRY)
KERNEL.SCM:(DEFINE (PREP-AGENTS Q START END)
KERNEL.SCM:(DEFINE (SHUTDOWN-AGENTS Q . ARGS)
KERNEL.SCM:(DEFINE (COLOCATED? A B #!OPTIONAL R) ;; IF R IS FALSE, POINT-LISTS ARE TAKEN TO BE POLYGONS
KERNEL.SCM:(DEFINE (COLOCATED*? S L #!OPTIONAL R) ;; S IS A POINT, L IS A LIST
KERNEL.SCM:;; (DEFINE (COLOCATED*? S L #!OPTIONAL R)
KERNEL.SCM:(DEFINE (COLOCATED**? L1 L2 #!OPTIONAL R)
KERNEL.SCM:(DEFINE (ADD-THING-TO-LOCATION SELF ENTITY LOCATION)
KERNEL.SCM:(DEFINE (REMOVE-THING-FROM-LOCATION  ENTITY LOCATION)
KERNEL.SCM:(DEFINE (SPLIT-LOCATION-TREE)
KERNEL.SCM:(DEFINE (AGENTS-DT AGENT)
KERNEL.SCM:(DEFINE (RUN-SIMULATION Q START END . CLOSE-UP-SHOP) 
KERNEL.SCM:(DEFINE (CONTINUE-SIMULATION Q END . CLOSE-UP-SHOP) 
KERNEL.SCM:(DEFINE (LOCATE-PP Q R P #!OPTIONAL DFLT)
KERNEL.SCM:(DEFINE (LOCATE-PP Q P #!OPTIONAL DFLT)
KERNEL.SCM:(DEFINE (LOCATE-PP Q P #!OPTIONAL DFLT)
KERNEL.SCM:(DEFINE (LOCATE-P*P Q R P #!OPTIONAL DFLT)
KERNEL.SCM:(DEFINE (LOCATE-PP* Q R P #!OPTIONAL DFLT)
LANDSCAPE-METHODS.SCM:;(DEFINE (I->E F) (INEXACT->EXACT (ROUND F)))
LANDSCAPE-METHODS.SCM:(DEFINE (I->E F) (INEXACT->EXACT (TRUNCATE F)))
LANDSCAPE-METHODS.SCM:(DEFINE (REPRO XY RES M)
LANDSCAPE-METHODS.SCM:;;(DEFINE (LOGISTIC-GROWTH  DT DOMAIN 0  VALUE CAPACITY  RVALUE)
LANDSCAPE-METHODS.SCM:(DEFINE (LOCATE-NEAREST-ECOSERV DOMAIN ECOSERV LOC)
LANDSCAPE-METHODS.SCM:(DEFINE (SORTED-ECOSERVICES DOMAIN ECOSERV LOC . WEIGHTED-BY-VALUE)
LANDSCAPE-METHODS.SCM:(DEFINE (PATCHSIZE DOMAIN)
LANDSCAPE-METHODS.SCM:(DEFINE (TOTAL-PATCH-LIST-VALUE PATCHLIST SYMLIST)
LANDSCAPE-METHODS.SCM:(DEFINE (TOTAL-PATCH-LIST-CAPACITY PATCHLIST SYMLIST)
LANDSCAPE-METHODS.SCM:(DEFINE (TRANSLATE-TRACE ADDEND TRACE)
LANDSCAPE-METHODS.SCM:(DEFINE (SCALE-TRACE S TRACE)
LANDSCAPE-METHODS.SCM:(DEFINE (DEF-RES H)
LANDSCAPE-METHODS.SCM:(DEFINE (CROP-CAPTION PS OBJ PRJ #!REST PT)
LANDSCAPE-METHODS.SCM:(DEFINE (CAPTION PS OBJ PRJ LOC #!REST PT)
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-POPULATION-TRANSFORM-FUNC PREDATION-MATRIX EFFICIENCY-MATRIX
LANDSCAPE-METHODS.SCM:(DEFINE (SIMPLE-ECOSERVICE TAXON DT NM VARIABLE VALUE CAP R MAXDT GROWING? GROWTHMODEL . PATCH)  
LANDSCAPE-METHODS.SCM:(DEFINE (CIRCLE C R N) ;CENTRE RADIUS NUMBER OF FACETS
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-CROP-CIRCLE CENTRE RADIUS . N) ;; (-: MAKE-PATCH-CIRCLE MIGHT BE MORE APPROPRIATE, BUT NOT AS MUCH FUN :-)
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-POLYGON CENTRE POLYGON #!OPTIONAL IS-RELATIVE)
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-BOUNDARY REP CENTRE ARG)
LANDSCAPE-METHODS.SCM:(DEFINE (BBOX LL UR)
LANDSCAPE-METHODS.SCM:(DEFINE (%PATCH-INITIALISER CLSS BDRY NAME CENTRE RADIUS BOX . THEREST)
LANDSCAPE-METHODS.SCM:(DEFINE (EXTREMUM OP POINTSET)
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-GRID CELL-CLASS TAXON NAME CELL-TYPE N M DOMAIN #!OPTIONAL (TERRAIN #F) (STATEVARS '()))
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-HEX CELL-CLASS TAXON NAME CELL-TYPE N M DOMAIN  #!OPTIONAL (TERRAIN #F) (STATEVARS '()))
LANDSCAPE-METHODS.SCM:(DEFINE (PATCH-LIST-FROM-COVER COVER)
LANDSCAPE-METHODS.SCM:(DEFINE (POPULATE-PATCH-WITH-ECOSERVICES P SERVICES . THEREST)
LANDSCAPE-METHODS.SCM:;;(DEFINE (PATCHSIZE DOMAIN) (* 0.25 (APPLY MIN (MAP - (LIST-HEAD
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-PATCH TYPE LOC RADIUS SERVICES . ARGS) ;; SERVICES IS A LIST OF LISTS, WITH EACH INNER LIST CONSISTING OF A NAME (A STRING), A TYPE (A SYMBOL) AND A VALUE (TYPICALLY A NUMBER, CAPACITY)  AND ANOTHER NUMBER, TYPICALLY THE DELTA-T-MAX
LANDSCAPE-METHODS.SCM:(DEFINE (MAKE-LANDSCAPE NAME DEFAULT-HT DOMAIN TERRAIN-FUNCTION PATCH-TYPE PATCH-DATA ;; PATCH-TYPE WOULD USUALLY BE A PATCH CLASS, SUCH AS <PATCH> OR <DYNAMIC-PATCH>
LOADEM.SCM:(DEFINE (SYM->SCM X) (LET ((FN (STRING-APPEND (SYMBOL->STRING X) ".SCM")))
LOG-METHODS.SCM:(DEFINE (STOPIT #!REST ARGS) (VOID))
LOG-METHODS.SCM:(DEFINE (COLOUR-MAPPING C)
MATHS.SCM:(DEFINE (UNBOUND? NAME)
MATHS.SCM:(DEFINE (BOUND? NAME)
MATHS.SCM:;; (DEFINE (ADJUST OPERATOR DEVIANT POINTLIST)
MATHS.SCM:;; (DEFINE (SCALE-POINT-LIST K POINTLIST)
MATHS.SCM:;; (DEFINE (TRANSLATE-POINT-LIST K POINTLIST)
MATHS.SCM:(DEFINE (HEXAGON SIZE)
MATHS.SCM:(DEFINE (TRAPEZOID SIZE)
MATHS.SCM:(DEFINE (QUADRILATERAL SIZE) ;; CANNOT CALL IT A SQUARE, THAT IS A STD SCM FUNC
MATHS.SCM:(DEFINE (TRIANGLE SIZE)
MATHS.SCM:(DEFINE (HEXAREA S)
MATHS.SCM:(DEFINE (EQTRIAREA S)
MATHS.SCM:(DEFINE (SQAREA S)
MATHS.SCM:(DEFINE (HEXAGON* SIZE)
MATHS.SCM:(DEFINE (TRAPEZOID* SIZE)
MATHS.SCM:(DEFINE (SQUARE* SIZE)
MATHS.SCM:(DEFINE (TRIANGLE* SIZE)
MATHS.SCM:(DEFINE (NORMALISE VEC)
MATHS.SCM:(DEFINE (RANDOM-POINT-IN-BOX LL #!OPTIONAL UR)
MATHS.SCM:(DEFINE (RANDOM-BOUNDED-POINT-IN-BOX PROP LL #!OPTIONAL UR)
MATHS.SCM:(DEFINE (+/- #!OPTIONAL X) (IF X
MATHS.SCM:(DEFINE (FIND-PREIMAGE X F M M #!OPTIONAL EPSILON) ;;; REQUIRES A MONOTONIC FUNCTION F
MATHS.SCM:(DEFINE (SEQUENCE N #!OPTIONAL FUNC)
MATHS.SCM:  (DEFINE (SEQ K)
MATHS.SCM:(DEFINE (APPLY-TO-PARTITIONED-LIST OP LST)
MATHS.SCM:(DEFINE (PARTITIONED-LIST? L)
MATHS.SCM:(DEFINE (PARTITION-LIST #!OPTIONAL LST N) ;; CUTS A LIST INTO MANAGABLE PIECES OR LEAVES IT ALONE
MATHS.SCM:(DEFINE (MEAN LST #!OPTIONAL PWR)
MATHS.SCM:(DEFINE (MATHS-MAKE-LIST N . INIT)
MATHS.SCM:(DEFINE (SELECT SELECTOR LST)
MATHS.SCM:(DEFINE (!SELECT SELECTOR LST)
MATHS.SCM:(DEFINE (EVEN-INDICES* LST)
MATHS.SCM:(DEFINE (ODD-INDICES* LST)
MATHS.SCM:(DEFINE (EVEN-INDICES LST) (IF (NULL? LST) '() (CONS (CAR LST) (IF (PAIR? (CDR LST)) (EVEN-INDICES (CDDR LST)) '()))))
MATHS.SCM:(DEFINE (ODD-INDICES LST) (IF (NULL? LST) '() (IF (PAIR? (CDR LST)) (EVEN-INDICES (CDR LST)) '())))
MATHS.SCM:(DEFINE (N<= N)
MATHS.SCM:  (DEFINE (RSEQUENCE N) (IF (<= N 0) '() (CONS (- N 1) (RSEQUENCE (- N 1)))))
MATHS.SCM:(DEFINE (INTEGER-DIVISORS N)
MATHS.SCM:(DEFINE (DEFAULT-OBJECT? X) (EQUAL? X (VOID)))
MATHS.SCM:	 (LET ((TXT `(DEFINE (,FNAME ,@NORMALARGS #!REST ,OPTARG)
MATHS.SCM:(DEFINE (TRIANGLE-FUNCTION PEAK M M)
MATHS.SCM:(DEFINE (EXP-DECAY-FUNC N L)
MATHS.SCM:(DEFINE (1DF T #!OPTIONAL Y)
MATHS.SCM:(DEFINE (1CDF T #!OPTIONAL Y)
MATHS.SCM:(DEFINE (EDF T #!OPTIONAL Y)
MATHS.SCM:(DEFINE (ECDF T #!OPTIONAL Y)
MATHS.SCM:(DEFINE (MODULO-REAL N D)
MATHS.SCM:(DEFINE (GENERAL-SIGMOID-F X LMB PHI)
MATHS.SCM:(DEFINE (GENERAL-SIGMOID-G V)
MATHS.SCM:(DEFINE (GENERAL-SIGMOID  X LMB PHI) 
MATHS.SCM:(DEFINE (SIGMOID* X #!OPTIONAL LMB . STUFF)
MATHS.SCM:(DEFINE (INVERSE-SIGMOID* X #!OPTIONAL LMB . STUFF)
MATHS.SCM:(DEFINE (SCALED-SIGMOID X Y) (/ 1.0 (+ 1.0  (EXP (- (* X Y))))))
MATHS.SCM:(DEFINE (PSIGMOID* X) (- (* 2.0 (SIGMOID* X)) 1.0))
MATHS.SCM:(DEFINE (INVERSE-SIGMOID P LMB PHI)
MATHS.SCM:(DEFINE (INVERSE-PHI P_0 LMB)
MATHS.SCM:(DEFINE (POW E X) ;; QUICK AND UNSOPHISTICATED.
MATHS.SCM:(DEFINE (POWER B E) ;; PRESERVES EXACTNESS IF POSSIBLE
MATHS.SCM:(DEFINE (COUNT N)
MATHS.SCM:(DEFINE (PLIST? A)
MATHS.SCM:(DEFINE (SIGN A)
MATHS.SCM:(DEFINE (SQR X) ;; GENERAL
MATHS.SCM:(DEFINE (NORM A) ;; USUAL NORM
MATHS.SCM:(DEFINE (P-NORM A #!OPTIONAL P) ;; A MORE GENERAL NORM
MATHS.SCM:(DEFINE (V-LENGTH A) ;; GENERAL
MATHS.SCM:;;(DEFINE (DISTANCE U V)
MATHS.SCM:(DEFINE (DISTANCE P Q) ;; GENERAL
MATHS.SCM:(DEFINE (DISTANCE* P Q) ;; GENERAL
MATHS.SCM:(DEFINE (LIST-OPERATOR OP P1 P2) ;; GENERAL
MATHS.SCM:(DEFINE (POINT? P)
MATHS.SCM:(DEFINE (POINT-LIST? P)
MATHS.SCM:(DEFINE (N-POINT? N P)
MATHS.SCM:(DEFINE (N-POINT-LIST? N P)
MATHS.SCM:(DEFINE (DISTANCE-TO-SEGMENT R SEGMENT)
MATHS.SCM:;;; (DEFINE (DISTANCE-TO-POLYGON R POLY) ***
MATHS.SCM:;;;   (DEFINE (D2P R POLY) ***
MATHS.SCM:(DEFINE (POLYGON? P)
MATHS.SCM:(DEFINE (POLYGON%? P)
MATHS.SCM:(DEFINE (POLYGON-LIST? L)
MATHS.SCM:(DEFINE (POLYGON-LIST%? L)
MATHS.SCM:(DEFINE (DISTANCE-TO-POLYGON P POLY)
MATHS.SCM:(DEFINE (POLYGON-CENTROID P #!OPTIONAL L)
MATHS.SCM:(DEFINE (PT-IN-POLY2 XP YP X Y) 
MATHS.SCM:(DEFINE (POINT-IN-POLYGON P POLY)
MATHS.SCM:(DEFINE (SIGNED-POLYGON-AREA POLY)
MATHS.SCM:(DEFINE (POLYGON-AREA POLY)
MATHS.SCM:(DEFINE (DOT A B) ;; GENERAL
MATHS.SCM:(DEFINE (PROPORTION V #!REST INTERVAL)
MATHS.SCM:(DEFINE (URND-INT M M) (+ M (RANDOM-INTEGER (- M M))))
MATHS.SCM:(DEFINE (URND-REAL M M) (+ M (* (- M M) (RANDOM-REAL))))
MATHS.SCM:(DEFINE (SIMPLE-NRND #!REST ARGS)
MATHS.SCM:(DEFINE (NRND #!REST ARGS)
MATHS.SCM:(DEFINE (SIMPLE-LNRND #!REST ARGS)
MATHS.SCM:(DEFINE (LNRND #!REST ARGS)
MATHS.SCM:(DEFINE (LOGTRANS MEAN Y) ;; Y \IN [0,1]
MATHS.SCM:(DEFINE (INVLOGTRANS MEAN Y)
MATHS.SCM:(DEFINE (MAKE-PPROCESS MEANY #!OPTIONAL CLIP)
MATHS.SCM:(DEFINE (SIMPLE-PPRND MEAN #!OPTIONAL CLIP)
MATHS.SCM:(DEFINE (PPRND MEAN #!OPTIONAL M)
MATHS.SCM:(DEFINE (RANDOM-CLUSTER PNT RNGLIST COUNT)
MATHS.SCM:(DEFINE (RANDOM-ANGLE)
MATHS.SCM:(DEFINE (RANDOM-DISPLACEMENT #!OPTIONAL D)
MATHS.SCM:(DEFINE (ROTATED-VELOCITY V THETA)
MATHS.SCM:(DEFINE (ROTATED-VECTOR V THETA #!OPTIONAL AXIS)
MATHS.SCM:;;; (DEFINE (O . FUNLIST)  ;; GENERAL ***
MATHS.SCM:(DEFINE (O F . G) (LAMBDA (X) (IF (NULL? G) (F X) (F ((APPLY O G) X)))))
MATHS.SCM:(DEFINE (CHANGE-BASIS VECT BASIS ORIGIN)
MATHS.SCM:(DEFINE (PROJECT A B) ;; GENERAL
MATHS.SCM:(DEFINE (ABEAM A B SCALE) ; SCALE MIGHT BE THE DISTANCE COVERED  IN A TIMESTEP
MATHS.SCM:(DEFINE (MULT2 X  Y)  ;; GENERAL
MATHS.SCM:(DEFINE (MULT X . Y)  ;; GENERAL
MATHS.SCM:(DEFINE (DIV X Y) ;; GENERAL
MATHS.SCM:(DEFINE (ADD2 X  Y) ;; GENERAL
MATHS.SCM:(DEFINE (ADD X . Y) ;; GENERAL
MATHS.SCM:(DEFINE (SUB2 X  Y) ;; GENERAL
MATHS.SCM:(DEFINE (SUB X . Y) ;; GENERAL
MATHS.SCM:(DEFINE (MAKE-PPRND M) ;
MATHS.SCM:(DEFINE (EXTEND-ARITH-OP-TO-FUNCS OP) 
MATHS.SCM:(DEFINE (EXTEND-ARITH-OP OP) ;; TO FUNCTIONS OR VECTORS --- NOTE: THIS DOES NOT TREAT
MATHS.SCM:(DEFINE (NEAREST-POINT-IN-LIST POINT LST)
MATHS.SCM:(DEFINE (NEAREST-POINT-IN-LIST% FUNC POINT LST)
MATHS.SCM:(DEFINE (NEAREST-POINT-IN-LIST* PFUNC POINT LST)
MATHS.SCM:(DEFINE (PWL PTLIST)
MATHS.SCM:(DEFINE (INVERSE-PWL PTLIST)
MATHS.SCM:(DEFINE (INTERPOLATE PWL-POINT-LIST X)
MATHS.SCM:;; (DEFINE (DIRECTED-STAGGER* MAX-ANGLE NOMINAL-DT )
MATRIX.SCM:(DEFINE (DEEP-COPY L)
MATRIX.SCM:(DEFINE (ONE? X) (= X 1))
MATRIX.SCM:(DEFINE (*LIST-NTH* LST N) (APPLY (LAMBDA X (MAP (LAMBDA (Y) (LIST-REF Y N)) X)) LST))
MATRIX.SCM:(DEFINE (LIST-REF-COLS L COLS)
MATRIX.SCM:(DEFINE (LIST-REF-ROWS L ROWS)
MATRIX.SCM:(DEFINE (!LIST-REF-COLS L COLS)
MATRIX.SCM:(DEFINE (!LIST-REF-ROWS L ROWS)
MATRIX.SCM:(DEFINE (COMPLEMENTARY-LIST-MATRIX LM ROWS COLS)
MATRIX.SCM:(DEFINE (PIVOT X)
MATRIX.SCM:(DEFINE (TRANSPOSE A) (A 'T))
MATRIX.SCM:(DEFINE (COMPLEX-CONJUGATE C)
MATRIX.SCM:(DEFINE (MAKE-LISTS . ARGS)
MATRIX.SCM:  (DEFINE (MLLI R C . I)
MATRIX.SCM:  (DEFINE (MLLM M)
MATRIX.SCM:(DEFINE (MATRIX-ELEMENT-MAP1 L M)
MATRIX.SCM:(DEFINE (MATRIX-ELEMENT-MAPN L . M)
MATRIX.SCM:(DEFINE (*2M A B) ;; 
MATRIX.SCM:(DEFINE (@ OP . ARGS)
MATRIX.SCM:(DEFINE (2D-ROTATION-MATRIX THETA)
MATRIX.SCM:(DEFINE (MATRIX-MAP L M)
MATRIX.SCM:(DEFINE (FRISK-VALUES M)
MATRIX.SCM:(DEFINE (SUM M M LMBDA)
MATRIX.SCM:(DEFINE (PROD M M LMBDA)
MATRIX.SCM:(DEFINE (GENERAL-DETERMINANT A)
MATRIX.SCM:(DEFINE (IDENTITY N)
MATRIX.SCM:(DEFINE (DETERMINANT A)
MATRIX.SCM:(DEFINE (COFACTOR M I J)
MATRIX.SCM:(DEFINE (!SPAN L KL)
MATRIX.SCM:(DEFINE (SPAN L KL)
MATRIX.SCM:(DEFINE (MATRIX-LIST-REF*? LST IX)
MATRIX.SCM:;;; (DEFINE (LIST-REF* LST IX)
MATRIX.SCM:(DEFINE (MATRIX-LIST-REF* LST IX)
MATRIX.SCM:(DEFINE (MATRIX-LIST-SET*! LST IX VV)
MATRIX.SCM:(DEFINE (MAKE-MATRIX . ARGS)
MODEL:(DEFINE (DOIT Q #!REST N)
MODEL:(DEFINE (DOIT Q #!OPTIONAL NEND)
MODEL:(DEFINE (CPUTIME-ENTRY VEC)
MODEL:(DEFINE (SYSTIME-ENTRY VEC)
MODEL:(DEFINE (REALTIME-ENTRY VEC)
MODEL:(DEFINE (TIMES)
MODEL.CONFIG:(DEFINE (FILTER-HIST-BY-PATCH S D)
MODEL.CONFIG:(DEFINE (FILTER-HIST-BY-PATCH S D)
MODEL.CONFIG:(DEFINE (DOIT Q) ;; RUN TILL END WITHOUT PAUSE
MODEL.CONFIG:(DEFINE (DOIT Q . N)
MODEL.CONFIG:(DEFINE (IQ AGNT)
MODEL.SCM:(DEFINE (MODEL T)
MODEL.SCM:(DEFINE (GO)
OAK.SCM:(DEFINE (GENERAL-LEAF-AREA MASS LAI)
OAK.SCM:(DEFINE (PLANT-LEAF-AREA P) ;; LEAF AREA
OAK.SCM:(DEFINE (PLANT-MASS->HEIGHT M) ;; GIVEN MASS
OAK.SCM:(DEFINE (PLANT-HEIGHT->MASS H) ;; GIVEN HEIGHT
OAK.SCM:(DEFINE (PLANT-MASS->RADIUS M) ;; GIVEN MASS
OAK.SCM:(DEFINE (MASS->HALF-SPHERE-AREA M) ;; GIVEN MASS
OAK.SCM:(DEFINE (MASS->HALF-SPHERE-VOL M) ;; GIVEN MASS
OUTPUT-TRACKER.SCM:(DEFINE (OUTPUT-PROBE)
PARAMETERS.SCM:(DEFINE (LOAD-PARAMETER-SET PARAMETER-DIR)
PLANT-METHODS.SCM:(DEFINE (WATER--LEVEL AVAIL NEED)
PLANT-METHODS.SCM:(DEFINE (PLANT-LOCATION PATCH LOCATION DISPERSION)
PLANT-METHODS.SCM:(DEFINE (MAKE-COPSE INSERTION-FUNC CLSS TAX N-TREES PATCH AGEFUNC LOCATION DISPERSION #!REST MORE)
PLANT-METHODS.SCM:(DEFINE (DEFAULT-GROWTH-RATE SELF)
PLANT-METHODS.SCM:(DEFINE (PLANT-GROWTH MASS-AT-AGE AGE DT)
PLANT-METHODS.SCM:(DEFINE (MAKE-PLANT CLASS TAXON ENV AGE #!REST MORE)
PLANT-METHODS.SCM:(DEFINE (MAKE-PLANT-XY CLASS TAXON ENV LOC AGE #!REST OTHERARGS)
PLANT-METHODS.SCM:(DEFINE (EXP-MASS-RADIUS-FUNCTION DECAY)
PLANT-METHODS.SCM:(DEFINE (STD-MASS-RADIUS-FUNCTION #!REST FORGET)
PLANT-METHODS.SCM:(DEFINE (FIELD-FUNCTOR SELF FIELD #!OPTIONAL LOCUS RADIUS)
PLOTTING.SCM:(DEFINE (MULTIPLOT XLABEL YLABEL FUNCLIST IXLIST)
PLOTTING.SCM:(DEFINE (IXIN SYM LST)
PLOTTING.SCM:(DEFINE (SYMBOLIST #!REST A)
PLOTTING.SCM:(DEFINE (GETIX LST #!REST A)
PLOTTING.SCM:(DEFINE (SPECIES-SUBSET SYS SPECIES-SYMS #!REST A)
PLOTTING.SCM:(DEFINE (SPECIES-SUBSET% SYS IXS)
PLOTTING.SCM:(DEFINE (PLOT-SPECIES DATA SYMS S F)
PLOTTING.SCM:(DEFINE (SUBSET-SPECIES DATA GLST LST) 
PLOTTING.SCM:(DEFINE (SPECIES-SUBSET-LIST DATA LST #!REST A) 
POSTSCRIPT.SCM:(DEFINE (POSTSCRIPT? F) (AND (MEMBER F POSTSCRIPT-HANDLE-LIST) #T))
POSTSCRIPT.SCM:(DEFINE (TEXT? F) (AND (MEMBER F TEXT-HANDLE-LIST) #T))
POSTSCRIPT.SCM:(DEFINE (FILE-HANDLE? X)
POSTSCRIPT.SCM:(DEFINE (MAKE-IT-A-STRING S) 
POSTSCRIPT.SCM:(DEFINE (PS-ANDF . ARGS)
POSTSCRIPT.SCM:(DEFINE (GMAP L X)
POSTSCRIPT.SCM:(DEFINE (RESCALE S X)
POSTSCRIPT.SCM:(DEFINE (INCHES->POINTS X)
POSTSCRIPT.SCM:(DEFINE (POINTS->INCHES X)
POSTSCRIPT.SCM:(DEFINE (POINTS->MM X)
POSTSCRIPT.SCM:(DEFINE (MM->POINTS X)
POSTSCRIPT.SCM:(DEFINE (MM->INCHES X)
POSTSCRIPT.SCM:(DEFINE (INCHES->MM X)
POSTSCRIPT.SCM:(DEFINE (SCALED-BY-X X PAGESIZE)
POSTSCRIPT.SCM:(DEFINE (SCALED-BY-Y Y PAGESIZE)
POSTSCRIPT.SCM:(DEFINE (PS-LIST-REF*? LST IX)
POSTSCRIPT.SCM:;;; (DEFINE (LIST-REF* LST IX)
POSTSCRIPT.SCM:(DEFINE (PS-LIST-REF* LST IX)
POSTSCRIPT.SCM:(DEFINE (PS-LIST-SET*! LST IX VV)
POSTSCRIPT.SCM:(DEFINE (PS-MAKE-LIST* . DIMS)
POSTSCRIPT.SCM:(DEFINE (PS-SIMPLE-LIST? L)	
POSTSCRIPT.SCM:(DEFINE (ADJUST OPERATOR DEVIANT POINTLIST)
POSTSCRIPT.SCM:(DEFINE (SCALE-POINTLIST K POINTLIST)
POSTSCRIPT.SCM:(DEFINE (TRANSLATE-POINTLIST OFFSET POINTLIST)
POSTSCRIPT.SCM:(DEFINE (TRANSLATE-POINTLIST* N OFFSET LSTLST) ;; THIS SHOULD BE GENERALISED....
POSTSCRIPT.SCM:(DEFINE (FOLD-A-SERIES-PAPER AN)
POSTSCRIPT.SCM:(DEFINE (LIST-TABULATE LEN PROC)
POSTSCRIPT.SCM:(DEFINE (MAKE-CIRCLE LOCATION RADIUS-PTS DIVISIONS)
POSTSCRIPT.SCM:(DEFINE (DEEP-STRING->NUMBER LST) 
POSTSCRIPT.SCM:(DEFINE (DEEP-STRING->SYMBOL LST) 
POSTSCRIPT.SCM:(DEFINE (LOAD-DATA FNAME)
POSTSCRIPT.SCM:(DEFINE (ADJUSTED-PLOT-POLYGON PS WIDTH COL OPEN-PATH PROJECT-POINT-FN POINT-LIST)
POSTSCRIPT.SCM:(DEFINE (ADJUSTED-PLOT-FILLED-POLYGON PS WIDTH BORDERVALUE INTERIORVALUE PROJECT-POINT-FN POINT-LIST)
POSTSCRIPT.SCM:(DEFINE (LINEAR-PROJECTION LOC RANGE CO-RANGE)
POSTSCRIPT.SCM:(DEFINE (SET-FONT PS . ARGS)
POSTSCRIPT.SCM:(DEFINE (->REAL X)
POSTSCRIPT.SCM:(DEFINE (SET-COLOR PS . ARGS)
POSTSCRIPT.SCM:(DEFINE (SET-LINEWIDTH PS . ARGS)
POSTSCRIPT.SCM:(DEFINE (MAKE-POSTSCRIPT PORT/FILENAME FONTLIST)
POSTSCRIPT.SCM:    (DEFINE (EMIT-PAGE-START)
POSTSCRIPT.SCM:    (DEFINE (PS-DISPLAY THING)
POSTSCRIPT.SCM:    (DEFINE (PS-1-ARG COMMAND ARG)
POSTSCRIPT.SCM:    (DEFINE (PS-2-ARG CMD X Y)
POSTSCRIPT.SCM:    (DEFINE (PS-3-ARG CMD X Y Z)
POSTSCRIPT.SCM:    (DEFINE (PS-4-ARG CMD A1 A2 A3 A4 A5)
POSTSCRIPT.SCM:    (DEFINE (PS-5-ARG CMD A1 A2 A3 A4 A5)
POSTSCRIPT.SCM:    (DEFINE (PS-PAIR-OR-LIST CMD POINTLIST)
POSTSCRIPT.SCM:    (DEFINE (FONT NFONT SIZE)
POSTSCRIPT.SCM:    (DEFINE (PUSH-FONT NFONT SIZE)
POSTSCRIPT.SCM:    (DEFINE (POP-FONT)
POSTSCRIPT.SCM:    (DEFINE (TIMES-ROMAN SIZE)
POSTSCRIPT.SCM:    (DEFINE (TIMES-ITALIC SIZE)
POSTSCRIPT.SCM:    (DEFINE (TIMES-BOLD SIZE)
POSTSCRIPT.SCM:    (DEFINE (HELVETICA SIZE)
POSTSCRIPT.SCM:    (DEFINE (HELVETICA-ITALIC SIZE)
POSTSCRIPT.SCM:    (DEFINE (HELVETICA-BOLD SIZE)
POSTSCRIPT.SCM:    (DEFINE (EMIT-HEADER)
POSTSCRIPT.SCM:    (DEFINE (DEFINE-UNITNAMES)
POSTSCRIPT.SCM:    (DEFINE (SHOWPAGE)
POSTSCRIPT.SCM:    (DEFINE (SELECT-PAGE VERT HORIZ) ; IN UNITS OF ONE PAGE LENGTH OR WIDTH
POSTSCRIPT.SCM:    (DEFINE (START-PAGE #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (END-PAGE)
POSTSCRIPT.SCM:    (DEFINE (TRAILER)
POSTSCRIPT.SCM:    (DEFINE (GSAVE)
POSTSCRIPT.SCM:    (DEFINE (GRESTORE)
POSTSCRIPT.SCM:    (DEFINE (LINETO X)
POSTSCRIPT.SCM:    (DEFINE (RLINETO X)
POSTSCRIPT.SCM:    (DEFINE (MOVETO X)
POSTSCRIPT.SCM:    (DEFINE (RMOVETO X)
POSTSCRIPT.SCM:    (DEFINE (CLOSEPATH)
POSTSCRIPT.SCM:    (DEFINE (NEWPATH)
POSTSCRIPT.SCM:    (DEFINE (EXCH)
POSTSCRIPT.SCM:    (DEFINE (CURRENTPOINT)
POSTSCRIPT.SCM:    (DEFINE (PS-COMMENT #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (PS-COMMENT #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (PS-COMMENT #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (STRINGWIDTH S)
POSTSCRIPT.SCM:    (DEFINE (STRINGWIDTH* LST)
POSTSCRIPT.SCM:    (DEFINE (LINESKIP #!OPTIONAL SPECIFIC)
POSTSCRIPT.SCM:    (DEFINE (LINESKIP* LST)
POSTSCRIPT.SCM:    (DEFINE (SETLINEWIDTH WEIGHT)
POSTSCRIPT.SCM:    (DEFINE (PUSH-WIDTH NWIDTH)
POSTSCRIPT.SCM:    (DEFINE (POP-WIDTH)
POSTSCRIPT.SCM:    (DEFINE (SETGRAY WEIGHT)
POSTSCRIPT.SCM:    (DEFINE (SETRGB R G B)
POSTSCRIPT.SCM:    (DEFINE (SETHSV H S V)
POSTSCRIPT.SCM:    (DEFINE (POP-COLOR)
POSTSCRIPT.SCM:    (DEFINE (STROKE)
POSTSCRIPT.SCM:    (DEFINE (FILL)
POSTSCRIPT.SCM:    (DEFINE (ROTATE ANGLE)
POSTSCRIPT.SCM:    (DEFINE (SCALE X Y)
POSTSCRIPT.SCM:    (DEFINE (TRANSLATE X Y)
POSTSCRIPT.SCM:    (DEFINE (ARC CX CY RAD STARTANGLE ENDANGLE)
POSTSCRIPT.SCM:    (DEFINE (ARCN CX CY RAD STARTANGLE ENDANGLE)
POSTSCRIPT.SCM:    (DEFINE (MAP-CHARACTER C)
POSTSCRIPT.SCM:    (DEFINE (SHOW-MAP STRING)
POSTSCRIPT.SCM:    (DEFINE (SHOW TLIST) ;;; DISPLAY TEXT OR NUMBERS, FOR EXAMPLE
POSTSCRIPT.SCM:    (DEFINE (SHOW! TLIST) ;; KEEPS THE CURRENT POINTER IN THE PLACE IT STARTS (AT THE BEGINNING OF THE STRING)
POSTSCRIPT.SCM:    (DEFINE (SHOW-CHARPATH MODE TLIST)
POSTSCRIPT.SCM:    (DEFINE (MAKE-PLACE NAME)
POSTSCRIPT.SCM:    (DEFINE (SET-PLACE NAME)
POSTSCRIPT.SCM:    (DEFINE (PLACE NAME)
POSTSCRIPT.SCM:    (DEFINE (COLUMN NAME)
POSTSCRIPT.SCM:    (DEFINE (ROW NAME)
POSTSCRIPT.SCM:    (DEFINE (LINEFEED N)
POSTSCRIPT.SCM:    (DEFINE (SHOW-CENTERED TLIST)
POSTSCRIPT.SCM:    (DEFINE (SHOW-CENTERED! TLIST) ;; KEEPS THE CURRENT POINTER IN THE PLACE IT "STARTS" (AT THE CENTRE)
POSTSCRIPT.SCM:    (DEFINE (SHOW-RIGHT TLIST)
POSTSCRIPT.SCM:    (DEFINE (SHOW-RIGHT! TLIST) ;; KEEPS THE POINTER AT THE BEGINNING OF THE STRING, BUT 
POSTSCRIPT.SCM:    (DEFINE (SHOW-TABLE TLIST)
POSTSCRIPT.SCM:(DEFINE (GRAPH-PAPER PS GRIDSIZE)
POSTSCRIPT.SCM:(DEFINE (MAKE-GRAPH-PAPER FILENAME GRIDSIZE)
POSTSCRIPT.SCM:(DEFINE (PLOT-POLYGON PS BORDER WEIGHT VLIST . OPEN-POLYGON)
POSTSCRIPT.SCM:(DEFINE (PLOT-FILLED-POLYGON PS BORDER BFILL PFILL VLIST)
POSTSCRIPT.SCM:(DEFINE (MAKE-TEXT PORT/FILENAME #!REST DISCARD)
POSTSCRIPT.SCM:    (DEFINE (*NEWPAGE) (NEWLINE FILE) (SET! COLUMN 0) (SET! ROW 0) (SET! PAGECOUNT (+ 1 PAGECOUNT)))
POSTSCRIPT.SCM:    (DEFINE (*NEWLINE) (NEWLINE FILE) (SET! COLUMN 0) (SET! ROW (+ ROW 1)))
POSTSCRIPT.SCM:    (DEFINE (NO-TEXT-DISPLAY #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (TEXT-DISPLAY* #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (TEXT-SHOW #!REST ARGS)
POSTSCRIPT.SCM:    (DEFINE (SET-LEFT-MARGIN N)
POSTSCRIPT.SCM:    (DEFINE (SHOW-TABLE LST)
POSTSCRIPT.SCM:	 (DEFINE (EMIT-PAGE-START)
POSTSCRIPT.SCM:    (DEFINE (START-PAGE)
POSTSCRIPT.SCM:    (DEFINE (END-PAGE)
PREAMBLE.SCM:;; 		((DEFINE* (PROC) BODY ...) (SYNTAX (DEFINE (PROC) BODY ...)))
PREAMBLE.SCM:(DEFINE (WARNING-LOG #!REST ARGS)
PREAMBLE.SCM:(DEFINE (CONSTRUCT-SYMBOL SYM #!REST TAGELS)
PREAMBLE.SCM:(DEFINE (!FILTER SELECTOR LST)
PREAMBLE.SCM:(DEFINE (MAYBE-EXPAND-PATH PATH . DIR)
PREAMBLE.SCM:(DEFINE (DNL* . ARGS)
PREAMBLE.SCM:(DEFINE (DNL . ARGS)
PREAMBLE.SCM:(DEFINE (COMMENT . ARGS) #!VOID)
PREAMBLE.SCM:(DEFINE (LIST-COPY L) ;; REMEMBER, LIST-COPY IS THE CANONICAL LIST DUPLICATION ROUTINE
PREAMBLE.SCM:(DEFINE (FILTER SELECTOR LST)
PREAMBLE.SCM:(DEFINE (!FILTER SELECTOR LST) 
PREAMBLE.SCM:(DEFINE (DEFINITION-COMMENT TAG . COMMENTS)
PREAMBLE.SCM:(DEFINE (DESCRIBE ITEM)
PREAMBLE.SCM:(DEFINE (SYMBOL<? S T)
PREAMBLE.SCM:(DEFINE (CALL-WITH-INPUT-PORT P THUNK)
PREAMBLE.SCM:(DEFINE (CALL-WITH-OUTPUT-PORT P THUNK)
PREAMBLE.SCM:(DEFINE (CALL-WITH-ERROR-PORT P THUNK)
PREAMBLE.SCM:;#; (DEFINE (LOAD-FLAT-LIST-FROM-FILE FILENAME)
PREAMBLE.SCM:(DEFINE (CAPTURE-STRING-FROM THUNK)
PREAMBLE.SCM:(DEFINE (LOAD-LINES-FROM-PORT F)
PREAMBLE.SCM:(DEFINE (CAPTURE-LINES-FROM THUNK)
PREAMBLE.SCM:(DEFINE (LOAD-LIST-FROM-PORT F)
PREAMBLE.SCM:(DEFINE (CAPTURE-LIST-FROM THUNK)
PREAMBLE.SCM:(DEFINE (LOAD-FLAT-LIST-FROM-PORT F)
PREAMBLE.SCM:(DEFINE (CAPTURE-FLAT-LIST-FROM THUNK)
PREAMBLE.SCM:(DEFINE (LOAD-LIST-FROM-PIPE CMD-ARRAY . EXTRAS)
PREAMBLE.SCM:;;(DEFINE (LOAD-FLAT-LIST-FROM-PIPE COMMAND . ARGS)
PREAMBLE.SCM:(DEFINE (LOAD-FLAT-LIST-FROM-PIPE CMD-ARRAY . ARGS)
PREAMBLE.SCM:;;(DEFINE (LOAD-LIST-FROM-COMMAND CMDLINE)
PREAMBLE.SCM:;;(DEFINE (LOAD-FLAT-LIST-FROM-COMMAND CMDLINE)
PREAMBLE.SCM:(DEFINE (LOAD-LIST-FROM-FILE FILENAME)
PREAMBLE.SCM:;; (DEFINE (LOAD-LIST-FROM-FILE FILENAME)
PREAMBLE.SCM:(DEFINE (LOAD-FLAT-LIST-FROM-FILE FILENAME)
PREAMBLE.SCM:(DEFINE (LOAD-LINES-FROM-FILE FILENAME)
PREAMBLE.SCM:(DEFINE (LOAD-LISTS-FROM-FILE FILENAME SEPARATOR)
PREAMBLE.SCM:;  (DEFINE (LOAD-LIST-FROM-FILE FILENAME)
PREAMBLE.SCM:;(DEFINE (READ-ARRAY-FROM-FILE FNAME . BOUNDS)
REMODEL-ANCILLIARIES.SCM:(DEFINE (TYPE-OF X)
REMODEL-ANCILLIARIES.SCM:(DEFINE (LOOKIT-Q A) (MAP (LAMBDA (X) (X A)) (LIST TAXON CNC SUBJECTIVE-TIME AGENT-STATE QUEUE-STATE)))
REMODEL-ANCILLIARIES.SCM:(DEFINE (SATURATE X K)  (+ X (* (- 1 X) K)))
REMODEL-ANCILLIARIES.SCM:(DEFINE (SATURATE* X K N) (SATURATE X (IF (ZERO? N) 0.0 (- 1 (EXP (* N (LOG K)))))))
REMODEL-ANCILLIARIES.SCM:(DEFINE (MAP-SATURATE* X K N)
REMODEL-ANCILLIARIES.SCM:(DEFINE (PP OB) ;; CAN PP METHODS AS WELL AS PROCEDURES
REMODEL-ANCILLIARIES.SCM:(DEFINE (BEST-N N SEL VALUE L)
REMODEL-ANCILLIARIES.SCM:(DEFINE (RANDOM-DIRECTION #!OPTIONAL N)
REMODEL-ANCILLIARIES.SCM:(DEFINE ($MASS-AT-AGE-FUNCTION M A M A)
REMODEL-ANCILLIARIES.SCM:(DEFINE ($AGE-AT-MASS-FUNCTION M A M A)
REMODEL-ANCILLIARIES.SCM:(DEFINE (MASS-AT-AGE-FUNCTION M A M A)
REMODEL-ANCILLIARIES.SCM:(DEFINE (AGE-AT-MASS-FUNCTION M A M A)
REMODEL-ANCILLIARIES.SCM:(DEFINE (APPLY F LST)
REMODEL-ANCILLIARIES.SCM:(DEFINE (NOTE FLAG #!REST ARGS)
REMODEL-ANCILLIARIES.SCM:(DEFINE (ALTERNATES? LST P Q)
REMODEL-ANCILLIARIES.SCM:(DEFINE (ALTERNATES? LST P Q)
REMODEL-ANCILLIARIES.SCM:(DEFINE (MAKE-LIST K #!REST V)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (MAKE-CIRCLE-PERIMETER LOCATION RADIUS #!OPTIONAL DIVISIONS)
REMODEL-ANCILLIARIES.SCM:(DEFINE (MAKE-CIRCLE-PERIMETER LOCATION RADIUS #!OPTIONAL DIVISIONS)
REMODEL-ANCILLIARIES.SCM:(DEFINE (MAKE-BOX LL UR)
REMODEL-ANCILLIARIES.SCM:(DEFINE (PROJECT-FROM-ONE-TO-ANOTHER FROM TO POINT)
REMODEL-ANCILLIARIES.SCM:(DEFINE (REFRESH-INTROSPECTION-TARGETS IAGENT Q)
REMODEL-ANCILLIARIES.SCM:(DEFINE (ADD-DEFAULT-INITIALISATION-FOR KEY LST)
REMODEL-ANCILLIARIES.SCM:(DEFINE (INITIALISATION-DEFAULTS-FOR KEY)
REMODEL-ANCILLIARIES.SCM:(DEFINE (SET-UNINITIALISED-SLOTS OBJ LST VALUE)
REMODEL-ANCILLIARIES.SCM:(DEFINE (FAIL-ON-UNINITIALISED-SLOTS OBJ LST)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (U:MSPACE->OSPACE M-DOMAIN O-DOMAIN)
REMODEL-ANCILLIARIES.SCM:(DEFINE (PAGE-DOMAIN S)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (M->PS XY)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (PS->M X)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (KM->PS XY)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (PS->KM X)
REMODEL-ANCILLIARIES.SCM:(DEFINE (SET-MODEL-DOMAIN! LL UR #!OPTIONAL PAGESIZE) ;; 10MM MARGINS ALL AROUND
REMODEL-ANCILLIARIES.SCM:(DEFINE (ADD-TO-*DEFAULT-PROJECTIONS* P K)
REMODEL-ANCILLIARIES.SCM:(DEFINE (ADD-PS-PROJECTION KEY INVKEY MODEL-DOMAIN PAGESIZE #!REST MARGIN)
REMODEL-ANCILLIARIES.SCM:(DEFINE (N-LINEAR-MAP DOMAIN CODOMAIN)
REMODEL-ANCILLIARIES.SCM:(DEFINE (RECIPROCAL X) (/ 1 X))
REMODEL-ANCILLIARIES.SCM:(DEFINE (DOMAIN-TRANSPOSED D)
REMODEL-ANCILLIARIES.SCM:(DEFINE (IS-IN X #!REST DOMAIN)
REMODEL-ANCILLIARIES.SCM:(DEFINE (LINEAR-MAP DOMAIN CODOMAIN #!OPTIONAL INVERSE)
REMODEL-ANCILLIARIES.SCM:(DEFINE (LINEAR2D:MODEL-SPACE->OUTPUT-SPACE DOMAIN CODOMAIN)
REMODEL-ANCILLIARIES.SCM:(DEFINE (*LINEAR2D:MODEL-SPACE->OUTPUT-SPACE DOMAIN CODOMAIN)
REMODEL-ANCILLIARIES.SCM:;; (DEFINE (MAP:DOMAIN-TO-POSTSCRIPT MODEL-DOMAIN PAGESIZE #!OPTIONAL MARGIN #!REST USE-*LINEAR-MAP)
REMODEL-ANCILLIARIES.SCM:(DEFINE (MAP:DOMAIN-TO-POSTSCRIPT DOMAIN PAGESIZE #!OPTIONAL MARGIN #!REST USE-*LINEAR-MAP)
REMODEL-ANCILLIARIES.SCM:;(DEFINE (APPLY-POINTWISE-PROJECTION 
REMODEL-ANCILLIARIES.SCM:(DEFINE (SLOW-SORT LST)
REMODEL-ANCILLIARIES.SCM:(DEFINE (COUNT-KEYED-MEMBERS LST) ;; USED BY MONITORS
REMODEL-ANCILLIARIES.SCM:(DEFINE (NO-DEFAULT-VARIABLES) '()) ;; USED TO INDICATE THAT THERE ARE NO DEFAULTS 
REMODEL-ANCILLIARIES.SCM:(DEFINE (NOMINAL-GROWTH-RATE* SELF DT)
REMODEL-ANCILLIARIES.SCM:(DEFINE (XSTOCH-WALK HERE THERE DT NDT VAR SPD)
REMODEL-ANCILLIARIES.SCM:(DEFINE (XXSTOCH-WALK HERE THERE DT NDT VAR SPD)
REMODEL-ANCILLIARIES.SCM:(DEFINE (STOCH-WALK- HERE THERE DT NDT ATTR SP)	 
REMODEL-ANCILLIARIES.SCM:(DEFINE (STOCH-WALK HERE THERE DT NDT ATTR SP)	 
REMODEL-ANCILLIARIES.SCM:(DEFINE (REMAINDER* F G)
REMODEL-ANCILLIARIES.SCM:(DEFINE (OK-TO-REPRODUCE T AGE MIN-AGE START DURATION PROBABILITY)
REMODEL-FRAMEWORK:(DEFINE (ERROR #!REST ARGS)
REMODEL-FRAMEWORK:;;; 					  (ERROR "WE CANNOT USE DEFINE% EXCEPT ON DEFINITIONS OF THE FORM (DEFINE (FUNC ...) ...)" FORMALS)
REMODEL-METHODS.SCM:(DEFINE (MY-MAP-COLOR SELF #!REST CLASSDEPTH)
REMODEL-METHODS.SCM:(DEFINE (MY-CONTRAST-COLOR SELF)
REMODEL-METHODS.SCM:(DEFINE (MY-DEFAULT-COLOR SELF)
REMODEL-METHODS.SCM:(DEFINE (ISA? ME #!REST CLASSES)
REMODEL-METHODS.SCM:(DEFINE (DUMP WHATSIT)
REMODEL-METHODS.SCM:(DEFINE (VECTOR-TO S D)
REMODEL-METHODS.SCM:(DEFINE (DO-MAP-CONVERSION PFN GFN)
REMODEL-METHODS.SCM:(DEFINE (ARG-PAIRINGS SYMLIST OBJLIST)
REMODEL-METHODS.SCM:;;; (DEFINE (INTERVAL T DDT STOPAT TLIST)
REMODEL-METHODS.SCM:(DEFINE (*LINEAR2D:MODEL-SPACE->OUTPUT-SPACE M-DOMAIN O-DOMAIN)
REMODEL-METHODS.SCM:  (DEFINE (MAP:DOMAIN-TO-POSTSCRIPT MODEL-DOMAIN PAPERSIZE MARGIN #!REST USE-*LINEAR-MAP)
REMODEL-METHODS.SCM:(DEFINE (LOCATION SELF #!REST ARGS)
REMODEL-METHODS.SCM:(DEFINE (LOCAL->MODEL SELF LOCATION)
REMODEL-METHODS.SCM:(DEFINE (MODEL->LOCAL SELF LOCATION)
REMODEL-METHODS.SCM:(DEFINE (GET-MODEL->LOCAL SELF)
REMODEL-METHODS.SCM:(DEFINE (GET-LOCAL->MODEL SELF)
REMODEL-METHODS.SCM:(DEFINE (GET-PROJECTION SELF KEY)
REMODEL-METHODS.SCM:(DEFINE (SET-MODEL->LOCAL! SELF KEY)
REMODEL-METHODS.SCM:(DEFINE (SET-LOCAL->MODEL! SELF KEY)
REMODEL-METHODS.SCM:(DEFINE (PRUNE-LOCAL-TIME-QUEUE TM TTR)
REMODEL-METHODS.SCM:(DEFINE (RANDOM-ARRAY-AGENT N)
REMODEL-METHODS.SCM:(DEFINE (PATCHES-CONTAINING-LOCUS LOC Q)
REMODEL-METHODS.SCM:(DEFINE (PATCHES-CONTAINING LOC Q)
REMODEL-METHODS.SCM:;;; (DEFINE (PATCHES-CONTAINING LOC Q)
REMODEL-METHODS.SCM:(DEFINE (PROXIFY A Q #!REST ARGS)
REMODEL-METHODS.SCM:(DEFINE (CMP-BY-DISTANCE PIVOT CMP)
REMODEL-METHODS.SCM:(DEFINE (MAKE-SERVICE-AGENT PRINTNAME SYMBOL VAL MAX-DT #!OPTIONAL EXTERN-GET EXTERN-SET! EXTERNAL-AGENTS)
REMODEL-METHODS.SCM:(DEFINE (EXT-GET-FUNC SELF)
REMODEL-METHODS.SCM:(DEFINE (EXT-SET!-FUNC SELF V)
REMODEL-METHODS.SCM:(DEFINE (EXT-ADD!-FUNC SELF V)
REMODEL-WRAPPERS.SCM:;;; (DEFINE (SET-STATE-VARIABLES SELF ARGS) ;;;
REMODEL-WRAPPERS.SCM:;;; (DEFINE (LOG-DATA SELF LOGGER FORMAT  TARGETS . FILE) ;;;
REMODEL-WRAPPERS.SCM:(DEFINE (DUMP SELF . ARGS)
REMODEL-WRAPPERS.SCM:(DEFINE (PATCH-LIST SELF . ARGS)
REMODEL-WRAPPERS.SCM:(DEFINE (SERVICES SELF . ARGS)
REMODEL-WRAPPERS.SCM:(DEFINE (SPECIFIC-SERVICES SELF . ARGS)
REMODEL-WRAPPERS.SCM:(DEFINE (SERVICE-LIST SELF . ARGS)
REMODEL.SCM:(DEFINE (SYM->SCM X) (LET ((FN (STRING-APPEND (SYMBOL->STRING X) ".SCM")))
SCLOS+EXTN.SCM:(DEFINE (ALL-SLOTNAMES OBJ)
SCLOS+EXTN.SCM:(DEFINE (ALL-SLOTS OBJ)
SCLOS+EXTN.SCM:(DEFINE (CLASSES-OF-SUPERS X)
SCLOS+EXTN.SCM:(DEFINE (PARENT-CLASSES X)
SCLOS+EXTN.SCM:;--- (DEFINE (CLASS-SLOTS-OF X)
SCLOS+EXTN.SCM:(DEFINE (CLASS-SLOTS-OF X)
SCLOS+EXTN.SCM:;--- (DEFINE (DUMPSLOTS ENT)
SCLOS+EXTN.SCM:(DEFINE (DUMPSLOTS ENT)
SCLOS+EXTN.SCM:(DEFINE (EXAMINE-INSTANCE ENTITY)
SCLOS+EXTN.SCM:(DEFINE (CLASS-NAME-OF Q)
SCLOS+EXTN.SCM:(DEFINE (CLASS-NAME-OF-INSTANCE Q)
SCLOS+EXTN.SCM:;--- (DEFINE (CLASS-NAMES-OF-SUPERS X)
SCLOS+EXTN.SCM:(DEFINE (CLASS-NAMES-OF-SUPERS X)
SCLOS+EXTN.SCM:;--- (DEFINE (PRIMITIVE-OBJECT? A)
SCLOS+EXTN.SCM:(DEFINE (PRIMITIVE-OBJECT? A)
SCLOS+EXTN.SCM:;--- (DEFINE (INSTANCE? A)
SCLOS+EXTN.SCM:(DEFINE (INSTANCE? A)
SCLOS+EXTN.SCM:;; (DEFINE (STANDARD-TYPE? X #!REST LST)
SCLOS+EXTN.SCM:(DEFINE (CLASS? A)
SCLOS+EXTN.SCM:;--- (DEFINE (OBJECT? A)
SCLOS+EXTN.SCM:(DEFINE (OBJECT? A)
SCLOS+EXTN.SCM:;--- (DEFINE (AGENT? A)
SCLOS+EXTN.SCM:(DEFINE (AGENT? A)
SCLOS+EXTN.SCM:(DEFINE (IS-CLASS? O C)
SCLOS+EXTN.SCM:;--- (DEFINE (HAS-SLOT? A K)
SCLOS+EXTN.SCM:(DEFINE (HAS-SLOT? A K)
SCLOS+EXTN.SCM:(DEFINE (INPUT-OUTPUT-PORT? X)
SCLOS+EXTN.SCM:(DEFINE (FILE-HANDLE? X)
SCLOS+EXTN.SCM:(DEFINE (CLOSE-OUTPUT HANDLE)
SCLOS+EXTN.SCM:(DEFINE (PARENT-CLASSES? X)
SCLOS+EXTN.SCM:;--- (DEFINE (CLASS-NAMES-OF-SUPERS X) ;; RETURNS STRINGS
SCLOS+EXTN.SCM:(DEFINE (CLASS-NAMES-OF-SUPERS X) ;; TAKES OBJECTS... OR CLASSES
SCLOS+EXTN.SCM:;--- (DEFINE (SLOT-VALUES A)
SCLOS+EXTN.SCM:(DEFINE (SLOT-VALUES A)
SCLOS+EXTN.SCM:;--- (DEFINE (UNINITIALISED? X #!REST Y)
SCLOS+EXTN.SCM:(DEFINE (UNINITIALISED? X #!OPTIONAL Y)
SCLOS+EXTN.SCM:;--- (DEFINE (UNINITIALISED? X #!REST Y)
SCLOS+EXTN.SCM:(DEFINE (UNINITIALISED#? X #!REST Y)
SCLOS+EXTN.SCM:;--- (DEFINE (NAMELESS? X #!REST Y)
SCLOS+EXTN.SCM:(DEFINE (NAMELESS? X #!REST Y)
SCLOS+EXTN.SCM:(DEFINE (DEFVAL SYM VALUE #!OPTIONAL NOTE)
SCLOS+EXTN.SCM:(DEFINE (2LIST? L)
SCLOS+EXTN.SCM:(DEFINE (LIST-OF-2LIST? L)
SCLOS+EXTN.SCM:;--- (DEFINE (SET-STATE-VARIABLES SELF ARGUMENTS)
SCLOS+EXTN.SCM:(DEFINE (SET-STATE-VARIABLES-2LISTS SELF ARGLIST)
SCLOS+EXTN.SCM:(DEFINE (SET-STATE-VARIABLES-FLAT-LIST SELF ARGLIST)
SCLOS+EXTN.SCM:(DEFINE (SET-STATE-VARIABLES SELF ARGUMENTS)
SCLOS+EXTN.SCM:(DEFINE (NULL=#F ARG)
SCLOS+EXTN.SCM:(DEFINE (*IS-CLASS? TARGETCLASS #!REST PLURAL)
SCLOS+EXTN.SCM:(DEFINE (*HAS-SLOT? SLOT)
SCLOS+EXTN.SCM:(DEFINE (*HAS-DATA? SLOT)
SCLOS+EXTN.SCM:(DEFINE (*HAS-SLOT-VALUE? SLOT V)
SCLOS+EXTN.SCM:(DEFINE (*IS-TAXON? TARGET #!REST S)
SCLOS+EXTN.SCM:(DEFINE (*IS-TAXON-CI? TARGETS #!REST S)
SCLOS+EXTN.SCM:(DEFINE (*IS-TAXON-WILD? TARGETS #!REST S)
SCLOS+EXTN.SCM:(DEFINE (*IS-TAXON-WILD-CI? TARGET #!REST S)
SCLOS+EXTN.SCM:(DEFINE (*PROVIDES? TARGET #!REST S)
SCLOS+EXTN.SCM:;; (DEFINE (*IS-*? TARGET #!REST S)
SCLOS+EXTN.SCM:(DEFINE (*PROVIDES-*? TARGET #!REST S)
SCLOS+EXTN.SCM:;; (DEFINE (*MATCHES? TARGET #!REST S)
SCLOS+EXTN.SCM:(DEFINE (CNC A) (CLASS-NAME-OF (CLASS-OF A)))
SCLOS+EXTN.SCM:(DEFINE (CNCS A) (STRING->SYMBOL (CLASS-NAME-OF (IF (CLASS? A) A (CLASS-OF A)))))
SCLOS+EXTN.SCM:(DEFINE (NM? A) (IF (ISA? A <AGENT>) (SLOT-REF A 'NAME) A))
SCLOS+EXTN.SCM:;--- (DEFINE (LOOK-FOR THING) -- QUERIES ALL THE REGISTERS FOR THE OBJECT PASSED
SCLOS+EXTN.SCM:(DEFINE (CHECK-REGISTERS-FOR THING)
SCLOS+EXTN.SCM:(DEFINE (SORTLESS-UNIQUE LST)  ;; THIS IS SO WE CAN ENSURE THAT WE DON'T CALL A METHOD TWICE.
SCLOS+EXTN.SCM:(DEFINE (APPLY-METHOD2 METHD ARGS)
SCLOS+EXTN.SCM:(DEFINE (APPLY-METHOD METHD #!REST ARGS)
SCLOS+EXTN.SCM:;; ;--- (DEFINE (OLD-CALL-ALL-INITIALISERS SELF #!REST ARGS) --- THIS IS EXPLICIT SINCE IT IS SO COMMON.
SCLOS+EXTN.SCM:;; (DEFINE (OLD-CALL-ALL-INITIALISERS DIRECTION SELF #!REST ARGS)
SCLOS+EXTN.SCM:(DEFINE (GET-METHODS% METHD #!REST SIGNATURE) ;; THIS RETURNS THE METHODS IN THE "NATURAL" ORDER
SCLOS+EXTN.SCM:(DEFINE (GET-METHODS$ CLASS-RESTRICTION #!REST SIGNATURE) ;; IF CLASS-RESTRICTION IS NULL RETURN ALL METHODS, ELSE RESTRICT TO LIST
SCLOS+EXTN.SCM:(DEFINE (GET-METHODS CLASS-RESTRICTION #!REST SIGNATURE) ;; IF CLASS-RESTRICTION IS NULL RETURN ALL METHODS, ELSE RESTRICT TO LIST
SCLOS+EXTN.SCM:;(DEFINE (X-CALL-ALL-PARENT-METHODS METHD #!REST SIGNATURE)
SCLOS+EXTN.SCM:(DEFINE (CALL-ALL-PARENT-METHODS #!REST SIGNATURE)
SCLOS+EXTN.SCM:(DEFINE (CALL-PARENT-METHODS$ CLASS-RESTRICTION #!REST SIGNATURE)
SCLOS+EXTN.SCM:(DEFINE (CALL-PARENT-METHODS CLASS-RESTRICTION #!REST SIGNATURE)
SCLOS+EXTN.SCM:;--- (DEFINE (CALL-FIRST-METHOD CLASSES METHD SELF #!REST SIGNATURE) -- THE MOST/LEAST RESTRICTIVE MATCH
SCLOS+EXTN.SCM:(DEFINE (CALL-FIRST-METHOD CLASSES METHD #!REST SIGNATURE) ;; THE FOLLOWING ROUTINE IS VERY SIMILAR TO THE PARENT-"METH"
SCLOS+EXTN.SCM:(DEFINE (SERIAL-NUMBER IT)
SCLOS+EXTN.SCM:(DEFINE (STRING-TAIL S N)
SCLOS+EXTN.SCM:(DEFINE (UNINITIALISE-FLAG S)
SCLOS+EXTN.SCM:(DEFINE (IFLAG CLSS)
SCLOS+EXTN.SCM:;--- (DEFINE (MAKE-OBJECT CLASS #!REST INITARGS)
SCLOS+EXTN.SCM:(DEFINE (MAKE-OBJECT% CLASS #!REST INITARGS)
SCLOS+EXTN.SCM:;--- (DEFINE (MAKE-AGENT CLASS . INITARGS)
SCLOS+EXTN.SCM:(DEFINE (MAKE-AGENT% CLASS #!REST INITARGS)
SCLOS+EXTN.SCM:(DEFINE (CHECK-PARAM-SIG FILENAME)
SCLOS+EXTN.SCM:(DEFINE (P-EVAL K)
SCLOS+EXTN.SCM:(DEFINE (VOID? X) (EQV? X (VOID)))
SCLOS+EXTN.SCM:(DEFINE (APPLY-INITIALISATION INSTANCE KEY)
SCLOS+EXTN.SCM:(DEFINE (PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:;; (DEFINE (XPARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (BOOLEAN-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (NUMERIC-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (STRING-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (SYMBOL-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (LIST-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (PROCEDURE-PARAMETER-LOOKUP CLASS TAXON KEY)
SCLOS+EXTN.SCM:(DEFINE (MAKE-OBJECT CLASS #!REST STATEVARS)
SELECT.SCM:(DEFINE (SELECT SELECTOR LST)
SELECT.SCM:(DEFINE (!SELECT SELECTOR LST)
SF:;(DEFINE (CREASE OP . LISTS) #F)
SF:;(DEFINE (MAP* OP LISTS) #F)
SF:(DEFINE (TWIST ARGS)
SF:(DEFINE (MAP* OP . L)
SF:  (DEFINE (%MAKE-TREE-TYPE KEY<?       ALIST->TREE 
SF:  (DEFINE (TREE-TYPE? TT)
SF:  (DEFINE (TREE-TYPE/KEY<?        TT) (VECTOR-REF TT 1))
SF:  (DEFINE (TREE-TYPE/ALIST->TREE  TT) (VECTOR-REF TT 2))
SF:  (DEFINE (TREE-TYPE/ADD          TT) (VECTOR-REF TT 3))
SF:  (DEFINE (TREE-TYPE/INSERT!      TT) (VECTOR-REF TT 4))
SF:  (DEFINE (TREE-TYPE/DELETE       TT) (VECTOR-REF TT 5))
SF:  (DEFINE (TREE-TYPE/DELETE!      TT) (VECTOR-REF TT 6))
SF:  (DEFINE (TREE-TYPE/MEMBER?      TT) (VECTOR-REF TT 7))
SF:  (DEFINE (TREE-TYPE/LOOKUP       TT) (VECTOR-REF TT 8))
SF:  (DEFINE (TREE-TYPE/SPLIT-LT     TT) (VECTOR-REF TT 9))
SF:  (DEFINE (TREE-TYPE/SPLIT-GT     TT) (VECTOR-REF TT 10))
SF:  (DEFINE (TREE-TYPE/UNION        TT) (VECTOR-REF TT 11))
SF:  (DEFINE (TREE-TYPE/INTERSECTION TT) (VECTOR-REF TT 12))
SF:  (DEFINE (TREE-TYPE/DIFFERENCE   TT) (VECTOR-REF TT 13))
SF:  (DEFINE (TREE-TYPE/SUBSET?      TT) (VECTOR-REF TT 14))
SF:  (DEFINE (TREE-TYPE/RANK         TT) (VECTOR-REF TT 15))
SF:  (DEFINE (%MAKE-WT-TREE TYPE ROOT)
SF:  (DEFINE (WT-TREE? T)
SF:  (DEFINE (TREE/TYPE T) (VECTOR-REF T 1))
SF:  (DEFINE (TREE/ROOT T) (VECTOR-REF T 2))
SF:  (DEFINE (SET-TREE/ROOT! T V) (VECTOR-SET! T 2 V))
SF:  (DEFINE (MAKE-NODE K V L R W) (VECTOR W L K R V))
SF:  (DEFINE (NODE/K NODE) (VECTOR-REF NODE 2))
SF:  (DEFINE (NODE/V NODE) (VECTOR-REF NODE 4))
SF:  (DEFINE (NODE/L NODE) (VECTOR-REF NODE 1))
SF:  (DEFINE (NODE/R NODE) (VECTOR-REF NODE 3))
SF:  (DEFINE (NODE/W NODE) (VECTOR-REF NODE 0))
SF:  (DEFINE (EMPTY? X) (EQ? X 'EMPTY))
SF:  (DEFINE (NODE/SIZE NODE)
SF:  (DEFINE (NODE/SINGLETON K V) (MAKE-NODE K V EMPTY EMPTY 1))
SF:  (DEFINE (WITH-N-NODE NODE RECEIVER)
SF:  (DEFINE (N-JOIN K V L R)
SF:  (DEFINE (SINGLE-L A.K A.V X R)
SF:  (DEFINE (DOUBLE-L A.K A.V X R)
SF:  (DEFINE (SINGLE-R B.K B.V L Z)
SF:  (DEFINE (DOUBLE-R C.K C.V L Z)
SF:  (DEFINE (T-JOIN K V L R)
SF:    (DEFINE (SIMPLE-JOIN) (N-JOIN K V L R))
SF:  (DEFINE (NODE/MIN NODE)
SF:  (DEFINE (NODE/DELMIN NODE)
SF:  (DEFINE (NODE/CONCAT2 NODE1 NODE2)
SF:  (DEFINE (NODE/INORDER-FOLD PROCEDURE BASE NODE)
SF:    (DEFINE (FOLD BASE NODE)
SF:  (DEFINE (NODE/FOR-EACH PROCEDURE NODE)
SF:  (DEFINE (NODE/HEIGHT NODE)
SF:  (DEFINE (NODE/INDEX NODE INDEX)
SF:    (DEFINE (LOOP NODE INDEX)
SF:  (DEFINE (ERROR:EMPTY OWNER)
SF:  (DEFINE (LOCAL:MAKE-WT-TREE-TYPE KEY<?)
SF:    (DEFINE (KEY>? X Y)  (KEY<? Y X))
SF:    (DEFINE (NODE/FIND K NODE)
SF:      (DEFINE (LOOP THIS BEST)
SF:    (DEFINE (NODE/RANK K NODE RANK)
SF:    (DEFINE (NODE/ADD NODE K V)
SF:    (DEFINE (NODE/DELETE X NODE)
SF:    (DEFINE (NODE/CONCAT TREE1 TREE2)
SF:    (DEFINE (NODE/CONCAT3 K V L R)
SF:    (DEFINE (NODE/SPLIT-LT NODE X)
SF:    (DEFINE (NODE/SPLIT-GT NODE X)
SF:    (DEFINE (NODE/UNION TREE1 TREE2)
SF:    (DEFINE (NODE/DIFFERENCE TREE1 TREE2)
SF:    (DEFINE (NODE/INTERSECTION TREE1 TREE2)
SF:    (DEFINE (NODE/SUBSET? TREE1 TREE2)
SF:    (DEFINE (TREE/MAP-ADD TREE K V)
SF:    (DEFINE (TREE/INSERT! TREE K V)
SF:    (DEFINE (TREE/DELETE TREE K)
SF:    (DEFINE (TREE/DELETE! TREE K)
SF:    (DEFINE (TREE/SPLIT-LT TREE KEY)
SF:    (DEFINE (TREE/SPLIT-GT TREE KEY)
SF:    (DEFINE (TREE/UNION TREE1 TREE2)
SF:    (DEFINE (TREE/INTERSECTION TREE1 TREE2)
SF:    (DEFINE (TREE/DIFFERENCE TREE1 TREE2)
SF:    (DEFINE (TREE/SUBSET? TREE1 TREE2)
SF:    (DEFINE (ALIST->TREE ALIST)
SF:      (DEFINE (LOOP ALIST NODE)
SF:    (DEFINE (TREE/GET TREE KEY DEFAULT)
SF:    (DEFINE (TREE/RANK TREE KEY)  (NODE/RANK KEY (TREE/ROOT TREE) 0))
SF:    (DEFINE (TREE/MEMBER? KEY TREE)
SF:  (DEFINE (GUARANTEE-TREE TREE PROCEDURE)
SF:  (DEFINE (GUARANTEE-TREE-TYPE TYPE PROCEDURE)
SF:  (DEFINE (GUARANTEE-COMPATIBLE-TREES TREE1 TREE2 PROCEDURE)
SF:(DEFINE (RESET-STAT-FILTER ARGS)
SF:(DEFINE (DNL . ARGS) (MAP (LAMBDA (X) (DISPLAY X) (DISPLAY " ")) ARGS) (NEWLINE))
SF:(DEFINE (DDNL TAG . ARGS)
SF:(DEFINE (PDNL TAG . ARGS)
SF:(DEFINE (PP . L)
SF:(DEFINE (USAGE) 
SF:(DEFINE (REAL->INTEGER K)
SF:(DEFINE (LIST-EXCEPT EXCLUDE LST)
SF:(DEFINE (GSUBSTRING S MINX MANX)
SF:(DEFINE (DSTRING->NUMBER S) 
SF:(DEFINE (FILTER-EMPTY-STRINGS S)
SF:(DEFINE (STATS-BIN)
SF:    (DEFINE (ADD-NUMBER X . I)
SF:    (DEFINE (CENTILE N)
SF:    (DEFINE (CENTILE-0 N)
SF:    (DEFINE (CENTILE-MM CENTAGE M M)
SF:    (DEFINE (MEDIAN-MM M M)
SF:    (DEFINE (MEDIAN-0)
SF:    (DEFINE (MEDIAN)
SF:(DEFINE (MAPOP OP)
SF:(DEFINE (STATS-BINS UNI MULTI)
SF:(DEFINE (FLENSE-ALIST ALIST)
SF:(DEFINE (LIST-ORDINATE X)
SF:(DEFINE (LIST-REFS L KEYS)
SF:(DEFINE (FLATTEN-LIST L)
SF:(DEFINE (BASIC-ATOM? A)
SF:(DEFINE (ATOM<? A B)
SF:(DEFINE (LIST-LESS? A B)
SF:(DEFINE (POPSTATS-LESS? A B)
SF:(DEFINE (CONVERT-WT-TREE WT)
SF:(DEFINE (CONVERT-HASH-TABLE HASHTAB)
SF:(DEFINE (FMODULO A B)
SF:(DEFINE (TYPE-MAP NAMES TYPES LINE)
SF:(DEFINE (LNO TAG LNO)
SF:(DEFINE (STATSPEC S)
SF:(DEFINE (TIME-TO-DATE TAG)
SF:(DEFINE (SHELTERED-READ-LINE INPORT)
SF:(DEFINE (SFDATA-REF WT HASH LL)
SF:(DEFINE (SFDATA-SET! WT HASH LL VV)
SF:(DEFINE (MAKE-INPUT-MAP TBL-COLUMN-NAME INPUT-COLUMN-NAME)
SF:(DEFINE (MAKE-OUTPUT-TYPE-LIST OUTPUT-COLUM-NAME INPUT-MAP TBL-COLUMN-TYPE)
SF:(DEFINE (PROCESS-CMD-LINE ARGS)
SF:(DEFINE (PROCESS-TBL-HEADER INPORT)
SF:(DEFINE (LOAD-INPUT-DATA INPORT)
SF:(DEFINE (DUMP-TBL-HEADER OUTPORT)
SF:(DEFINE (PROCESS-OUTPUT OUTPORT)
SF:(DEFINE (FLENSE-MAPS)
SF:(DEFINE (DUMP-MAPS)
SF:(DEFINE (RSF)
SF:(DEFINE (RUN-STAT-FILTER ARGS)
SORT.SCM:;   (DEFINE (KEYED LESS? KEY) (LAMBDA (X Y) (LESS? (KEY X) (KEY Y))))
SORT.SCM:(DEFINE (SORTED? SEQ LESS?)
SORT.SCM:(DEFINE (MERGE A B LESS?)
SORT.SCM:(DEFINE (MERGE! A B LESS?)
SORT.SCM:    (DEFINE (LOOP R A B)
SORT.SCM:(DEFINE (SORT! SEQ LESS?)
SORT.SCM:    (DEFINE (STEP N)
SORT.SCM:(DEFINE (SORT SEQ LESS?)
SPECIFIC-MODEL.SCM:(DEFINE (PS-CHECK FILENAME)
STATSF.SCM:(DEFINE (TWIST ARGS)
STATSF.SCM:(DEFINE (MAP% OP . L)
STATSF.SCM:(DEFINE (MAPOP OP)
STATSF.SCM:(DEFINE (RESET-STAT-FILTER ARGS)
STATSF.SCM:(DEFINE (DNL . ARGS) (MAP (LAMBDA (X) (DISPLAY X) (DISPLAY " ")) ARGS) (NEWLINE))
STATSF.SCM:(DEFINE (DDNL TAG . ARGS)
STATSF.SCM:(DEFINE (PDNL TAG . ARGS)
STATSF.SCM:(DEFINE (PP . L)
STATSF.SCM:(DEFINE (STRING-MATCH EXPR STR)
STATSF.SCM:(DEFINE (USAGE) 
STATSF.SCM:(DEFINE (REAL->INTEGER K)
STATSF.SCM:(DEFINE (STRSPN STR SET)
STATSF.SCM:(DEFINE (STRCSPN STR SET)
STATSF.SCM:(DEFINE (STRTOK STR SEP)
STATSF.SCM:(DEFINE (LIST-EXCEPT EXCLUDE LST)
STATSF.SCM:(DEFINE (GSUBSTRING S MINX MANX)
STATSF.SCM:(DEFINE (DSTRING->NUMBER S) 
STATSF.SCM:(DEFINE (FILTER-EMPTY-STRINGS S)
STATSF.SCM:(DEFINE (STATS-BIN K)
STATSF.SCM:    (DEFINE (ADD-NUMBER X . I)
STATSF.SCM:    (DEFINE (CENTILE C)
STATSF.SCM:    (DEFINE (CENTILE-0 C)
STATSF.SCM:    (DEFINE (CENTILE-MM CENTAGE M M)
STATSF.SCM:    (DEFINE (MEDIAN-MM M M)
STATSF.SCM:    (DEFINE (MEDIAN-0)
STATSF.SCM:    (DEFINE (MEDIAN)
STATSF.SCM:(DEFINE (STATS-BINS K UNI MULTI)
STATSF.SCM:(DEFINE (FLENSE-ALIST ALIST)
STATSF.SCM:(DEFINE (LIST-ORDINATE X)
STATSF.SCM:(DEFINE (LIST-REFS L KEYS)
STATSF.SCM:(DEFINE (FLATTEN-LIST L)
STATSF.SCM:(DEFINE (BASIC-ATOM? A)
STATSF.SCM:(DEFINE (ATOM<? A B)
STATSF.SCM:(DEFINE (LIST-LESS? A B)
STATSF.SCM:(DEFINE (POPSTATS-LESS? A B)
STATSF.SCM:(DEFINE (CONVERT-WT-TREE WT)
STATSF.SCM:(DEFINE (CONVERT-HASH-TABLE HASHTAB)
STATSF.SCM:(DEFINE (FMODULO A B)
STATSF.SCM:(DEFINE (TYPE-MAP NAMES TYPES LINE)
STATSF.SCM:(DEFINE (LNO TAG LNO)
STATSF.SCM:(DEFINE (STATSPEC S)
STATSF.SCM:;;;(DEFINE (TIME-TO-DATE TAG)
STATSF.SCM:(DEFINE (TIME-TO-DATE TAG)
STATSF.SCM:(DEFINE (SHELTERED-READ-LINE INPORT)
STATSF.SCM:(DEFINE (SFDATA-REF WT HASH LL)
STATSF.SCM:(DEFINE (SFDATA-SET! WT HASH LL VV)
STATSF.SCM:(DEFINE (MAKE-INPUT-MAP TBL-COLUMN-NAME INPUT-COLUMN-NAME)
STATSF.SCM:(DEFINE (MAKE-OUTPUT-TYPE-LIST OUTPUT-COLUM-NAME INPUT-MAP TBL-COLUMN-TYPE)
STATSF.SCM:(DEFINE (PROCESS-CMD-LINE ARGS)
STATSF.SCM:(DEFINE (PROCESS-TBL-HEADER INPORT)
STATSF.SCM:(DEFINE (LOAD-INPUT-DATA INPORT)
STATSF.SCM:(DEFINE (DUMP-TBL-HEADER OUTPORT)
STATSF.SCM:(DEFINE (PROCESS-OUTPUT OUTPORT)
STATSF.SCM:(DEFINE (FLENSE-MAPS)
STATSF.SCM:(DEFINE (DUMP-MAPS)
STATSF.SCM:(DEFINE (RSF)
STATSF.SCM:(DEFINE (RUN-STAT-FILTER ARGS)
TBL.SCM:(DEFINE (NEW-TBL FILENAME FIELD-LIST)
TBL.SCM:(DEFINE (TBLENT->TYPE T V)
TBL.SCM:(DEFINE (LOAD-TBL FILENAME)
TIMER.SCM:(DEFINE (TIMING-REPORT #!OPTIONAL FLAG)
TIMER.SCM:(DEFINE (AGGREGATE-MODEL-TIMING-DATA)
TIMER.SCM:(DEFINE (ELAPSED-TIMES TAG)
TIMER.SCM:(DEFINE (ELAPSED-CPU-TIME TAG)
TIMER.SCM:(DEFINE (ELAPSED-SYS-TIME TAG)
TIMER.SCM:(DEFINE (ELAPSED-REAL-TIME TAG)
TREE-RING-WLC.SCM:(DEFINE (DNL* #!REST ARGS)
TREE-RING-WLC.SCM:;(DEFINE (ERROR STR ARG)
TREE-RING-WLC.SCM:(DEFINE (EQUAL*? X Y #!REST Z)
TREE-RING-WLC.SCM:(DEFINE (%CROSS2 A B)
TREE-RING-WLC.SCM:(DEFINE (CROSS** #!REST ARGS)
TREE-RING-WLC.SCM:  (DEFINE (C2 A B)
TREE-RING-WLC.SCM:(DEFINE (MAP* MAPPING #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (SET-CADR! LST BIT)
TREE-RING-WLC.SCM:(DEFINE (SET-CADDR! LST BIT)
TREE-RING-WLC.SCM:(DEFINE (LIST-INSERT! LST IX EL ) 
TREE-RING-WLC.SCM:(DEFINE (LIST-DELETE! LST IX)
TREE-RING-WLC.SCM:(DEFINE (SET-WEIGHT! T W)
TREE-RING-WLC.SCM:(DEFINE (SET-LABEL! T W)
TREE-RING-WLC.SCM:(DEFINE (SET-CHILDREN! T W)
TREE-RING-WLC.SCM:(DEFINE (READ-STRING STR)
TREE-RING-WLC.SCM:(DEFINE (WRITE-STRING LST)
TREE-RING-WLC.SCM:(DEFINE (POWER B E) ;; ALSO DEFINED IN MATHS.SCM
TREE-RING-WLC.SCM:;(DEFINE (SQR X) (* X X))
TREE-RING-WLC.SCM:(DEFINE (N-ARITY-FROM-2-ARITY OP IDENTITY)
TREE-RING-WLC.SCM:(DEFINE (ZERO? X)
TREE-RING-WLC.SCM:(DEFINE (TYPE%? X)
TREE-RING-WLC.SCM:(DEFINE (TYPE? X)
TREE-RING-WLC.SCM:(DEFINE (TYPE? X)
TREE-RING-WLC.SCM:(DEFINE (DNL #!REST ARGS) (IF (NULL? ARGS) (DISPLAY "") (LET () (MAP DISPLAY ARGS) (NEWLINE))))
TREE-RING-WLC.SCM:(DEFINE (DNL #!REST ARGS) (IF DEBUGGING (APPLY DNL ARGS)))
TREE-RING-WLC.SCM:(DEFINE (DDNL #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (ANDF #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (ORF #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (MERGE-SORT L GT?) ;; FROM ROSETTA CODE
TREE-RING-WLC.SCM:  (DEFINE (MERGE LEFT RIGHT)
TREE-RING-WLC.SCM:  (DEFINE (TAKE L N)
TREE-RING-WLC.SCM:(DEFINE (FLATTEN-LIST LST)
TREE-RING-WLC.SCM:(DEFINE (FLATTEN-SINGLETONS LST)
TREE-RING-WLC.SCM:(DEFINE (UNIQUE LST)
TREE-RING-WLC.SCM:(DEFINE (!FILTER SELECTOR LST)
TREE-RING-WLC.SCM:(DEFINE (PICK-ONLY TYPE X)
TREE-RING-WLC.SCM:(DEFINE (LIST-INTERSECTION A B)
TREE-RING-WLC.SCM:(DEFINE (LIST-INTERSECTION* #!REST ARGS )
TREE-RING-WLC.SCM:(DEFINE (LIST-INTERSECTION% OP SELECTOR A B)
TREE-RING-WLC.SCM:(DEFINE (LIST-INTERSECTION%* OP SELECTOR #!REST ARGS )
TREE-RING-WLC.SCM:(DEFINE (STRING-HEAD S N)
TREE-RING-WLC.SCM:(DEFINE (STRING-TAIL S N)
TREE-RING-WLC.SCM:(DEFINE (STRING-CAR S)
TREE-RING-WLC.SCM:(DEFINE (STRING-CDR S)
TREE-RING-WLC.SCM:(DEFINE (STRING-CONTAINS? STR #!REST TARGETS) ;; (STRING-CONTAINS? "THE QUICK BROWN FOX" "OX" "HEN") ==> #T (STRING-CONTAINS? "THE QUICK BROWN FOX" "OXO" "HEN") ==> #F
TREE-RING-WLC.SCM:(DEFINE (LOCATE-SUBSTRING STR SUBSTR)
TREE-RING-WLC.SCM:(DEFINE (STRING-REPLACE S T R) ;STRING TARGET REPLACEMENT
TREE-RING-WLC.SCM:(DEFINE (STRING-REPLACE* S T R)
TREE-RING-WLC.SCM:(DEFINE (STRSPN STR SET)
TREE-RING-WLC.SCM:(DEFINE (STRCSPN STR SET)
TREE-RING-WLC.SCM:(DEFINE (COLLAPSING-STRTOK STR #!REST SEPARATOR)
TREE-RING-WLC.SCM:(DEFINE (STRTOK STR #!REST SEPARATOR)
TREE-RING-WLC.SCM:;---- (DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR) 
TREE-RING-WLC.SCM:(DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR)
TREE-RING-WLC.SCM:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR STR #!REST SEPARATORSTRING)
TREE-RING-WLC.SCM:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR+ STR #!REST SEPARATORSTRING)
TREE-RING-WLC.SCM:(DEFINE (NEXT-SPLIT STR SEPARATORSTRINGS)
TREE-RING-WLC.SCM:(DEFINE (SPLIT-STRING-AT-SEPARATORS STR SEPARATORSTRINGS)
TREE-RING-WLC.SCM:(DEFINE (SPLIT-STRING-AT-SEPARATORS+ STR SEPARATORSTRINGS)
TREE-RING-WLC.SCM:(DEFINE (ERODE-WHITESPACE STRING)
TREE-RING-WLC.SCM:(DEFINE (POLY-ZERO? X)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL ITEM)
TREE-RING-WLC.SCM:(DEFINE (CONSTANT? X) (OR (NUMBER? X) (AND (PAIR? X) (NUMBER? (CAR X)) (NULL? (CDR X)))))
TREE-RING-WLC.SCM:(DEFINE (CONSTANT? X) (OR (CONSTANT? X)
TREE-RING-WLC.SCM:(DEFINE (VARIABLE? X) (AND (LIST? X) (= 2 (LENGTH X)) (SYMBOL? (CAR X)) (NUMBER? (CADR X))))
TREE-RING-WLC.SCM:(DEFINE (FACTOR? X)
TREE-RING-WLC.SCM:(DEFINE (TERM? X)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL? X)
TREE-RING-WLC.SCM:(DEFINE (FLATTEN-CONSTANT P)
TREE-RING-WLC.SCM:(DEFINE (REMAP-CONSTANT X)
TREE-RING-WLC.SCM:(DEFINE (RECTIFY X)
TREE-RING-WLC.SCM:(DEFINE (RECTIFY-NUMBERS LST)
TREE-RING-WLC.SCM:(DEFINE (SYMBOL<? A B)
TREE-RING-WLC.SCM:(DEFINE (SYMBOL=? A B)
TREE-RING-WLC.SCM:(DEFINE (SYMBOL<=? A B)
TREE-RING-WLC.SCM:(DEFINE (SYMBOL>? A B)
TREE-RING-WLC.SCM:(DEFINE (FACTOR-ORDERING A B)
TREE-RING-WLC.SCM:(DEFINE (FACTOR<? A B)
TREE-RING-WLC.SCM:(DEFINE (FACTOR>? A B)
TREE-RING-WLC.SCM:(DEFINE (FACTOR=? A B)
TREE-RING-WLC.SCM:(DEFINE (SORT-FACTOR! T)
TREE-RING-WLC.SCM:(DEFINE (FIX-FACTORS! T)
TREE-RING-WLC.SCM:(DEFINE (TERM-ORDERING A B) 
TREE-RING-WLC.SCM:(DEFINE (TERM<? A B)
TREE-RING-WLC.SCM:(DEFINE (TERM>? A B)
TREE-RING-WLC.SCM:(DEFINE (TERM=? A B)
TREE-RING-WLC.SCM:(DEFINE (INDEX-IN LST KEY)
TREE-RING-WLC.SCM:(DEFINE (REMAP-TERM F)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TERM T) 
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TERMS X)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-POLYNOMIAL-FACTORS P) P)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-POLYNOMIAL P)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-LABEL T)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-LABELS T)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL=? P Q)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL<? P Q)
TREE-RING-WLC.SCM:(DEFINE (SORT-CHILDREN! T)
TREE-RING-WLC.SCM:(DEFINE (PROBE #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (NODE<? N M)
TREE-RING-WLC.SCM:  (DEFINE (NDL #!REST ARG)
TREE-RING-WLC.SCM:(DEFINE (NODE=? N M)
TREE-RING-WLC.SCM:(DEFINE (LABEL-CONSTANTS P)
TREE-RING-WLC.SCM:(DEFINE (LABEL-IND-FACTORS P)
TREE-RING-WLC.SCM:(DEFINE (CONSTANT-LABEL? P)
TREE-RING-WLC.SCM:(DEFINE (ZERO-TERM? T)
TREE-RING-WLC.SCM:(DEFINE (THE-NON-ZERO-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING-WLC.SCM:(DEFINE (THE-NON-ZERO-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING-WLC.SCM:(DEFINE (THE-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING-WLC.SCM:(DEFINE (THE-ZERO-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING-WLC.SCM:(DEFINE (THE-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING-WLC.SCM:(DEFINE (THE-NON-ZERO-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING-WLC.SCM:(DEFINE (THE-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING-WLC.SCM:(DEFINE (THE-CONSTANT-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING-WLC.SCM:(DEFINE (TREES-WITH-LABELS TREES LABELS)
TREE-RING-WLC.SCM:(DEFINE (TREES-WITH-SIMILAR-LABELS TREES LABELS)
TREE-RING-WLC.SCM:(DEFINE (REWRITE-CONSTANT-INDETERMINATE X)
TREE-RING-WLC.SCM:(DEFINE (SYMBOLIC-SIGS X)
TREE-RING-WLC.SCM:(DEFINE (MATCHES-SYM-SIG SIG)
TREE-RING-WLC.SCM:(DEFINE (P+ #!REST ARGS)
TREE-RING-WLC.SCM:;;; (DEFINE (_T* A B) ;;;
TREE-RING-WLC.SCM:;;;   (DEFINE (__T* #!REST ARGS) ;;;
TREE-RING-WLC.SCM:(DEFINE (ENSURE-LIST LST)
TREE-RING-WLC.SCM:(DEFINE (T* T1 T2)
TREE-RING-WLC.SCM:  (DEFINE (FIX X) (IF (NOT (PAIR? X)) (LIST X) X))
TREE-RING-WLC.SCM:(DEFINE (@T* X)
TREE-RING-WLC.SCM:(DEFINE (BAD-P2* A B)
TREE-RING-WLC.SCM:(DEFINE (P2* A B)
TREE-RING-WLC.SCM:(DEFINE (P* #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (SP* #!REST ARGS) (APPLY P* (MAP STRING->POLYNOMIAL ARGS)))
TREE-RING-WLC.SCM:(DEFINE (SUBSTITUTE-FACTOR F CODEX)
TREE-RING-WLC.SCM:(DEFINE (SUBSTITUTE-TERM T CODEX)
TREE-RING-WLC.SCM:(DEFINE (SUBSTITUTE-POLYNOMIAL P CODEX)
TREE-RING-WLC.SCM:(DEFINE (EVALUATE-FACTOR F)
TREE-RING-WLC.SCM:(DEFINE (EVALUATE-TERM T)
TREE-RING-WLC.SCM:(DEFINE (EVALUATE-POLYNOMIAL P CODEX)
TREE-RING-WLC.SCM:(DEFINE (STRING->TERM STR #!REST NEG)
TREE-RING-WLC.SCM:(DEFINE (STRING->POLYNOMIAL PSTR)
TREE-RING-WLC.SCM:(DEFINE (POLY-STRING-TERM T FORM)
TREE-RING-WLC.SCM:(DEFINE (N->S N FORM)
TREE-RING-WLC.SCM:(DEFINE (POLY-STRING-POLYNOMIAL P OP CP #!REST LATEX-FRACFORM)
TREE-RING-WLC.SCM:(DEFINE (SYMBOL->POLYNOMIAL SYM)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL->SYMBOL P)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL->STRING P)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL->LATEX-INLINE P)
TREE-RING-WLC.SCM:(DEFINE (POLYNOMIAL->LATEX-DISPLAY P)
TREE-RING-WLC.SCM:(DEFINE (WEIGHT V)
TREE-RING-WLC.SCM:(DEFINE (LABEL V)
TREE-RING-WLC.SCM:(DEFINE (SCALAR-TERM LBL)
TREE-RING-WLC.SCM:(DEFINE (CONTENT N)
TREE-RING-WLC.SCM:(DEFINE (CONTENT2 N) ;; SCORES 1 FOR EACH NON-ZERO LABEL
TREE-RING-WLC.SCM:(DEFINE (CONTENT3 N) ;; SCORES 1 FOR EACH NON-ZERO WEIGHT
TREE-RING-WLC.SCM:(DEFINE (CHILDREN<- #!REST KIDS)
TREE-RING-WLC.SCM:(DEFINE (CHILDREN V)
TREE-RING-WLC.SCM:(DEFINE (CHILD V L)
TREE-RING-WLC.SCM:(DEFINE (UNION #!REST ARGS)  (UNIQUE (APPLY APPEND ARGS)))  ;; MAKES IT NICE AND READABLE FOR SET OPERATIONS
TREE-RING-WLC.SCM:(DEFINE (UNION+ #!REST ARGS)  (APPLY APPEND ARGS))          ;; LIKE UNION, BUT PRESERVES MULTIPLICITY
TREE-RING-WLC.SCM:(DEFINE (INTERSECTION OP SEL #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (INTERSECTION-L*= #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE IDENTICAL
TREE-RING-WLC.SCM:(DEFINE (INTERSECTION-L*~ #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE SIMILAR
TREE-RING-WLC.SCM:(DEFINE (ZEROTREE? T)
TREE-RING-WLC.SCM:(DEFINE (NULL0? X) (OR (NULL? X) (EQUAL? ZEROTREE X)))
TREE-RING-WLC.SCM:(DEFINE (NODE? N)
TREE-RING-WLC.SCM:(DEFINE (NODE2? N)
TREE-RING-WLC.SCM:(DEFINE (NODE3? N)
TREE-RING-WLC.SCM:(DEFINE (SIMPLE-NODE? N)
TREE-RING-WLC.SCM:(DEFINE (UNIQUE-CHILDREN? E)
TREE-RING-WLC.SCM:(DEFINE (UNIQUE-NODE? N)
TREE-RING-WLC.SCM:(DEFINE (CHILDREN? E)
TREE-RING-WLC.SCM:(DEFINE (MAKE2-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING-WLC.SCM:(DEFINE (MAKE3-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING-WLC.SCM:(DEFINE (U-RESTRICTED-TO-V U V) ;; U\V_L
TREE-RING-WLC.SCM:(DEFINE (U-RESTRICTED-TO-NOT-V U V) ;; U\V_L
TREE-RING-WLC.SCM:(DEFINE (U-AND-V U V)
TREE-RING-WLC.SCM:(DEFINE (N-LAMBDA N) ;; THE RELATION USED FOR COLLECTING TERMS
TREE-RING-WLC.SCM:(DEFINE (SIM? U V) ;; SIMILAR NODES HAVE POLYNOMIALS THAT ARE RELATED (NODES OR POLYS)
TREE-RING-WLC.SCM:(DEFINE (EQ-CLASS? S)
TREE-RING-WLC.SCM:(DEFINE (EQ-CLASS-SET? S)
TREE-RING-WLC.SCM:(DEFINE (EQ-CLASS R U) ; EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING-WLC.SCM:(DEFINE (EQ-CLASS^SIGMA S U) ; SUM OF EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING-WLC.SCM:(DEFINE (N-LAMBDA U) ;; SET OF ALL EQUIVALENCE CLASSES IN U (NODES)
TREE-RING-WLC.SCM:(DEFINE (N-LAMBDA^SIGMA U) ; MEMBERS OF ALL EQUIV CLASSES IN U SUMMED
TREE-RING-WLC.SCM:(DEFINE (DEPTH TREE)
TREE-RING-WLC.SCM:(DEFINE (TRIM TREE)
TREE-RING-WLC.SCM:(DEFINE (CARD TREE)
TREE-RING-WLC.SCM:(DEFINE (OVERLAP U V)
TREE-RING-WLC.SCM:(DEFINE (SHADOW U V)
TREE-RING-WLC.SCM:(DEFINE (CANONICAL-LABEL L)
TREE-RING-WLC.SCM:(DEFINE (CHANGE-WEIGHT! TREE LIST-OF-LABELS  VALUE)
TREE-RING-WLC.SCM:(DEFINE (CHANGE-LABEL! TREE LIST-OF-LABELS  VALUE)
TREE-RING-WLC.SCM:(DEFINE (CHANGE-CHILDREN! TREE LIST-OF-LABELS VALUE)
TREE-RING-WLC.SCM:(DEFINE (REPLACE-CHILD! TREE LIST-OF-LABELS  NEW-CHILD) ;; THE NEW CHILD NEED NOT HAVE THE SAME LABEL AS THE OLD ONE
TREE-RING-WLC.SCM:(DEFINE (REVERSE-STRING S)
TREE-RING-WLC.SCM:(DEFINE (FILTER-FORMATTING S)
TREE-RING-WLC.SCM:(DEFINE (STRCAR S) ;; EXPECTS A CHAR, RETURNS A CHAR
TREE-RING-WLC.SCM:(DEFINE (STRCDR S) ;; EXPECTS A STRING, RETURNS A STRING
TREE-RING-WLC.SCM:(DEFINE (STRINDEX S CH)
TREE-RING-WLC.SCM:(DEFINE (!STRINDEX S CH)
TREE-RING-WLC.SCM:(DEFINE (STRSUB STRING OLD NEW)
TREE-RING-WLC.SCM:(DEFINE (STRSUB* STRING OLD NEW)
TREE-RING-WLC.SCM:(DEFINE (TIDY-STRING-ENDS S)
TREE-RING-WLC.SCM:(DEFINE (RECTIFY-TREE-STRING S)
TREE-RING-WLC.SCM:(DEFINE (STRING->CHILDREN C)
TREE-RING-WLC.SCM:(DEFINE (STRING->NODE S)
TREE-RING-WLC.SCM:(DEFINE (STRING->NODE2 S)
TREE-RING-WLC.SCM:(DEFINE (STRING->NODE3 S)
TREE-RING-WLC.SCM:(DEFINE (STRING->NODE3-TAKE1 S)
TREE-RING-WLC.SCM:(DEFINE (L U)
TREE-RING-WLC.SCM:(DEFINE (L* T)
TREE-RING-WLC.SCM:;; (DEFINE (UANDV U V)
TREE-RING-WLC.SCM:;; (DEFINE (TREE* U V)
TREE-RING-WLC.SCM:;; (DEFINE (T** U V)
TREE-RING-WLC.SCM:(DEFINE (NODES-WITH-LABEL L ES)
TREE-RING-WLC.SCM:;; (DEFINE (NORMALISE-CHILDREN S)
TREE-RING-WLC.SCM:(DEFINE (FACTOR-LIST P)
TREE-RING-WLC.SCM:(DEFINE (RELATED? P1 P2)
TREE-RING-WLC.SCM:(DEFINE (RELATED-CHILDREN? C1 C2)
TREE-RING-WLC.SCM:(DEFINE (P-RELATED-S R P SET) ;; R IS THE RELATION, P IS THE THING THAT WE ARE LOOKING FOR RELATIVES OF
TREE-RING-WLC.SCM:(DEFINE (PARTITION-SETS R U V #!REST VERBOSE)
TREE-RING-WLC.SCM:(DEFINE (PARTITION-SET*! R U)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TREE T)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TREE2 T)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TREE3 T)
TREE-RING-WLC.SCM:(DEFINE (NORMALISE-TREE3--OK-AS-FAR-AS-IT-GOES T)
TREE-RING-WLC.SCM:(DEFINE (OPERATOR-CURRY OP LST)
TREE-RING-WLC.SCM:(DEFINE (X-TREE+ X Y) 
TREE-RING-WLC.SCM:(DEFINE (MAKE-PAIRINGS C1 C2) ;; IT EXPECTS THE INPUTS TO BE COMPATIBLE 
TREE-RING-WLC.SCM:(DEFINE (BOXPLUS X Y)
TREE-RING-WLC.SCM:(DEFINE (LESS-ZEROTREE A)
TREE-RING-WLC.SCM:(DEFINE (BOXCROSS P C)
TREE-RING-WLC.SCM:(DEFINE (TREE3+ X Y)
TREE-RING-WLC.SCM:(DEFINE (TREE2+ X Y)
TREE-RING-WLC.SCM:(DEFINE (TREE+ #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (TREE- #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (T/Z T)
TREE-RING-WLC.SCM:(DEFINE (TREE-NORM TREE)
TREE-RING-WLC.SCM:(DEFINE (DISTANCE S T)
TREE-RING-WLC.SCM:(DEFINE (ABSOLUTE-VALUE T)
TREE-RING-WLC.SCM:(DEFINE (TYPE-TESTS X)
TREE-RING-WLC.SCM:(DEFINE (TREE* #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (TREE2* #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (TREE3* #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (TREE-DISTANCE- P Q)
TREE-RING-WLC.SCM:(DEFINE (TREE-DISTANCE P Q)
TREE-RING-WLC.SCM:(DEFINE (TREE->WORDIES T)
TREE-RING-WLC.SCM:(DEFINE (TREE->STRING T #!REST INDENT)
TREE-RING-WLC.SCM:(DEFINE (CHILDREN->STRING ES #!REST INDENT)
TREE-RING-WLC.SCM:(DEFINE (TREE->DISPLAY-STRING T #!REST INDENT)
TREE-RING-WLC.SCM:(DEFINE (MAKE-SPACE N)
TREE-RING-WLC.SCM:(DEFINE (TREE->DISPLAY-STRING% T INDENT)
TREE-RING-WLC.SCM:(DEFINE (TREE->DISPLAY-STRING%% T INDENT)
TREE-RING-WLC.SCM:(DEFINE (CHILDREN->DISPLAY-STRING ES #!REST INDENT)
TREE-RING-WLC.SCM:;; (DEFINE (S* U V)
TREE-RING-WLC.SCM:(DEFINE (RANDOM-DICE N S)
TREE-RING-WLC.SCM:(DEFINE (DNLT T)
TREE-RING-WLC.SCM:(DEFINE (DNLC T)
TREE-RING-WLC.SCM:(DEFINE (TDNL #!REST ARGS)
TREE-RING-WLC.SCM:(DEFINE (TREE-INTERPOLATE T1 T2 PIVOT)
TREE-RING-WLC.SCM:(DEFINE (P-N #!REST ARG)
TREE-RING-WLC.SCM:(DEFINE (RANDOM-POLYNOMIAL-TERM L S E) 
TREE-RING-WLC.SCM:(DEFINE (RANDOM-POLYNOMIAL L S K E)
TREE-RING-WLC.SCM:(DEFINE (RAND-POLY #!REST ARGS)
TREE-RING-WLC.SCM:;;; (DEFINE (RANDOM-TREE3 DEPTH N-TERMS NWEIGHT SYMBOLS MAXEXP TOOMANYKIDS) ;;;
TREE-RING-WLC.SCM:(DEFINE (RNDEL LST)
TREE-RING-WLC.SCM:(DEFINE (MKRND-NODE3% #!REST KINDER)
TREE-RING-WLC.SCM:(DEFINE (MKRND-NODE3 DEPTH NKIDS #!REST VAL)
TREE-RING-WLC.SCM:(DEFINE (TSTDL RCG)
TREE-RING.DEPRECATED:(DEFINE (DNL* #!REST ARGS)
TREE-RING.DEPRECATED:;(DEFINE (ERROR STR ARG)
TREE-RING.DEPRECATED:(DEFINE (EQUAL*? X Y #!REST Z)
TREE-RING.DEPRECATED:(DEFINE (%CROSS2 A B)
TREE-RING.DEPRECATED:(DEFINE (CROSS** #!REST ARGS)
TREE-RING.DEPRECATED:  (DEFINE (C2 A B)
TREE-RING.DEPRECATED:(DEFINE (MAP* MAPPING #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (SET-CADR! LST BIT)
TREE-RING.DEPRECATED:(DEFINE (SET-CADDR! LST BIT)
TREE-RING.DEPRECATED:(DEFINE (LIST-INSERT! LST IX EL ) 
TREE-RING.DEPRECATED:(DEFINE (LIST-DELETE! LST IX)
TREE-RING.DEPRECATED:(DEFINE (SET-WEIGHT! T W)
TREE-RING.DEPRECATED:(DEFINE (SET-LABEL! T W)
TREE-RING.DEPRECATED:(DEFINE (SET-CHILDREN! T W)
TREE-RING.DEPRECATED:(DEFINE (READ-STRING STR)
TREE-RING.DEPRECATED:(DEFINE (WRITE-STRING LST)
TREE-RING.DEPRECATED:(DEFINE (POWER B E) ;; ALSO DEFINED IN MATHS.SCM
TREE-RING.DEPRECATED:;(DEFINE (SQR X) (* X X))
TREE-RING.DEPRECATED:(DEFINE (N-ARITY-FROM-2-ARITY OP IDENTITY)
TREE-RING.DEPRECATED:(DEFINE (ZERO? X)
TREE-RING.DEPRECATED:(DEFINE (TYPE%? X)
TREE-RING.DEPRECATED:(DEFINE (TYPE? X)
TREE-RING.DEPRECATED:(DEFINE (TYPE? X)
TREE-RING.DEPRECATED:(DEFINE (DNL #!REST ARGS) (IF (NULL? ARGS) (DISPLAY "") (LET () (MAP DISPLAY ARGS) (NEWLINE))))
TREE-RING.DEPRECATED:(DEFINE (DNL #!REST ARGS) (IF DEBUGGING (APPLY DNL ARGS)))
TREE-RING.DEPRECATED:(DEFINE (DDNL #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (ANDF #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (ORF #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (MERGE-SORT L GT?) ;; FROM ROSETTA CODE
TREE-RING.DEPRECATED:  (DEFINE (MERGE LEFT RIGHT)
TREE-RING.DEPRECATED:  (DEFINE (TAKE L N)
TREE-RING.DEPRECATED:(DEFINE (FLATTEN-LIST LST)
TREE-RING.DEPRECATED:(DEFINE (FLATTEN-SINGLETONS LST)
TREE-RING.DEPRECATED:(DEFINE (UNIQUE LST)
TREE-RING.DEPRECATED:(DEFINE (!FILTER SELECTOR LST)
TREE-RING.DEPRECATED:(DEFINE (PICK-ONLY TYPE X)
TREE-RING.DEPRECATED:(DEFINE (LIST-INTERSECTION A B)
TREE-RING.DEPRECATED:(DEFINE (LIST-INTERSECTION* #!REST ARGS )
TREE-RING.DEPRECATED:(DEFINE (LIST-INTERSECTION% OP SELECTOR A B)
TREE-RING.DEPRECATED:(DEFINE (LIST-INTERSECTION%* OP SELECTOR #!REST ARGS )
TREE-RING.DEPRECATED:(DEFINE (STRING-HEAD S N)
TREE-RING.DEPRECATED:(DEFINE (STRING-TAIL S N)
TREE-RING.DEPRECATED:(DEFINE (STRING-CAR S)
TREE-RING.DEPRECATED:(DEFINE (STRING-CDR S)
TREE-RING.DEPRECATED:(DEFINE (STRING-CONTAINS? STR #!REST TARGETS) ;; (STRING-CONTAINS? "THE QUICK BROWN FOX" "OX" "HEN") ==> #T (STRING-CONTAINS? "THE QUICK BROWN FOX" "OXO" "HEN") ==> #F
TREE-RING.DEPRECATED:(DEFINE (LOCATE-SUBSTRING STR SUBSTR)
TREE-RING.DEPRECATED:(DEFINE (STRING-REPLACE S T R) ;STRING TARGET REPLACEMENT
TREE-RING.DEPRECATED:(DEFINE (STRING-REPLACE* S T R)
TREE-RING.DEPRECATED:(DEFINE (STRSPN STR SET)
TREE-RING.DEPRECATED:(DEFINE (STRCSPN STR SET)
TREE-RING.DEPRECATED:(DEFINE (COLLAPSING-STRTOK STR #!REST SEPARATOR)
TREE-RING.DEPRECATED:(DEFINE (STRTOK STR #!REST SEPARATOR)
TREE-RING.DEPRECATED:;---- (DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR) 
TREE-RING.DEPRECATED:(DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR)
TREE-RING.DEPRECATED:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR STR #!REST SEPARATORSTRING)
TREE-RING.DEPRECATED:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR+ STR #!REST SEPARATORSTRING)
TREE-RING.DEPRECATED:(DEFINE (NEXT-SPLIT STR SEPARATORSTRINGS)
TREE-RING.DEPRECATED:(DEFINE (SPLIT-STRING-AT-SEPARATORS STR SEPARATORSTRINGS)
TREE-RING.DEPRECATED:(DEFINE (SPLIT-STRING-AT-SEPARATORS+ STR SEPARATORSTRINGS)
TREE-RING.DEPRECATED:(DEFINE (ERODE-WHITESPACE STRING)
TREE-RING.DEPRECATED:(DEFINE (POLY-ZERO? X)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL ITEM)
TREE-RING.DEPRECATED:(DEFINE (CONSTANT? X) (OR (NUMBER? X) (AND (PAIR? X) (NUMBER? (CAR X)) (NULL? (CDR X)))))
TREE-RING.DEPRECATED:(DEFINE (CONSTANT? X) (OR (CONSTANT? X)
TREE-RING.DEPRECATED:(DEFINE (VARIABLE? X) (AND (LIST? X) (= 2 (LENGTH X)) (SYMBOL? (CAR X)) (NUMBER? (CADR X))))
TREE-RING.DEPRECATED:(DEFINE (FACTOR? X)
TREE-RING.DEPRECATED:(DEFINE (TERM? X)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL? X)
TREE-RING.DEPRECATED:(DEFINE (FLATTEN-CONSTANT P)
TREE-RING.DEPRECATED:(DEFINE (REMAP-CONSTANT X)
TREE-RING.DEPRECATED:(DEFINE (RECTIFY X)
TREE-RING.DEPRECATED:(DEFINE (RECTIFY-NUMBERS LST)
TREE-RING.DEPRECATED:(DEFINE (SYMBOL<? A B)
TREE-RING.DEPRECATED:(DEFINE (SYMBOL=? A B)
TREE-RING.DEPRECATED:(DEFINE (SYMBOL<=? A B)
TREE-RING.DEPRECATED:(DEFINE (SYMBOL>? A B)
TREE-RING.DEPRECATED:(DEFINE (FACTOR-ORDERING A B)
TREE-RING.DEPRECATED:(DEFINE (FACTOR<? A B)
TREE-RING.DEPRECATED:(DEFINE (FACTOR>? A B)
TREE-RING.DEPRECATED:(DEFINE (FACTOR=? A B)
TREE-RING.DEPRECATED:(DEFINE (SORT-FACTOR! T)
TREE-RING.DEPRECATED:(DEFINE (FIX-FACTORS! T)
TREE-RING.DEPRECATED:(DEFINE (TERM-ORDERING A B) 
TREE-RING.DEPRECATED:(DEFINE (TERM<? A B)
TREE-RING.DEPRECATED:(DEFINE (TERM>? A B)
TREE-RING.DEPRECATED:(DEFINE (TERM=? A B)
TREE-RING.DEPRECATED:(DEFINE (INDEX-IN LST KEY)
TREE-RING.DEPRECATED:(DEFINE (REMAP-TERM F)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TERM T) 
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TERMS X)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-POLYNOMIAL-FACTORS P) P)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-POLYNOMIAL P)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-LABEL T)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-LABELS T)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL=? P Q)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL<? P Q)
TREE-RING.DEPRECATED:(DEFINE (SORT-CHILDREN! T)
TREE-RING.DEPRECATED:(DEFINE (PROBE #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (NODE<? N M)
TREE-RING.DEPRECATED:  (DEFINE (NDL #!REST ARG)
TREE-RING.DEPRECATED:(DEFINE (NODE=? N M)
TREE-RING.DEPRECATED:(DEFINE (LABEL-CONSTANTS P)
TREE-RING.DEPRECATED:(DEFINE (LABEL-IND-FACTORS P)
TREE-RING.DEPRECATED:(DEFINE (CONSTANT-LABEL? P)
TREE-RING.DEPRECATED:(DEFINE (ZERO-TERM? T)
TREE-RING.DEPRECATED:(DEFINE (THE-NON-ZERO-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.DEPRECATED:(DEFINE (THE-NON-ZERO-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.DEPRECATED:(DEFINE (THE-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.DEPRECATED:(DEFINE (THE-ZERO-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.DEPRECATED:(DEFINE (THE-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.DEPRECATED:(DEFINE (THE-NON-ZERO-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.DEPRECATED:(DEFINE (THE-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.DEPRECATED:(DEFINE (THE-CONSTANT-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.DEPRECATED:(DEFINE (TREES-WITH-LABELS TREES LABELS)
TREE-RING.DEPRECATED:(DEFINE (TREES-WITH-SIMILAR-LABELS TREES LABELS)
TREE-RING.DEPRECATED:(DEFINE (REWRITE-CONSTANT-INDETERMINATE X)
TREE-RING.DEPRECATED:(DEFINE (SYMBOLIC-SIGS X)
TREE-RING.DEPRECATED:(DEFINE (MATCHES-SYM-SIG SIG)
TREE-RING.DEPRECATED:(DEFINE (P+ #!REST ARGS)
TREE-RING.DEPRECATED:;;; (DEFINE (_T* A B) ;;;
TREE-RING.DEPRECATED:;;;   (DEFINE (__T* #!REST ARGS) ;;;
TREE-RING.DEPRECATED:(DEFINE (ENSURE-LIST LST)
TREE-RING.DEPRECATED:(DEFINE (T* T1 T2)
TREE-RING.DEPRECATED:  (DEFINE (FIX X) (IF (NOT (PAIR? X)) (LIST X) X))
TREE-RING.DEPRECATED:(DEFINE (@T* X)
TREE-RING.DEPRECATED:(DEFINE (BAD-P2* A B)
TREE-RING.DEPRECATED:(DEFINE (P2* A B)
TREE-RING.DEPRECATED:(DEFINE (P* #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (SP* #!REST ARGS) (APPLY P* (MAP STRING->POLYNOMIAL ARGS)))
TREE-RING.DEPRECATED:(DEFINE (SUBSTITUTE-FACTOR F CODEX)
TREE-RING.DEPRECATED:(DEFINE (SUBSTITUTE-TERM T CODEX)
TREE-RING.DEPRECATED:(DEFINE (SUBSTITUTE-POLYNOMIAL P CODEX)
TREE-RING.DEPRECATED:(DEFINE (EVALUATE-FACTOR F)
TREE-RING.DEPRECATED:(DEFINE (EVALUATE-TERM T)
TREE-RING.DEPRECATED:(DEFINE (EVALUATE-POLYNOMIAL P CODEX)
TREE-RING.DEPRECATED:(DEFINE (STRING->TERM STR #!REST NEG)
TREE-RING.DEPRECATED:(DEFINE (STRING->POLYNOMIAL PSTR)
TREE-RING.DEPRECATED:(DEFINE (POLY-STRING-TERM T FORM)
TREE-RING.DEPRECATED:(DEFINE (N->S N FORM)
TREE-RING.DEPRECATED:(DEFINE (POLY-STRING-POLYNOMIAL P OP CP #!REST LATEX-FRACFORM)
TREE-RING.DEPRECATED:(DEFINE (SYMBOL->POLYNOMIAL SYM)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL->SYMBOL P)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL->STRING P)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL->LATEX-INLINE P)
TREE-RING.DEPRECATED:(DEFINE (POLYNOMIAL->LATEX-DISPLAY P)
TREE-RING.DEPRECATED:(DEFINE (WEIGHT V)
TREE-RING.DEPRECATED:(DEFINE (LABEL V)
TREE-RING.DEPRECATED:(DEFINE (SCALAR-TERM LBL)
TREE-RING.DEPRECATED:(DEFINE (CONTENT N)
TREE-RING.DEPRECATED:(DEFINE (CONTENT2 N) ;; SCORES 1 FOR EACH NON-ZERO LABEL
TREE-RING.DEPRECATED:(DEFINE (CONTENT3 N) ;; SCORES 1 FOR EACH NON-ZERO WEIGHT
TREE-RING.DEPRECATED:(DEFINE (CHILDREN<- #!REST KIDS)
TREE-RING.DEPRECATED:(DEFINE (CHILDREN V)
TREE-RING.DEPRECATED:(DEFINE (CHILD V L)
TREE-RING.DEPRECATED:(DEFINE (UNION #!REST ARGS)  (UNIQUE (APPLY APPEND ARGS)))  ;; MAKES IT NICE AND READABLE FOR SET OPERATIONS
TREE-RING.DEPRECATED:(DEFINE (UNION+ #!REST ARGS)  (APPLY APPEND ARGS))          ;; LIKE UNION, BUT PRESERVES MULTIPLICITY
TREE-RING.DEPRECATED:(DEFINE (INTERSECTION OP SEL #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (INTERSECTION-L*= #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE IDENTICAL
TREE-RING.DEPRECATED:(DEFINE (INTERSECTION-L*~ #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE SIMILAR
TREE-RING.DEPRECATED:(DEFINE (ZEROTREE? T)
TREE-RING.DEPRECATED:(DEFINE (NULL0? X) (OR (NULL? X) (EQUAL? ZEROTREE X)))
TREE-RING.DEPRECATED:(DEFINE (NODE? N)
TREE-RING.DEPRECATED:(DEFINE (NODE2? N)
TREE-RING.DEPRECATED:(DEFINE (NODE3? N)
TREE-RING.DEPRECATED:(DEFINE (SIMPLE-NODE? N)
TREE-RING.DEPRECATED:(DEFINE (UNIQUE-CHILDREN? E)
TREE-RING.DEPRECATED:(DEFINE (UNIQUE-NODE? N)
TREE-RING.DEPRECATED:(DEFINE (CHILDREN? E)
TREE-RING.DEPRECATED:(DEFINE (MAKE2-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING.DEPRECATED:(DEFINE (MAKE3-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING.DEPRECATED:(DEFINE (U-RESTRICTED-TO-V U V) ;; U\V_L
TREE-RING.DEPRECATED:(DEFINE (U-RESTRICTED-TO-NOT-V U V) ;; U\V_L
TREE-RING.DEPRECATED:(DEFINE (U-AND-V U V)
TREE-RING.DEPRECATED:(DEFINE (N-LAMBDA N) ;; THE RELATION USED FOR COLLECTING TERMS
TREE-RING.DEPRECATED:(DEFINE (SIM? U V) ;; SIMILAR NODES HAVE POLYNOMIALS THAT ARE RELATED (NODES OR POLYS)
TREE-RING.DEPRECATED:(DEFINE (EQ-CLASS? S)
TREE-RING.DEPRECATED:(DEFINE (EQ-CLASS-SET? S)
TREE-RING.DEPRECATED:(DEFINE (EQ-CLASS R U) ; EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING.DEPRECATED:(DEFINE (EQ-CLASS^SIGMA S U) ; SUM OF EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING.DEPRECATED:(DEFINE (N-LAMBDA U) ;; SET OF ALL EQUIVALENCE CLASSES IN U (NODES)
TREE-RING.DEPRECATED:(DEFINE (N-LAMBDA^SIGMA U) ; MEMBERS OF ALL EQUIV CLASSES IN U SUMMED
TREE-RING.DEPRECATED:(DEFINE (DEPTH TREE)
TREE-RING.DEPRECATED:(DEFINE (TRIM TREE)
TREE-RING.DEPRECATED:(DEFINE (CARD TREE)
TREE-RING.DEPRECATED:(DEFINE (OVERLAP U V)
TREE-RING.DEPRECATED:(DEFINE (SHADOW U V)
TREE-RING.DEPRECATED:(DEFINE (CANONICAL-LABEL L)
TREE-RING.DEPRECATED:(DEFINE (CHANGE-WEIGHT! TREE LIST-OF-LABELS  VALUE)
TREE-RING.DEPRECATED:(DEFINE (CHANGE-LABEL! TREE LIST-OF-LABELS  VALUE)
TREE-RING.DEPRECATED:(DEFINE (CHANGE-CHILDREN! TREE LIST-OF-LABELS VALUE)
TREE-RING.DEPRECATED:(DEFINE (REPLACE-CHILD! TREE LIST-OF-LABELS  NEW-CHILD) ;; THE NEW CHILD NEED NOT HAVE THE SAME LABEL AS THE OLD ONE
TREE-RING.DEPRECATED:(DEFINE (REVERSE-STRING S)
TREE-RING.DEPRECATED:(DEFINE (FILTER-FORMATTING S)
TREE-RING.DEPRECATED:(DEFINE (STRCAR S) ;; EXPECTS A CHAR, RETURNS A CHAR
TREE-RING.DEPRECATED:(DEFINE (STRCDR S) ;; EXPECTS A STRING, RETURNS A STRING
TREE-RING.DEPRECATED:(DEFINE (STRINDEX S CH)
TREE-RING.DEPRECATED:(DEFINE (!STRINDEX S CH)
TREE-RING.DEPRECATED:(DEFINE (STRSUB STRING OLD NEW)
TREE-RING.DEPRECATED:(DEFINE (STRSUB* STRING OLD NEW)
TREE-RING.DEPRECATED:(DEFINE (TIDY-STRING-ENDS S)
TREE-RING.DEPRECATED:(DEFINE (RECTIFY-TREE-STRING S)
TREE-RING.DEPRECATED:(DEFINE (STRING->CHILDREN C)
TREE-RING.DEPRECATED:(DEFINE (STRING->NODE S)
TREE-RING.DEPRECATED:(DEFINE (STRING->NODE2 S)
TREE-RING.DEPRECATED:(DEFINE (STRING->NODE3 S)
TREE-RING.DEPRECATED:(DEFINE (STRING->NODE3-TAKE1 S)
TREE-RING.DEPRECATED:(DEFINE (L U)
TREE-RING.DEPRECATED:(DEFINE (L* T)
TREE-RING.DEPRECATED:;; (DEFINE (UANDV U V)
TREE-RING.DEPRECATED:;; (DEFINE (TREE* U V)
TREE-RING.DEPRECATED:;; (DEFINE (T** U V)
TREE-RING.DEPRECATED:(DEFINE (NODES-WITH-LABEL L ES)
TREE-RING.DEPRECATED:;; (DEFINE (NORMALISE-CHILDREN S)
TREE-RING.DEPRECATED:(DEFINE (FACTOR-LIST P)
TREE-RING.DEPRECATED:(DEFINE (RELATED? P1 P2)
TREE-RING.DEPRECATED:(DEFINE (RELATED-CHILDREN? C1 C2)
TREE-RING.DEPRECATED:(DEFINE (P-RELATED-S R P SET) ;; R IS THE RELATION, P IS THE THING THAT WE ARE LOOKING FOR RELATIVES OF
TREE-RING.DEPRECATED:(DEFINE (PARTITION-SETS R U V #!REST VERBOSE)
TREE-RING.DEPRECATED:(DEFINE (PARTITION-SET*! R U)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TREE T)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TREE2 T)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TREE3 T)
TREE-RING.DEPRECATED:(DEFINE (NORMALISE-TREE3--OK-AS-FAR-AS-IT-GOES T)
TREE-RING.DEPRECATED:(DEFINE (OPERATOR-CURRY OP LST)
TREE-RING.DEPRECATED:(DEFINE (X-TREE+ X Y) 
TREE-RING.DEPRECATED:(DEFINE (MAKE-PAIRINGS C1 C2) ;; IT EXPECTS THE INPUTS TO BE COMPATIBLE 
TREE-RING.DEPRECATED:(DEFINE (BOXPLUS X Y)
TREE-RING.DEPRECATED:(DEFINE (LESS-ZEROTREE A)
TREE-RING.DEPRECATED:(DEFINE (BOXCROSS P C)
TREE-RING.DEPRECATED:(DEFINE (TREE3+ X Y)
TREE-RING.DEPRECATED:(DEFINE (TREE2+ X Y)
TREE-RING.DEPRECATED:(DEFINE (TREE+ #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (TREE- #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (T/Z T)
TREE-RING.DEPRECATED:(DEFINE (TREE-NORM TREE)
TREE-RING.DEPRECATED:(DEFINE (DISTANCE S T)
TREE-RING.DEPRECATED:(DEFINE (ABSOLUTE-VALUE T)
TREE-RING.DEPRECATED:(DEFINE (TYPE-TESTS X)
TREE-RING.DEPRECATED:(DEFINE (TREE* #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (TREE2* #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (TREE3* #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (TREE-DISTANCE- P Q)
TREE-RING.DEPRECATED:(DEFINE (TREE-DISTANCE P Q)
TREE-RING.DEPRECATED:(DEFINE (TREE->WORDIES T)
TREE-RING.DEPRECATED:(DEFINE (TREE->STRING T #!REST INDENT)
TREE-RING.DEPRECATED:(DEFINE (CHILDREN->STRING ES #!REST INDENT)
TREE-RING.DEPRECATED:(DEFINE (TREE->DISPLAY-STRING T #!REST INDENT)
TREE-RING.DEPRECATED:(DEFINE (MAKE-SPACE N)
TREE-RING.DEPRECATED:(DEFINE (TREE->DISPLAY-STRING% T INDENT)
TREE-RING.DEPRECATED:(DEFINE (TREE->DISPLAY-STRING%% T INDENT)
TREE-RING.DEPRECATED:(DEFINE (CHILDREN->DISPLAY-STRING ES #!REST INDENT)
TREE-RING.DEPRECATED:;; (DEFINE (S* U V)
TREE-RING.DEPRECATED:(DEFINE (RANDOM-DICE N S)
TREE-RING.DEPRECATED:(DEFINE (DNLT T)
TREE-RING.DEPRECATED:(DEFINE (DNLC T)
TREE-RING.DEPRECATED:(DEFINE (TDNL #!REST ARGS)
TREE-RING.DEPRECATED:(DEFINE (TREE-INTERPOLATE T1 T2 PIVOT)
TREE-RING.DEPRECATED:(DEFINE (P-N #!REST ARG)
TREE-RING.DEPRECATED:(DEFINE (RANDOM-POLYNOMIAL-TERM L S E) 
TREE-RING.DEPRECATED:(DEFINE (RANDOM-POLYNOMIAL L S K E)
TREE-RING.DEPRECATED:(DEFINE (RAND-POLY #!REST ARGS)
TREE-RING.DEPRECATED:;;; (DEFINE (RANDOM-TREE3 DEPTH N-TERMS NWEIGHT SYMBOLS MAXEXP TOOMANYKIDS) ;;;
TREE-RING.DEPRECATED:(DEFINE (RNDEL LST)
TREE-RING.DEPRECATED:(DEFINE (MKRND-NODE3% #!REST KINDER)
TREE-RING.DEPRECATED:(DEFINE (MKRND-NODE3 DEPTH NKIDS #!REST VAL)
TREE-RING.DEPRECATED:(DEFINE (TSTDL RCG)
TREE-RING.SCM:(DEFINE (DNL* #!REST ARGS)
TREE-RING.SCM:;(DEFINE (ERROR STR ARG)
TREE-RING.SCM:(DEFINE (S/S? X) (OR (SYMBOL? X) (STRING? X)))
TREE-RING.SCM:(DEFINE (EQUAL*? X Y #!REST Z)
TREE-RING.SCM:(DEFINE (%CROSS2 A B)
TREE-RING.SCM:(DEFINE (CROSS** #!REST ARGS)
TREE-RING.SCM:  (DEFINE (C2 A B)
TREE-RING.SCM:(DEFINE (MAP* MAPPING #!REST ARGS)
TREE-RING.SCM:(DEFINE (SET-CADR! LST BIT)
TREE-RING.SCM:(DEFINE (SET-CADDR! LST BIT)
TREE-RING.SCM:(DEFINE (LIST-INSERT! LST IX EL ) 
TREE-RING.SCM:(DEFINE (LIST-DELETE! LST IX)
TREE-RING.SCM:(DEFINE (SET-WEIGHT! T W)
TREE-RING.SCM:(DEFINE (SET-LABEL! T W)
TREE-RING.SCM:(DEFINE (SET-CHILDREN! T W)
TREE-RING.SCM:(DEFINE (READ-STRING STR)
TREE-RING.SCM:(DEFINE (WRITE-STRING LST)
TREE-RING.SCM:(DEFINE (POWER B E) ;; ALSO DEFINED IN MATHS.SCM
TREE-RING.SCM:;(DEFINE (SQR X) (* X X))
TREE-RING.SCM:(DEFINE (N-ARITY-FROM-2-ARITY OP IDENTITY)
TREE-RING.SCM:(DEFINE (ZERO? X)
TREE-RING.SCM:(DEFINE (TYPE%? X)
TREE-RING.SCM:(DEFINE (TYPE? X)
TREE-RING.SCM:(DEFINE (TYPE? X)
TREE-RING.SCM:(DEFINE (DNL #!REST ARGS) (IF (NULL? ARGS) (DISPLAY "") (LET () (MAP DISPLAY ARGS) (NEWLINE))))
TREE-RING.SCM:(DEFINE (DNL #!REST ARGS) (IF DEBUGGING (APPLY DNL ARGS)))
TREE-RING.SCM:(DEFINE (DDNL #!REST ARGS)
TREE-RING.SCM:(DEFINE (ANDF #!REST ARGS)
TREE-RING.SCM:(DEFINE (ORF #!REST ARGS)
TREE-RING.SCM:(DEFINE (MERGE-SORT L GT?) ;; FROM ROSETTA CODE
TREE-RING.SCM:  (DEFINE (MERGE LEFT RIGHT)
TREE-RING.SCM:  (DEFINE (TAKE L N)
TREE-RING.SCM:(DEFINE (FLATTEN-LIST LST)
TREE-RING.SCM:(DEFINE (FLATTEN-SINGLETONS LST)
TREE-RING.SCM:(DEFINE (UNIQUE LST)
TREE-RING.SCM:;;(DEFINE (!FILTER SELECTOR LST)
TREE-RING.SCM:(DEFINE (PICK-ONLY TYPE X)
TREE-RING.SCM:(DEFINE (LIST-INTERSECTION A B)
TREE-RING.SCM:(DEFINE (LIST-INTERSECTION* #!REST ARGS )
TREE-RING.SCM:(DEFINE (LIST-INTERSECTION% OP SELECTOR A B)
TREE-RING.SCM:(DEFINE (LIST-INTERSECTION%* OP SELECTOR #!REST ARGS )
TREE-RING.SCM:(DEFINE (STRING-HEAD S N)
TREE-RING.SCM:(DEFINE (STRING-TAIL S N)
TREE-RING.SCM:(DEFINE (STRING-CAR S)
TREE-RING.SCM:(DEFINE (STRING-CDR S)
TREE-RING.SCM:(DEFINE (STRING-CONTAINS? STR #!REST TARGETS) ;; (STRING-CONTAINS? "THE QUICK BROWN FOX" "OX" "HEN") ==> #T (STRING-CONTAINS? "THE QUICK BROWN FOX" "OXO" "HEN") ==> #F
TREE-RING.SCM:(DEFINE (LOCATE-SUBSTRING STR SUBSTR)
TREE-RING.SCM:(DEFINE (STRING-REPLACE S T R) ;STRING TARGET REPLACEMENT
TREE-RING.SCM:(DEFINE (STRING-REPLACE* S T R)
TREE-RING.SCM:(DEFINE (STRSPN STR SET)
TREE-RING.SCM:(DEFINE (STRCSPN STR SET)
TREE-RING.SCM:(DEFINE (COLLAPSING-STRTOK STR #!REST SEPARATOR)
TREE-RING.SCM:(DEFINE (STRTOK STR #!REST SEPARATOR)
TREE-RING.SCM:;---- (DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR) 
TREE-RING.SCM:(DEFINE (RECONSTRUCT-STRING STRARRAY #!REST SEPARATOR)
TREE-RING.SCM:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR STR #!REST SEPARATORSTRING)
TREE-RING.SCM:(DEFINE (SIMPLE-SPLIT-STRING-AT-SEPARATOR+ STR #!REST SEPARATORSTRING)
TREE-RING.SCM:(DEFINE (NEXT-SPLIT STR SEPARATORSTRINGS)
TREE-RING.SCM:(DEFINE (SPLIT-STRING-AT-SEPARATORS STR SEPARATORSTRINGS)
TREE-RING.SCM:(DEFINE (SPLIT-STRING-AT-SEPARATORS+ STR SEPARATORSTRINGS)
TREE-RING.SCM:(DEFINE (ERODE-WHITESPACE STRING)
TREE-RING.SCM:(DEFINE (POLY-ZERO? X)
TREE-RING.SCM:(DEFINE (POLYNOMIAL ITEM)
TREE-RING.SCM:(DEFINE (CONSTANT? X) (OR (NUMBER? X) (AND (PAIR? X) (NUMBER? (CAR X)) (NULL? (CDR X)))))
TREE-RING.SCM:(DEFINE (CONSTANT? X) (OR (CONSTANT? X)
TREE-RING.SCM:(DEFINE (VARIABLE? X) (AND (LIST? X) (= 2 (LENGTH X)) (SYMBOL? (CAR X)) (NUMBER? (CADR X))))
TREE-RING.SCM:(DEFINE (FACTOR? X)
TREE-RING.SCM:(DEFINE (TERM? X)
TREE-RING.SCM:(DEFINE (POLYNOMIAL? X)
TREE-RING.SCM:(DEFINE (FLATTEN-CONSTANT P)
TREE-RING.SCM:(DEFINE (REMAP-CONSTANT X)
TREE-RING.SCM:(DEFINE (RECTIFY X)
TREE-RING.SCM:(DEFINE (RECTIFY-NUMBERS LST)
TREE-RING.SCM:(DEFINE (SYMBOL<? A B)
TREE-RING.SCM:(DEFINE (SYMBOL=? A B)
TREE-RING.SCM:(DEFINE (SYMBOL<=? A B)
TREE-RING.SCM:(DEFINE (SYMBOL>? A B)
TREE-RING.SCM:(DEFINE (FACTOR-ORDERING A B)
TREE-RING.SCM:(DEFINE (FACTOR<? A B)
TREE-RING.SCM:(DEFINE (FACTOR>? A B)
TREE-RING.SCM:(DEFINE (FACTOR=? A B)
TREE-RING.SCM:(DEFINE (SORT-FACTOR! T)
TREE-RING.SCM:(DEFINE (FIX-FACTORS! T)
TREE-RING.SCM:(DEFINE (TERM-ORDERING A B) 
TREE-RING.SCM:(DEFINE (TERM<? A B)
TREE-RING.SCM:(DEFINE (TERM>? A B)
TREE-RING.SCM:(DEFINE (TERM=? A B)
TREE-RING.SCM:(DEFINE (INDEX-IN LST KEY)
TREE-RING.SCM:(DEFINE (REMAP-TERM F)
TREE-RING.SCM:(DEFINE (NORMALISE-TERM T) 
TREE-RING.SCM:(DEFINE (NORMALISE-TERMS X)
TREE-RING.SCM:(DEFINE (NORMALISE-POLYNOMIAL-FACTORS P) P)
TREE-RING.SCM:(DEFINE (NORMALISE-POLYNOMIAL P)
TREE-RING.SCM:(DEFINE (NORMALISE-LABEL T)
TREE-RING.SCM:(DEFINE (NORMALISE-LABELS T)
TREE-RING.SCM:(DEFINE (POLYNOMIAL=? P Q)
TREE-RING.SCM:(DEFINE (POLYNOMIAL<? P Q)
TREE-RING.SCM:(DEFINE (SORT-CHILDREN! T)
TREE-RING.SCM:(DEFINE (PROBE #!REST ARGS)
TREE-RING.SCM:(DEFINE (NODE<? N M)
TREE-RING.SCM:  (DEFINE (NDL #!REST ARG)
TREE-RING.SCM:(DEFINE (NODE=? N M)
TREE-RING.SCM:(DEFINE (LABEL-CONSTANTS P)
TREE-RING.SCM:(DEFINE (LABEL-IND-FACTORS P)
TREE-RING.SCM:(DEFINE (CONSTANT-LABEL? P)
TREE-RING.SCM:(DEFINE (ZERO-TERM? T)
TREE-RING.SCM:(DEFINE (THE-NON-ZERO-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.SCM:(DEFINE (THE-NON-ZERO-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.SCM:(DEFINE (THE-INDETERMINATE-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.SCM:(DEFINE (THE-ZERO-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.SCM:(DEFINE (THE-CONSTANT-TERMS X)  ;; APPLIES TO *TERMS*, NOT *FACTORS*
TREE-RING.SCM:(DEFINE (THE-NON-ZERO-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.SCM:(DEFINE (THE-INDETERMINATE-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.SCM:(DEFINE (THE-CONSTANT-FACTORS X)  ;; APPLIES TO *FACTORS*, NOT *TERMS*
TREE-RING.SCM:(DEFINE (TREES-WITH-LABELS TREES LABELS)
TREE-RING.SCM:(DEFINE (TREES-WITH-SIMILAR-LABELS TREES LABELS)
TREE-RING.SCM:(DEFINE (REWRITE-CONSTANT-INDETERMINATE X)
TREE-RING.SCM:(DEFINE (SYMBOLIC-SIGS X)
TREE-RING.SCM:(DEFINE (MATCHES-SYM-SIG SIG)
TREE-RING.SCM:(DEFINE (P+ #!REST ARGS)
TREE-RING.SCM:;;; (DEFINE (_T* A B) ;;;
TREE-RING.SCM:;;;   (DEFINE (__T* #!REST ARGS) ;;;
TREE-RING.SCM:(DEFINE (ENSURE-LIST LST)
TREE-RING.SCM:(DEFINE (T* T1 T2)
TREE-RING.SCM:  (DEFINE (FIX X) (IF (NOT (PAIR? X)) (LIST X) X))
TREE-RING.SCM:(DEFINE (@T* X)
TREE-RING.SCM:(DEFINE (BAD-P2* A B)
TREE-RING.SCM:(DEFINE (P2* A B)
TREE-RING.SCM:(DEFINE (P* #!REST ARGS)
TREE-RING.SCM:(DEFINE (SP* #!REST ARGS) (APPLY P* (MAP POLYNOMIAL ARGS)))
TREE-RING.SCM:(DEFINE (SUBSTITUTE-FACTOR F CODEX)
TREE-RING.SCM:(DEFINE (SUBSTITUTE-TERM T CODEX)
TREE-RING.SCM:(DEFINE (SUBSTITUTE-POLYNOMIAL P CODEX)
TREE-RING.SCM:(DEFINE (EVALUATE-FACTOR F)
TREE-RING.SCM:(DEFINE (EVALUATE-TERM T)
TREE-RING.SCM:(DEFINE (EVALUATE-POLYNOMIAL P CODEX)
TREE-RING.SCM:(DEFINE (STRING->TERM STR #!REST NEG)
TREE-RING.SCM:(DEFINE (STRING->POLYNOMIAL PSTR)
TREE-RING.SCM:(DEFINE (POLY-STRING-TERM T FORM)
TREE-RING.SCM:(DEFINE (N->S N FORM)
TREE-RING.SCM:(DEFINE (POLY-STRING-POLYNOMIAL P OP CP #!REST LATEX-FRACFORM)
TREE-RING.SCM:(DEFINE (SYMBOL->POLYNOMIAL SYM)
TREE-RING.SCM:(DEFINE (POLYNOMIAL->SYMBOL* PLY) ;; THIS WILL HANDLE SYMBOLS WITH EMBEDDED SPACES!
TREE-RING.SCM:(DEFINE (POLYNOMIAL->SYMBOL P)
TREE-RING.SCM:(DEFINE (POLYNOMIAL->STRING P)
TREE-RING.SCM:(DEFINE (POLYNOMIAL->LATEX-INLINE P)
TREE-RING.SCM:(DEFINE (POLYNOMIAL->LATEX-DISPLAY P)
TREE-RING.SCM:(DEFINE (NODE3 A1 A2 CHILDREN)
TREE-RING.SCM:(DEFINE (NODE2 LBL CHILDREN)
TREE-RING.SCM:(DEFINE (CHILDREN2% #!REST ARGS)
TREE-RING.SCM:(DEFINE (CHILDREN3% #!REST ARGS)
TREE-RING.SCM:(DEFINE (CHILDREN% #!REST ARGS)
TREE-RING.SCM:(DEFINE (NODE% #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE-ROOT% #!REST CHILDREN)
TREE-RING.SCM:(DEFINE (WEIGHT V)
TREE-RING.SCM:(DEFINE (LABEL V)
TREE-RING.SCM:(DEFINE (SCALAR-TERM LBL)
TREE-RING.SCM:(DEFINE (CONTENT N)
TREE-RING.SCM:(DEFINE (CONTENT2 N) ;; SCORES 1 FOR EACH NON-ZERO LABEL
TREE-RING.SCM:(DEFINE (CONTENT3 N) ;; SCORES 1 FOR EACH NON-ZERO WEIGHT
TREE-RING.SCM:(DEFINE (CHILDREN<- #!REST KIDS)
TREE-RING.SCM:(DEFINE (CHILDREN V)
TREE-RING.SCM:(DEFINE (CHILD V L)
TREE-RING.SCM:(DEFINE (UNION #!REST ARGS)  (UNIQUE (APPLY APPEND ARGS)))  ;; MAKES IT NICE AND READABLE FOR SET OPERATIONS
TREE-RING.SCM:(DEFINE (UNION+ #!REST ARGS)  (APPLY APPEND ARGS))          ;; LIKE UNION, BUT PRESERVES MULTIPLICITY
TREE-RING.SCM:(DEFINE (INTERSECTION OP SEL #!REST ARGS)
TREE-RING.SCM:(DEFINE (INTERSECTION-L*= #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE IDENTICAL
TREE-RING.SCM:(DEFINE (INTERSECTION-L*~ #!REST ARGS) ;; THE INTERSECTION OF THE SETS IS THE SET OF ELEMENTS WHICH HAVE LABELS WHICH ARE SIMILAR
TREE-RING.SCM:(DEFINE (ZEROTREE? T)
TREE-RING.SCM:(DEFINE (NULL0? X) (OR (NULL? X) (EQUAL? ZEROTREE X)))
TREE-RING.SCM:(DEFINE (NODE? N)
TREE-RING.SCM:(DEFINE (NODE2? N)
TREE-RING.SCM:(DEFINE (NODE3? N)
TREE-RING.SCM:(DEFINE (TREE? N)
TREE-RING.SCM:(DEFINE (TREE+? N)
TREE-RING.SCM:(DEFINE (SIMPLE-NODE? N)
TREE-RING.SCM:(DEFINE (UNIQUE-CHILDREN? E)
TREE-RING.SCM:(DEFINE (UNIQUE-NODE? N)
TREE-RING.SCM:(DEFINE (CHILDREN? E)
TREE-RING.SCM:(DEFINE (MAKE2-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING.SCM:(DEFINE (MAKE3-ZEROTREE D) ;; GENERATES A MEMBER OF THE EQUIVALENCE CLASS OF (0 {})
TREE-RING.SCM:(DEFINE (U-RESTRICTED-TO-V U V) ;; U\V_L
TREE-RING.SCM:(DEFINE (U-RESTRICTED-TO-NOT-V U V) ;; U\V_L
TREE-RING.SCM:(DEFINE (U-AND-V U V)
TREE-RING.SCM:(DEFINE (N-LAMBDA N) ;; THE RELATION USED FOR COLLECTING TERMS
TREE-RING.SCM:(DEFINE (SIM? U V) ;; SIMILAR NODES HAVE POLYNOMIALS THAT ARE RELATED (NODES OR POLYS)
TREE-RING.SCM:(DEFINE (EQ-CLASS? S)
TREE-RING.SCM:(DEFINE (EQ-CLASS-SET? S)
TREE-RING.SCM:(DEFINE (EQ-CLASS R U) ; EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING.SCM:(DEFINE (EQ-CLASS^SIGMA S U) ; SUM OF EQUIV CLASS IN U CORRESPONDING TO S
TREE-RING.SCM:(DEFINE (N-LAMBDA U) ;; SET OF ALL EQUIVALENCE CLASSES IN U (NODES)
TREE-RING.SCM:(DEFINE (N-LAMBDA^SIGMA U) ; MEMBERS OF ALL EQUIV CLASSES IN U SUMMED
TREE-RING.SCM:(DEFINE (DEPTH TREE)
TREE-RING.SCM:(DEFINE (TRIM TREE)
TREE-RING.SCM:(DEFINE (CARD TREE)
TREE-RING.SCM:(DEFINE (OVERLAP U V)
TREE-RING.SCM:(DEFINE (SHADOW U V)
TREE-RING.SCM:(DEFINE (RELATIVE-OVERLAP U V)
TREE-RING.SCM:(DEFINE (RELATIVE-SHADOW U V)
TREE-RING.SCM:(DEFINE (TREE->SCHEMA T) ;; THIS BASICALLY REDUCES THE TREE TO LABELS AND ZEROS EVERYWHERE ELSE
TREE-RING.SCM:(DEFINE (TREE->SCHEMATIC T) ;; THIS BASICALLY REDUCES THE TREE TO LABELS AND ZEROS EVERYWHERE ELSE
TREE-RING.SCM:(DEFINE (HAS-TERM? TRM)
TREE-RING.SCM:(DEFINE (CANONICAL-LABEL L)
TREE-RING.SCM:(DEFINE (CHANGE-WEIGHT! TREE LIST-OF-LABELS  VALUE)
TREE-RING.SCM:(DEFINE (CHANGE-LABEL! TREE LIST-OF-LABELS  VALUE)
TREE-RING.SCM:(DEFINE (CHANGE-CHILDREN! TREE LIST-OF-LABELS VALUE)
TREE-RING.SCM:(DEFINE (REPLACE-CHILD! TREE LIST-OF-LABELS  NEW-CHILD) ;; THE NEW CHILD NEED NOT HAVE THE SAME LABEL AS THE OLD ONE
TREE-RING.SCM:(DEFINE (REVERSE-STRING S)
TREE-RING.SCM:(DEFINE (FILTER-FORMATTING S)
TREE-RING.SCM:(DEFINE (STRCAR S) ;; EXPECTS A CHAR, RETURNS A CHAR
TREE-RING.SCM:(DEFINE (STRCDR S) ;; EXPECTS A STRING, RETURNS A STRING
TREE-RING.SCM:(DEFINE (STRINDEX S CH)
TREE-RING.SCM:(DEFINE (!STRINDEX S CH)
TREE-RING.SCM:(DEFINE (STRSUB STRING OLD NEW)
TREE-RING.SCM:(DEFINE (STRSUB* STRING OLD NEW)
TREE-RING.SCM:(DEFINE (TIDY-STRING-ENDS S)
TREE-RING.SCM:(DEFINE (RECTIFY-TREE-STRING S)
TREE-RING.SCM:(DEFINE (STRING->CHILDREN C)
TREE-RING.SCM:(DEFINE (STRING->NODE S)
TREE-RING.SCM:(DEFINE (STRING->NODE2 S)
TREE-RING.SCM:(DEFINE (STRING->NODE3 S)
TREE-RING.SCM:(DEFINE (STRING->NODE3-TAKE1 S)
TREE-RING.SCM:(DEFINE (L U)
TREE-RING.SCM:(DEFINE (L* T)
TREE-RING.SCM:;; (DEFINE (UANDV U V)
TREE-RING.SCM:;; (DEFINE (TREE* U V)
TREE-RING.SCM:;; (DEFINE (T** U V)
TREE-RING.SCM:(DEFINE (NODES-WITH-LABEL L ES)
TREE-RING.SCM:;; (DEFINE (NORMALISE-CHILDREN S)
TREE-RING.SCM:(DEFINE (FACTOR-LIST P)
TREE-RING.SCM:(DEFINE (RELATED? P1 P2)
TREE-RING.SCM:(DEFINE (RELATED-CHILDREN? C1 C2)
TREE-RING.SCM:(DEFINE (P-RELATED-S R P SET) ;; R IS THE RELATION, P IS THE THING THAT WE ARE LOOKING FOR RELATIVES OF
TREE-RING.SCM:(DEFINE (PARTITION-SETS R U V #!REST VERBOSE)
TREE-RING.SCM:(DEFINE (PARTITION-SET*! R U)
TREE-RING.SCM:(DEFINE (NORMALISE-TREE T)
TREE-RING.SCM:(DEFINE (NORMALISE-TREE2 T)
TREE-RING.SCM:(DEFINE (NORMALISE-TREE3 T)
TREE-RING.SCM:(DEFINE (NORMALISE-TREE3--OK-AS-FAR-AS-IT-GOES T)
TREE-RING.SCM:(DEFINE (OPERATOR-CURRY OP LST)
TREE-RING.SCM:(DEFINE (X-TREE+ X Y) 
TREE-RING.SCM:(DEFINE (MAKE-PAIRINGS C1 C2) ;; IT EXPECTS THE INPUTS TO BE COMPATIBLE 
TREE-RING.SCM:(DEFINE (BOXPLUS X Y)
TREE-RING.SCM:(DEFINE (LESS-ZEROTREE A)
TREE-RING.SCM:(DEFINE (BOXCROSS A B)
TREE-RING.SCM:(DEFINE (TREE3+ X Y)
TREE-RING.SCM:(DEFINE (TREE2+ X Y)
TREE-RING.SCM:(DEFINE (TREE+ #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE- #!REST ARGS)
TREE-RING.SCM:(DEFINE (T/Z T)
TREE-RING.SCM:(DEFINE (TREE-NORM T)
TREE-RING.SCM:(DEFINE (DISTANCE S T)
TREE-RING.SCM:(DEFINE (ABSOLUTE-VALUE T)
TREE-RING.SCM:(DEFINE (TYPE-TESTS X)
TREE-RING.SCM:(DEFINE (TREE* #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE2* #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE3* #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE-DISTANCE- P Q)
TREE-RING.SCM:(DEFINE (TREE-DISTANCE P Q)
TREE-RING.SCM:(DEFINE (TREE->WORDIES T)
TREE-RING.SCM:(DEFINE (TREE->STRING T #!REST INDENT)
TREE-RING.SCM:(DEFINE (CHILDREN->STRING ES #!REST INDENT)
TREE-RING.SCM:(DEFINE (DISPLAY-TREE TREE)
TREE-RING.SCM:(DEFINE (MAKE-SPACE N)
TREE-RING.SCM:(DEFINE (TREE->DISPLAY-STRING T #!REST INDENT)
TREE-RING.SCM:(DEFINE (TREE->DISPLAY-STRING% T INDENT)
TREE-RING.SCM:(DEFINE (TREE->LATEX-DISPLAY-STRING T #!REST INDENT)
TREE-RING.SCM:(DEFINE (TREE->LATEX-DISPLAY-STRING% T INDENT)
TREE-RING.SCM:(DEFINE (CHILDREN->DISPLAY-STRING ES #!REST INDENT)
TREE-RING.SCM:(DEFINE (CHILDREN->LATEX-DISPLAY-STRING ES #!REST INDENT)
TREE-RING.SCM:;; (DEFINE (S* U V)
TREE-RING.SCM:(DEFINE (RANDOM-DICE N S)
TREE-RING.SCM:(DEFINE (DNLT T)
TREE-RING.SCM:(DEFINE (DNLC T)
TREE-RING.SCM:(DEFINE (TDNL #!REST ARGS)
TREE-RING.SCM:(DEFINE (TREE-INTERPOLATE T1 T2 PIVOT)
TREE-RING.SCM:(DEFINE (P-N #!REST ARG)
TREE-RING.SCM:(DEFINE (RANDOM-POLYNOMIAL-TERM L S E) 
TREE-RING.SCM:(DEFINE (RANDOM-POLYNOMIAL L S K E)
TREE-RING.SCM:(DEFINE (RAND-POLY #!REST ARGS)
TREE-RING.SCM:;;; (DEFINE (RANDOM-TREE3 DEPTH N-TERMS NWEIGHT SYMBOLS MAXEXP TOOMANYKIDS) ;;;
TREE-RING.SCM:(DEFINE (RNDEL LST)
TREE-RING.SCM:(DEFINE (MKRND-NODE3% #!REST KINDER)
TREE-RING.SCM:(DEFINE (MKRND-NODE3 DEPTH NKIDS #!REST VAL)
TREE-RING.SCM:(DEFINE (TSTDL RCG)
UNITS.SCM:(DEFINE (YEARS% . N)
UNITS.SCM:(DEFINE (WEEKS% . N)
UNITS.SCM:(DEFINE (DAYS% . N)
UNITS.SCM:(DEFINE (HOURS% . N)
UNITS.SCM:(DEFINE (MINUTES% . N)
UNITS.SCM:(DEFINE (SECONDS% . N)
UNITS.SCM:(DEFINE (M/S% . N)
UNITS.SCM:(DEFINE (M/D% . N)
UNITS.SCM:(DEFINE (EXP-DECAY-RATE PROP PERIOD)
UTILS.SCM:;;(DEFINE (GUESS-TYPE OB)
UTILS.SCM:(DEFINE (SEQ N)
UTILS.SCM:  (DEFINE (RSEQ N) (IF (<= N 0) '() (CONS (- N 1) (RSEQ (- N 1)))))
UTILS.SCM:(DEFINE (EVENS* LST)
UTILS.SCM:(DEFINE (ODDS* LST)
UTILS.SCM:(DEFINE (EVENS LST) (IF (NULL? LST) '() (CONS (CAR LST) (IF (PAIR? (CDR LST)) (EVENS (CDDR LST)) '()))))
UTILS.SCM:(DEFINE (ODDS LST) (IF (NULL? LST) '() (IF (PAIR? (CDR LST)) (EVENS (CDR LST)) '())))
UTILS.SCM:;; (DEFINE (PARTITION-SET SELECTOR SET)
UTILS.SCM:(DEFINE (DOTTED-PAIR? C)
UTILS.SCM:(DEFINE (UNDOT LIST-LIKE)
UTILS.SCM:(DEFINE (APPEND! LST BIT)
UTILS.SCM:(DEFINE (INSERT! LST BIT)
UTILS.SCM:(DEFINE (PARTITION-SET SELECTOR SET)
UTILS.SCM:(DEFINE (SCALET T)
UTILS.SCM:(DEFINE (SCALETS T)
UTILS.SCM:(DEFINE (SCALED-TIME T)
UTILS.SCM:(DEFINE (SCALED-TIME-RATIO T E)
UTILS.SCM:(DEFINE (PP-TO-STRING P)
UTILS.SCM:(DEFINE (ATOM? X)
UTILS.SCM:(DEFINE (CDDDR X) (LIST-REF X 3))
UTILS.SCM:(DEFINE (CADDDR X) (LIST-REF X 3))
UTILS.SCM:(DEFINE (CDDDDR X) (LIST-TAIL X 4))
UTILS.SCM:(DEFINE (CADDDDR X) (LIST-REF X 4))
UTILS.SCM:(DEFINE (CDDDDDR X) (LIST-TAIL X 5))
UTILS.SCM:(DEFINE (CADDDDDR X) (LIST-REF X 5))
UTILS.SCM:(DEFINE (CDDDDDDR X) (LIST-TAIL X 6))
UTILS.SCM:(DEFINE (CADDDDDDR X) (LIST-REF X 6))
UTILS.SCM:(DEFINE (CDDDDDDDR X) (LIST-TAIL X 7))
UTILS.SCM:(DEFINE (CADDDDDDDR X) (LIST-REF X 7))
UTILS.SCM:(DEFINE (CDDDDDDDDR X) (LIST-TAIL X 8))
UTILS.SCM:(DEFINE (CADDDDDDDDR X) (LIST-REF X 8))
UTILS.SCM:(DEFINE (CDDDDDDDDDR X) (LIST-REF X 9))
UTILS.SCM:(DEFINE (SET-CADDDR V X) (LIST-SET! X V 3))
UTILS.SCM:(DEFINE (SET-CADDDDR V X) (LIST-SET! X V 4))
UTILS.SCM:(DEFINE (SET-CADDDDDR V X) (LIST-SET! X V 5))
UTILS.SCM:(DEFINE (SET-CADDDDDDR V X) (LIST-SET! X V 6))
UTILS.SCM:(DEFINE (SET-CADDDDDDDR V X) (LIST-SET! X V 7))
UTILS.SCM:(DEFINE (SET-CADDDDDDDDR V X) (LIST-SET! X V 8))
UTILS.SCM:(DEFINE (LISTIFY A)
UTILS.SCM:(DEFINE (FORCE-LIST L)
UTILS.SCM:(DEFINE (OBJECT-TYPE OB)
UTILS.SCM:(DEFINE (LIST-INTERSECTION A B)
UTILS.SCM:(DEFINE (LIST-INTERSECTION* . ARGS ) 
UTILS.SCM:(DEFINE (RANDOM-LIST-REF LST CLASS-WEIGHTS)
UTILS.SCM:  (DEFINE (PARTIAL-SUMS LST)
UTILS.SCM:(DEFINE (LIST-NTH* LST N) (APPLY (LAMBDA X (MAP (LAMBDA (Y) (LIST-REF Y N)) X)) LST))
UTILS.SCM:(DEFINE (LIST-TRANSPOSE X)
UTILS.SCM:(DEFINE (DUMP-DATA LST . FILE)
UTILS.SCM:(DEFINE (ANDF . ARGS)
UTILS.SCM:(DEFINE (ORF . ARGS)
UTILS.SCM:(DEFINE (CHARACTER? X) (CHAR? X))
UTILS.SCM:(DEFINE (CLOSE F) (CLOSE-PORT F))
UTILS.SCM:(DEFINE (MAKE-LIST% N . INIT)
UTILS.SCM:;;(DEFINE (DNL* . ARGS)
UTILS.SCM:(DEFINE (TXYZ->XY X) (LIST-HEAD (CDR X) 2))
UTILS.SCM:(DEFINE (TXYZ->XYZ X) (CDR X))
UTILS.SCM:(DEFINE (TXYZ->T X) (CAR X))
UTILS.SCM:(DEFINE (TXYZ->X X) (CADR X))
UTILS.SCM:(DEFINE (TXYZ->Y X) (CADDR X))
UTILS.SCM:(DEFINE (TXYZ->Z X) (CADDDR X))
UTILS.SCM:(DEFINE (O->S X) (IF (STRING? X) X (OBJECT->STRING X)))
UTILS.SCM:(DEFINE (RANDOM-LOCATION MINV #!OPTIONAL MAXV)
UTILS.SCM:(DEFINE (NRANDOM MEAN . ITS) ;; VERY DODGEY ... BUT BOG SIMPLE
UTILS.SCM:(DEFINE (SIMPLE-GENERAL-SIGMOID X Y) (/ 1.0 (+ 1.0  (EXP (- (* X Y))))))
UTILS.SCM:;(DEFINE (INVERSE-SIGMOID X)
UTILS.SCM:(DEFINE (GENERAL-BIOMASS-GROWTH-RATE X PEAK WIDTH SCALE Y) 
UTILS.SCM:(DEFINE (DP/DT P DT R K) (* R P (- 1.0 (/ P K))))
UTILS.SCM:(DEFINE (ABORTS . ARGS)
UTILS.SCM:(DEFINE (SIMPLE-LIST? L)	
UTILS.SCM:(DEFINE (ATOM-OR-SIMPLE-LIST? L)	
UTILS.SCM:(DEFINE (NESTED-LIST? L)
UTILS.SCM:(DEFINE (N-ARITY-FROM-2-ARITY OP IDENTITY) ;; ((N-ARITY-FROM-2-ARITY + 0) 1 2 3 4 5 6)) -> 21
UTILS.SCM:(DEFINE (AXIOM-OF-CHOICE SELECTOR LST)
UTILS.SCM:(DEFINE (MAXIMA LST)
UTILS.SCM:(DEFINE (MINIMA LST)
UTILS.SCM:(DEFINE (CROSS2 A B)
UTILS.SCM:(DEFINE (CROSS* . ARGS)
UTILS.SCM:  (DEFINE (CROSS2 A B)
UTILS.SCM:(DEFINE (ITERATION-LIST LST)
UTILS.SCM:(DEFINE (ITERATION-LIST* LST)
UTILS.SCM:(DEFINE (ROTATE-LIST DIRECTION L)
UTILS.SCM:(DEFINE (**-MAP F LL*IST)
UTILS.SCM:(DEFINE (MAP-*-IX F OBLST #!OPTIONAL ITL)
UTILS.SCM:(DEFINE (MAP-**-IX F OBLST)
UTILS.SCM:(DEFINE (ACONS KEY VAL ALIST)
UTILS.SCM:(DEFINE (LIST-SYM-REF L SL S)
UTILS.SCM:(DEFINE (ASSOC-SET! ALIST KEY VAL)
UTILS.SCM:(DEFINE (ASSOC-INSERT ALIST KEY VALUE)
UTILS.SCM:(DEFINE (ASSOC-APPEND ALIST KEY VALUE)
UTILS.SCM:(DEFINE (ASSOC-DELETE ALIST KEY)
UTILS.SCM:(DEFINE (MEMBER-ASSOC K LST)
UTILS.SCM:(DEFINE (ASSQ-SET! ALIST KEY VAL)
UTILS.SCM:(DEFINE (ASSQ-APPEND ALIST KEY VALUE)
UTILS.SCM:(DEFINE (ASSQ-DELETE ALIST KEY)
UTILS.SCM:(DEFINE (MEMBER-ASSQ K LST)
UTILS.SCM:;; (DEFINE (LIST2-ASSQ-SET! K V K2 V2) 
UTILS.SCM:;; (DEFINE (LIST2-ASSQ K V K2) 
UTILS.SCM:(DEFINE (DENULL L)
UTILS.SCM:(DEFINE (FLATTEN L)
UTILS.SCM:(DEFINE (DENULL-AND-FLATTEN L)
UTILS.SCM:;; (DEFINE (DENULL-AND-FLATTEN L)
UTILS.SCM:(DEFINE (MAP-APPLY PROC LST)
UTILS.SCM:(DEFINE (MAKE-LIST* . DIMS)
UTILS.SCM:(DEFINE (MAKE-LIST** DIMS DEFVAL) ;; THIS EXPECTS DEFVAL TO EITHER BE A "THING" OR A PROCEDURE OF NO ARGUMENTS
UTILS.SCM:(DEFINE (DEPTH* L)
UTILS.SCM:(DEFINE (LENGTH* L)
UTILS.SCM:;;(DEFINE (SIMPLE-LIST? LST)
UTILS.SCM:(DEFINE (MAP% PROC LIST* . D) ;; PROC IS OF THE FORM (LAMBDA (LISTVAL INDEX DEEPNESS) ...)
UTILS.SCM:(DEFINE (UNIQUE? L)
UTILS.SCM:(DEFINE (UNIQ? L)
UTILS.SCM:(DEFINE (UNIQ LST) ;; RETURNS THE UNIQUE ELEMENTS W.R.T. EQ?: SHOULD BE SORTED
UTILS.SCM:(DEFINE (UNIQUE LST) ;; RETURNS THE UNIQUE ELEMENTS W.R.T. EQUAL?: SHOULD BE SORTED
UTILS.SCM:(DEFINE (UNIQUE* LST) ;; RETURNS THE UNIQUE ELEMENTS W.R.T. "MEMBER": NEED NOT BE SORTED
UTILS.SCM:(DEFINE (SYMBOL->STRINGN K)
UTILS.SCM:(DEFINE (STRING->SYMBOLN K)
UTILS.SCM:(DEFINE (NOT-MEMBER LST) (LAMBDA (X) (NOT (MEMBER X  LST))))
UTILS.SCM:(DEFINE (NOT-MEMQ LST) (LAMBDA (X) (NOT (MEMQ X  LST))))
UTILS.SCM:(DEFINE (STRING->SYMBOL-LIST STR)
UTILS.SCM:;;; (DEFINE (RANGE MIN MAX STEP)
UTILS.SCM:(DEFINE (LIST-SET! L I V)
UTILS.SCM:(DEFINE (LIST-SET-CDR! L I V)
UTILS.SCM:(DEFINE (LIST-REF*? LST IX)
UTILS.SCM:;;; (DEFINE (LIST-REF* LST IX)
UTILS.SCM:(DEFINE (LIST-REF* LST IX)
UTILS.SCM:(DEFINE (LIST-SET*! LST IX VV)
UTILS.SCM:(DEFINE (GENERATE-ITERATION-LIST L)
UTILS.SCM:(DEFINE (LIST-HEAD THE-LIST K)
UTILS.SCM:(DEFINE (REMOVE-ELEMENT OBJ LST)
UTILS.SCM:(DEFINE (@NORM V)
UTILS.SCM:(DEFINE (UNIT V)
UTILS.SCM:(DEFINE (CENTROID LST)
UTILS.SCM:(DEFINE (INTERSECTION-OF-TWO-CIRCLES D R R) ;; R AND R ARE THE RADII, D IS THE DISTANCE
UTILS.SCM:(DEFINE (DECAY DISTANCE DISTANCE_DECAY NOTIONAL_RADIUS CLIP)
UTILS.SCM:(DEFINE (SYMMETRIC-DECAY DIST DD1 NR1 CLIP1 DD2 NR2 CLIP2)
UTILS.SCM:(DEFINE (OVERLAP-DECAY DIST DD1 NR1 CLIP1 DD2 NR2 CLIP2)
UTILS.SCM:(DEFINE (WEIGHTED-SYMMETRIC-DECAY DIST DD1 NR1 CLIP1 DD2 NR2 CLIP2)
UTILS.SCM:(DEFINE (PRJ-Z=0 LOC)
UTILS.SCM:(DEFINE (PLANE COEFF)
UTILS.SCM:(DEFINE (PNO N . K)
UTILS.SCM:(DEFINE (STRING-CONTAINS? STR . TARGETS) ;; (STRING-CONTAINS? "THE QUICK BROWN FOX" "OX" "HEN") ==> #T (STRING-CONTAINS? "THE QUICK BROWN FOX" "OXO" "HEN") ==> #F
UTILS.SCM: (DEFINE (STRSPN STR SET)
UTILS.SCM: (DEFINE (STRCSPN STR SET)
UTILS.SCM: (DEFINE (COLLAPSING-STRTOK STR . SEPARATOR)
UTILS.SCM: (DEFINE (STRTOK STR . SEPARATOR)
UTILS.SCM: (DEFINE (RECONSTRUCT-STRING STRARRAY . SEPARATOR)
UTILS.SCM: (DEFINE (DFS NODE TARGET NODEMAP CARNODE CDRNODE)
UTILS.SCM: (DEFINE (DFS-PATH NODE TARGET NODEMAP CARNODE CDRNODE)
UTILS.SCM: (DEFINE (BFS-LIST KEY LIST-OF-LISTS)
UTILS.SCM: (DEFINE (BFS KEY LIST-OF-LISTS UNWRAPPER)
UTILS.SCM: (DEFINE (HMS->H T)
UTILS.SCM: (DEFINE (GLOG B E) (/ (LOG E) (LOG B)))
UTILS.SCM:;;;  (DEFINE (POWER B E)
UTILS.SCM: (DEFINE (GEXP B E) 
UTILS.SCM:(DEFINE (MAKE-SEQUENCE GEN M MX . STEP)
UTILS.SCM:(DEFINE (CAPTURE-STRING-FROM THUNK)
UTILS.SCM: (DEFINE (LOAD-LINES-FROM-PORT F)
UTILS.SCM:(DEFINE (CAPTURE-LINES-FROM THUNK)
UTILS.SCM: (DEFINE (LOAD-LIST-FROM-PORT F)
UTILS.SCM:(DEFINE (CAPTURE-LIST-FROM THUNK)
UTILS.SCM: (DEFINE (LOAD-FLAT-LIST-FROM-PORT F)
UTILS.SCM:(DEFINE (CAPTURE-FLAT-LIST-FROM THUNK)
WILDMATCH.SCM:;;; (DEFINE (DNL . LST)  ***
WILDMATCH.SCM:;;; (DEFINE (DNL* . LST)  ***
WILDMATCH.SCM:(DEFINE (TAIL L N)
WILDMATCH.SCM:(DEFINE (LETTER? Z)
WILDMATCH.SCM:(DEFINE (LOWERCASE? Z)
WILDMATCH.SCM:(DEFINE (UPPERCASE? Z)
WILDMATCH.SCM:(DEFINE (DIGIT? Z)
WILDMATCH.SCM:(DEFINE (SPACE? Z)
WILDMATCH.SCM:(DEFINE (PUNCTUATION? Z)
WILDMATCH.SCM:(DEFINE (MAKE-STRING-WILDCARD-MATCH . CHAR=)
WILDMATCH.SCM:(DEFINE (WILDMATCH PATTERN STRING)
WILDMATCH.SCM:(DEFINE (WILDMATCH-CI PATTERN STRING)
WPARSE.SCM:;;;;   (DEFINE (WMATCH PATTERN INSTANCE) ...)
WPARSE.SCM:;;;;   (DEFINE (WNMATCH PATTERN INSTANCE) ...)
WPARSE.SCM:;;;;   (DEFINE (HARD-WMATCH PATTERN INSTANCE . HMV) ...)
WPARSE.SCM:;;;;   (DEFINE (HARD-WNMATCH PATTERN INSTANCE . HMV) ...)
WPARSE.SCM:;;;;   (DEFINE (WPARSE PATTERN INSTANCE) ...)
WPARSE.SCM:;;;;   (DEFINE (WNPARSE PATTERN INSTANCE) ...)
WPARSE.SCM:;;;;   (DEFINE (STRING->SYMBOL-LIST STR) ...)
WPARSE.SCM:(DEFINE (WMATCH PATTERN INSTANCE)
WPARSE.SCM:(DEFINE (WNMATCH PATTERN INSTANCE)
WPARSE.SCM:(DEFINE (HARD-WMATCH PATTERN INSTANCE . HMV)
WPARSE.SCM:  (DEFINE (INTERNAL-WMATCH PATTERN INSTANCE)
WPARSE.SCM:(DEFINE (HARD-WNMATCH PATTERN INSTANCE . HMV)
WPARSE.SCM:  (DEFINE (INTERNAL-WNMATCH PATTERN INSTANCE)
WPARSE.SCM:(DEFINE (WPARSE PATTERN INSTANCE)
WPARSE.SCM:  (DEFINE (ADD-TO-THE-LIST PATTERN INSTANCE)
WPARSE.SCM:  (DEFINE (INNER-PARSER INNER-PATTERN INNER-INSTANCE)
WPARSE.SCM:(DEFINE (WNPARSE PATTERN INSTANCE)
WPARSE.SCM:  (DEFINE (ADD-TO-THE-LIST PATTERN INSTANCE)
WPARSE.SCM:  (DEFINE (INNER-PARSER INNER-PATTERN INNER-INSTANCE)
WPARSE.SCM:(DEFINE (STRING->SYMBOL-LIST STR)
