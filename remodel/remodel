; -*- mode: scheme; -*-
"
    Copyright 2017 Randall Gray

    This file is part of Remodel.

    Remodel is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Remodel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Remodel.  If not, see <http://www.gnu.org/licenses/>.
"
;; I use emacs with the scheme-mode, so there are a number of comments
;; that *mean things* to emacs, and make work on the code easier, such
;; as syntax highlighting, integration with scheme implementations and
;; probably a lot of things I haven't found out about.


;; This is the file you load into your scheme interpreter (gambit,
;; usually) to run a Remodel simulation.  Your model ought to be
;; defined in a file with the name found in the variable

(define model-configuration "model-configuration.scm")

;; and should have roughly the same sort of information found in the
;; file "example-model.scm" which should be in the source directory.



;; Omit the following or adjust them for local conditions, they are
;; needed for SLIB

;; (setenv "GAMBIT_IMPLEMENTATION_PATH" "/usr/local/Gambit")
;; (setenv "SCHEME_LIBRARY_PATH" "/usr/share/slib/")

;; SLIB can be a bit of a devil to set up.  You need to run something like
;;
;;      # gambit
;;      > (load "/usr/lib/gambit-c/gambit.init")
;;      > (load "mklibcat.scm")
;;
;; when you are installing it. The important thing here is that the
;; SCHEME_LIBRARY_PATH is where SLIB is located and the
;; *_IMPLEMENTATION_PATH is where the scheme implementation's files
;; are.


;-- --------------- Load parameters from the parameters directory -------




;; Loaded before everything else -- this provides some additional infra 
(load "preamble.scm") 

;(load 'verbose) ;; comment this out to make it quieter

(define (sym->scm x) (let ((fn (string-append (symbol->string x) ".scm")))
							  ;;(display fn)(newline)
							  fn))

(define slib-gambit.init "/usr/share/slib/gambit.init")
(define SLIB #f)

(include "remodel-framework")  ; Probably not necessary, but here as an example

;;; This is chock full of macros.  Macros need to be *included* in basically every file
;;; Gambit's define-macro only creates syntax rewriters that apply to the module (file)
;;; *currently* being processed.  The reason we use these macros  is that we can build in 
;;; the extra bits that support the agents and keep things consistent.


(define all-support-files-in-load-order
  (append
	;; basic libraries
	;;;;(map sym->scm '(sort wildmatch utils timer tree-ring kdebug model-flags sclos abstract-register))
	(map sym->scm '(utils constants units maths   matrix integrate basic-population tree-ring ))
	(map sym->scm '(papersizes postscript glyphs remodel-ancilliaries output-mappings sort))
	;; This loads the extensions to the class system that provide less arcane access
	(map sym->scm '(sclos+extn wildmatch timer model-flags kdebug))
	;; final bits of infrastructure: 
	;; load the basic utilities postscript should (logically) come after
	;; the mathematical files ... it uses matrices and such.  
	;; Since the above are bodies of code used in other projects as well,
	;; we also load the Remodel specific file below which defines things
	;; that are project specific.
	(map sym->scm '(abstract-register model-flags))

	;;(load "support.o1")
	))



(define all-classes-in-load-order
  (append
	(map sym->scm '(model-configuration remodel-declarations remodel-classes)) ;; this provides very simple 'behaviours' and interactions
	(map sym->scm '(introspection-classes monitor-classes log-classes)) ;; classes which probe the state of other agents
	(map sym->scm '(landscape-classes plant-classes animal-classes)) ;; main players
	(map sym->scm '(remodel-wrappers remodel-methods))  ;; provides methods for things common to all participants 
	
	(map sym->scm '(remodel-defaults debugging-flags)) ;; these must come after the basic infrastructure is there.

	;; We want to load a single declarations file....(for-each load (map sym->scm '(remodel-wrappers declarations remodel-methods)))

	(map sym->scm '(introspection-methods monitor-methods log-methods))
	;; the introspection methods have special abilities to probe other
	;; agents at particular times

	(map sym->scm '(landscape-methods oak plant-methods animal-methods))
	;; These implement the flora and fauna

	(map sym->scm '(assessment-methods))
	;; Assessement agents look at how things are configured with respect to the state
	;; of the pertinent agents and the system as a whole, they may be able to trigger changes of representation.

	))

(dnl* "loading support:" all-support-files-in-load-order)
(map load all-support-files-in-load-order)

(dnl* "loading classes:" all-classes-in-load-order)
(map load all-classes-in-load-order)

;; The kernel always comes after the agent classes, precedence breaks
;; if you try and load it too early.

(load "kernel.scm") ;(load "kernel.o1")
" The kernel manages the multiplexing of the active agents in the
system. This is accomplished using a priority queue.  The kernel code
keeps track of 'live' agents, agents which have been 'terminated' and
agents which are 'dead' but not terminated.  The distinction between
'dead' and 'terminated' is that 'dead' things might still play a role
in the simulation as habitat or food.  'terminated' agents are removed
at the earliest opportunity.

The kernel provides communication channels between agents -- most
inter-agent communication happens (or may happen) through a call to
the kernel.  It also is responsible for introducing new agents --
usually created by other agents by reproduction -- and the mechanisms
which support migration between representations.
"

(load "remodel-flags.scm") ;; Kernel flags, kdebug/kdebug?
									;; messages/code and other global flags
(load "parameters.scm") ;; code to handle the parameter files 


;; Mention if slib is loaded -- slib is fantastic, get it if you don't have it!
(if SLIB (dnl* "*** SLIB is present ***"))


;-- Configure the informational output (e.g. for debugging)

;(enable-timers)
;(disable-timers)

(case 'full
  ((full)
	(kdebug-development! #t) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #t) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #t) ;; use wildcard tests (slower)
	)
  ((full/no-wildcards)
	(kdebug-development! #t) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #t) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #f) ;; use wildcard tests (slower)
	)
  ((record)
	(kdebug-development! #t) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #f) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #t) ;; use wildcard tests (slower)
	)
  ((record/no-wildcards)
	(kdebug-development! #t) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #f) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #f) ;; use wildcard tests (slower)
	)
  ((production)
	(kdebug-development! #f) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #f) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #f) ;; use wildcard tests (slower)
	)
  (else
	(kdebug-development! #t) ;; if #t bypass all kdebug bits (they can be slow to process)
	(kdebug-message-state #f) ;; if #f this suppresses the messages, kdebug? still works
	(kdebug-wildcards! #f) ;; use wildcard tests (slower)
	))

	
(clear-kdebug-msg-tags)

(add-kdebug-msg-tag 'emit-page)
(add-kdebug-msg-tag 'page-preamble)
(add-kdebug-msg-tag 'page-epilogue)
(add-kdebug-msg-tag 'log-data)
(add-kdebug-msg-tag 'chaintrack)

;(define kdebug? (lambda x #f)) ;; This shorts it out as rapidly as possible.
;(define kdebug kdebug?)        ;; We might later convert it to a macro that just "disappears"

;(add-kdebug-msg-tag 'logger-redundancy-check)
;(add-kdebug-msg-tag 'B.exemplarii)
;(add-kdebug-msg-tag 'fruit)
;(add-kdebug-msg-tag 'seeds)
;(add-kdebug-msg-tag 'run)
;(add-kdebug-msg-tag 'PSsst)

;;(add-kdebug-msg-tag 'q-manipulation)
;;(add-kdebug-msg-tag 'track-run-agent)
;;(add-kdebug-msg-tag 'run-agent)
;;(add-kdebug-msg-tag 'run-agent-result)
;;(add-kdebug-msg-tag 'run)
;;(add-kdebug-msg-tag 'running)
;;(add-kdebug-msg-tag 'temporal-check)
;;(add-kdebug-msg-tag 'passing-control-to-model)


;(debugkdebug #t)
;(debugkdebug #f)


;-- --------------- Load parameters from the parameters directory -------

;; This should be the first thing in a model configuration file after
;; the framework is loaded, and a few order-dependent things are set.
(load-parameter-set "parameters") ;; params is the directory which
											 ;; contains the parameter files

;-- Global data ---------------------------------------------------------
;========================================================================

;-- Set kernel flags ----------------------------------------------------

;; The kernel will emit messages (with kdebug) which have a label which
;; matches something in the kdebug-messages list

;(set! kdebug-messages (append '(*) kdebug-messages))

;; Indicate which agents are "nested"; as an example patches may be
;; present either as independent things or as components within a
;; habitat

;(set! nested-agents '(nested-habitat)) ;; No, run simply for the moment

;(add-kdebug-msg-tag 'introspection)
;(add-kdebug-msg-tag 'log-*)




;-- load the specific model configuration ------------------------------------------------


(define startinittime #f)
(define endinittime #f)
(define startpreptime #f)
(define endpreptime #f)
(define startqueuetime #f)
(define endqueuetime #f)
(define finished #f)

;; (process-times) returns elapsed time, this lets us see how long initialisation takes
(set! startinittime (process-times)) 

"The following code takes the list of registered submodels and loads any files they may be 
dependent on.  Loggers must be loaded after the other submodels, so we take two passes."


(load "model-configuration.scm") ;; The actual model (rather than the supporting framework)
                            ;; is loaded here
;;(load "sm.scm")

(set! endinittime (process-times))

(define Dunnit #f)
(define *dunnit* #f)

(define final-Q 'not-run-yet)

(random-source-randomize! default-random-source)

(define (doit q #!rest n)
  (set! Dunnit (lambda () (shutdown-agents q)))
  (set! n (if (pair? n) (car n) 1))
  (if (not *dunnit*)
		(begin
		  (dnl* "Prepping")
		  (set! startpreptime (process-times))
		  (prep-agents q start end)
		  (set! endpreptime (process-times))
		  (set! *dunnit* 0))
		)

  (set! startqueuetime (process-times))
  (set! final-Q (queue *dunnit* (+ *dunnit* n) (if (pair? final-Q) final-Q q)))
  (set! endqueuetime (process-times))

  (set! *dunnit* (+ *dunnit* n))
  )


;; Run till end without pause.  If you are a penguin, run without paws.
(define (Doit q #!optional nend)
  (if nend (set! end (* nend weeks)))
  (display "Ok.\n")
  (let ((state (kdebug-message-state))
		  )
	 (kdebug-message-state #f)

	 (if #f
		  (check-service-data-lists service-name-list
											 service-type-list
											 service-eqn-sym-list))
	 (dnl* "Prepping")
	 (set! startpreptime (process-times))
	 (prep-agents q start end)
	 (set! endpreptime (process-times))
	 (dnl* "Running")
	 
	 (set! startqueuetime (process-times))
	 (set! final-Q (queue start end q))
	 (set! endqueuetime (process-times))
	 (kdebug-message-state state)
	 
	 (if #f
		  (dnl* "Remember to run (shutdown-agents Q)")
		  (shutdown-agents Q))
	 )
  )

(define (cputime-entry vec)
  (f64vector-ref vec 0))
(define (systime-entry vec)
  (f64vector-ref vec 1))
(define (realtime-entry vec)
  (f64vector-ref vec 2))
  


(define (times)
  (let ((sicpu (cputime-entry startinittime))
		  (eicpu (cputime-entry endinittime))
		  (spcpu (cputime-entry startpreptime))
		  (epcpu (cputime-entry endpreptime))
		  (sqcpu (cputime-entry startqueuetime))
		  (eqcpu (cputime-entry endqueuetime))
		  (sireal (realtime-entry startinittime))
		  (eireal (realtime-entry endinittime))
		  (spreal (realtime-entry startpreptime))
		  (epreal (realtime-entry endpreptime))
		  (sqreal (realtime-entry startqueuetime))
		  (eqreal (realtime-entry endqueuetime))
		  )
	 (dnl* "Initialisation took   " (- eicpu sicpu) "cpu seconds")
	 (dnl* "Agent prep took       " (- epcpu spcpu) "cpu seconds")
	 (dnl* "Running the queue took" (- eqcpu sqcpu) "cpu seconds")

	 (dnl* "Initialisation took   " (- eireal sireal) "real seconds")
	 (dnl* "Agent prep took       " (- epreal spreal) "real seconds")
	 (dnl* "Running the queue took" (- eqreal sqreal) "real seconds")
	 ))



;;======================================================================

(dnl "Run with (Doit Q) to run from the start to the end\n")
(dnl "Run with (doit Q n) to run for n weeks")
(dnl "             so you can run the next step in a similar fashion\n")
(dnl "Close up shop with (shutdown-agents Q) -- this closes files and things.")
(dnl "Runtime data can be printed with (times), more detailed data comes with (timer-report)")


(display "Loaded: ")
(apply dnl* (map (lambda (x) (slot-ref x 'name)) Q))

;-  The End 


;;; Local Variables:
;;; mode: scheme
;;; outline-regexp: ";-+"
;;; comment-column:0
;;; comment-start: ";;; "
;;; comment-end:"" 
;;; End:
