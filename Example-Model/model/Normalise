#!/usr/bin/gsi -:d-

(define enthusiasm 'mild)

(case (enthusiasim)
((mild)
	(define Z "nitialize")  ;; typically only gets the word initialise 
	(define S "nitialise"))
((keen)	
	(define Z "ialize")     ;; also collects things like specialize
   (define S "ialise"))
((rabid)
   (define Z "alize")      ;; as above but moreso.....
   (define S "alise")))
	

;; ALL files in the code base must be included here for normali[sz]e to know about them
(define code-base '("framework" "animal-classes.scm"
"animal-declarations.scm" "animal-methods.scm" "animal-notes.scm"
"basic-population.scm" "constants.scm" "declarations.scm"
"diffeq-classes.scm" "diffeq-declarations.scm" "diffeq-methods.scm"
"domain.scm" "framework-classes.scm" "framework-declarations.scm"
"framework-flags.scm" "framework-methods.scm" "framework.scm"
"framework-wrappers.scm" "generate-param-file.scm" "integrate.scm"
"introspection-classes.scm" "introspection-methods.scm" "kdnl.scm"
"kernel.scm" "landscape-classes.scm" "landscape-declarations.scm"
"landscape-methods.scm" "landscape-notes.scm" "loadem.scm"
"load-parameters.scm" "log-classes.scm" "log-declarations.scm"
"log-methods.scm" "maths.scm" "matrix.scm" "model-classes.scm"
"model-flags.scm" "model-methods.scm" "monitor-classes.scm"
"monitor-declarations.scm" "monitor-methods.scm" "parameters.scm"
"plant-classes.scm" "plant-declarations.scm" "plant-methods.scm"
"postscript.scm" "preamble.scm" "process-classes.scm" "sclos+extn.scm"
"sclos.scm" "smart-load.scm" "sort.scm" "statsf.scm" "support-lib.scm"
"tbl.scm" "tree-ring.scm" "tree-ring-WLC.scm" "units.scm" "utils.scm"
"model" 
))

(define (list-head l n)
  (if (<= n 0) '() (cons (car l) (list-head (cdr l) (- n 1)))))


(define (process-file f from to)
  (let ((wrectify (string-append "sed -e s/" from "/" to "/g <" f " > /tmp/" f))
		  (stand-aside (string-append "mv " f " " f "." from))
		  (copy-fixes (string-append "mv /tmp/" f " ./" f))
		  )
	 (shell-command wrectify)
	 (shell-command stand-aside)
	 (shell-command copy-fixes))
  )


(let* ((prg (list->string (reverse (list-head (reverse (string->list (car (command-line)))) 9))))
		 (from (if (string-ci=? prg "normalize") S Z))
		 (to (if (string-ci=? prg "normalize") Z S))
		 )
  (for-each
	(lambda (f) 
	  (process-file f from to))
	code-base))

"
#!/bin/xs --
if {~ $#* 0 1 2} {
	echo 'usage: search-replace fromstring tostring file...'
} else {
	from = $1
	to = $2
	files = `{/usr/bin/find $*(3 ...) -maxdepth 0 -type f} #`

	for f ($files) {
		n = `{basename $f} #`
		tf = /tmp/$n^.tmp.^$pid
		if {access $f} {
			sed -e 's@'^$from^'@'^$to^'@g' < $f > $tf 
			if {test `{wc -c < $tf} -ne 0} { #`
				mv $tf $f
			} else {
				rm -f $tf
			}
		}
	}
}
"
