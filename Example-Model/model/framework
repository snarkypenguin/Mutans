;-  Identification and Changes

;--
;	framework -- Written by Randall Gray 
;	Initial coding: 
;		Date: 2012.11.12
;
;	History:
;


;;; #|
;;; The code in this file is supposed to make things a little easier.

;;;
;;;  This model framework uses SCLOS by Gregor Kiczales, and released
;;;  by Xerox Corp. in 1992. None of the code from sclos.scm has been 
;;;  included in the other files which form the modelling framework.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; This file *must* be included, not loaded. ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;;; |#


;-  Code 

;; See also Kiczales, Gregor; Jim des Rivieres; Daniel G. Bobrow (July
;; 30, 1991). The Art of the Metaobject Protocol. The MIT Press. ISBN
;; 978-0262610742.


(include "sclos.scm")


(define-macro (with-exit name . body)
  `(call-with-current-continuation
    (lambda (,name) ,@body)))

(define-macro (state-variables . lst) `'(,@lst))
;; This makes it clear when classes are defining state vars

(define-macro (no-state-variables) `'())
;; This makes it clear when classes are defining NO state vars

(define-macro (inherits-from . iflst) `(list ,@iflst))

;; Support for the "isa?" calls and for a mapping from the class
;; object to a name

(define-macro (register-class cname)
  `(class-register 'add ,cname ',cname))


;; Remember, if you try to unquote classtype without splicing, the
;; interpreter tries to evaluate it.

;; cpl... class precedent list
(define-macro (isa? self . classtype)
  `(let ((ancestors (class-cpl (class-of ,self))))
	  (if (apply orf
					 (map (lambda (x) (member x ancestors))
							(list ,@classtype))) 
			#t #f)
	  )
  )

(define-macro (register-class cname)
  `(class-register 'add ,cname ',cname))


(define-macro (declare-method name descr . otherstuff)
  `(define ,name 
	  (let ((g (make-generic)))
		 (generic-register 'add g ',name)
		 g)))
		 
(define-macro (default-object-initialization name . otherstuff)
  (if (null? otherstuff)
		`(add-method
		  initialize
		  (make-method (list ,name)
							(lambda (initialize-parent self args)
							  (initialise self '())
							  ;; call "parents" last to make the
							  ;; initialisation list work
							  (initialize-parent) 
							  )))
		`(add-method
		  initialize
		  (make-method (list ,name)
							(lambda (initialize-parent self args)
							  (initialise self (list ,@otherstuff))
							  ;; call "parents" last to make the
							  ;; initialisation list work
							  (initialize-parent) 
							  )))
  
  ))


(define-macro (default-initialization name . otherstuff)
  (if (null? otherstuff)
		`(add-method
		  initialize
		  (make-method (list ,name)
							(lambda (initialize-parent self args)
							  (initialise self '())
							  ;; call "parents" last to make the
							  ;; initialisation list work
							  (initialize-parent) 
							  )))
		`(add-method
		  initialize
		  (make-method (list ,name)
							(lambda (initialize-parent self args)
							  (initialise self (list ,@otherstuff))
							  ;; call "parents" last to make the
							  ;; initialisation list work
							  (initialize-parent) 
							  )))
  
  ))


;; This works like so:
;;(model-method <parent1> (methname) body)
;;(model-method <parent1> (methname arg1 . rest) body)
;;(model-method <parent1> (methname . rest) body)
;;(model-method (<parent1>) (methname) body)
;;(model-method (<parent1>) (methname arg1 arg2) body)
;;(model-method (<parent1> <parent2>) (methname) body)
;;(model-method (<parent1> <parent2>) (methname arg1 arg2..) body)
;;(model-method (<parent1>) (methname arg1 arg2 . rest) body)
;;(model-method (<parent1> <parent2>) (methname arg1 arg2 . rest) body)

;; "(????-parent)" can be used to invoke the parent methods in the
;; body, where ???? is the value of methname so for a method called
;; "grok" you would use "grok-parent" to invoke the parent method
;; "self" is the name of the agent within the body of the method the
;; state variables are not available but you can use "my" and
;; "set-my!" or "slot-ref" and "slot-set!"

(define-macro (object-method . madness)
  ;; Call like (object-method classname (mname * margs) . body) where
  ;;   the margs doesn't include the call-parent-method and 'self' is
  ;;   the placeholder
  (if (< (length madness) 3)
		(error "object-method: bad arguments to method call " madness))

  (if (not (and (pair? (cadr madness)) (symbol? (caadr madness)) ))
		(error "method: bad (mname args...) in (method ...) "
				 (caadr madness)))

  (if (not (eq? (cadadr madness) 'self))
		(error "object-method: missing 'self' placeholder in definition "
				 (caadr madness)))

  (let ((classlst (if (list? (car madness))
							 (car madness)
							 (list (car madness))))
		  (mname (caadr madness))
		  (star (cadadr madness))
		  (margs (cddadr madness))
		  (body (cddr madness))
		  )
	 `(add-method
		,mname
		(make-method
		 (list ,@classlst) 
		 (lambda (,(string->symbol
						(string-append
						 (symbol->string mname) "-parent")) self ,@margs) 
			(let ((my (lambda (x) (slot-ref self x)))
					(set-my! (lambda (x y) (slot-set! self x y)))
					)
			  ,@body)
			)
		 )
		)
	 )
  )



;; "(parent-body)" can be used to invoke the parent's body --- sclos
;; handles any arguments that might be needed: "self" is the name of
;; the agent within the body code "t" is the current model time dt is
;; the requested dt the state variables are not directly available --
;; use "my" or "set-my!", "slot-ref" or "slot-set!"




(define-macro (model-method . madness)
  ;; Call like (model-method classname (mname * margs) . body) where
  ;; the margs doesn't include the call-parent-method and 'self' is
  ;; the placeholder
  (if (< (length madness) 3)
		(error "model-method: bad arguments to method call " madness))
  (if (not (and (pair? (cadr madness)) (symbol? (caadr madness)) ))
		(error "method: bad (mname args...) in (method ...) "
				 (caadr madness)))
  (if (not (eq? (cadadr madness) 'self))
		(error "model-method: missing 'self' placeholder in definition "
				 (caadr madness)))

  (let ((classlst (if (list? (car madness))
							 (car madness)
							 (list (car madness))))
		  (mname (caadr madness))
		  (star (cadadr madness))
		  (margs (cddadr madness))
		  (body (cddr madness))
		  )
	 `(add-method
		,mname
		(make-method (list ,@classlst) 
						 (lambda (,(string->symbol
										(string-append (symbol->string mname)
															"-parent"))
									 self ,@margs) 
							(let ((my (lambda (x) (slot-ref self x)))
									(set-my! (lambda (x y)
												  (slot-set! self x y)))
									(kernel (slot-ref self 'kernel))
									)
							  ,@body)
							)
						 )
		)
	 )
  )


;; "(parent-body)" can be used to invoke the parent's body --- sclos
;; handles any arguments that might be needed: "self" is the name of
;; the agent within the body code "t" is the current model time dt is
;; the requested dt the state variables are not directly available --
;; use "my" or "set-my!", "slot-ref" or "slot-set!"


;;(model-body <animal> 
;;		(let ((fear (search environment 'predators))
;;				(feast (search environment 'prey))
;;				)
;;		  (display (slot-ref 'name) "is running at " t)
;;		  ...
;;		  )
;;)


(define-macro (model-body myclass . body)
  ;; Call like (method classname (mname margs) . body) where the margs
  ;; doesn't include the call-next-method
  (if (not (symbol? myclass))
		(aborts "model-body: the class " myclass " should be an atom"))
  `(add-method
	 run-model-body
	 (make-method (list ,myclass)
					  (lambda (parent-body self t dt) 
						 (let ((my (lambda (x) (slot-ref self x)))
								 (set-my! (lambda (x y) (slot-set! self x y)))
								 (kernel (slot-ref self 'kernel))
								 (skip-parent-body
								  (lambda ()
									 (if (not (slot-ref self 'agent-body-ran))
										  (begin
											 (slot-set! self 'counter
															(1+ (slot-ref self 'counter)))
											 (slot-set! self 'agent-body-ran #t)))) )
								 )
							(begin
							  ,@body
							  (if (not (slot-ref self 'agent-body-ran))
										  (begin
											 (slot-set! self 'counter
															(1+ (slot-ref self 'counter)))
											 (slot-set! self 'agent-body-ran #t)))
							  )
							)
						 )
					  )
	 )
  )

;; like model-body, but chains straight to parent
(define-macro (use-parent-body myclass) 
  `(model-body ,myclass (parent-body)))



(define-macro (sclos-setter myclass variable)
  (if (or (not (symbol? variable))
			 (not (symbol? myclass)))
		(aborts "model-body: the class " myclass " and variable "
				  variable " must be atoms"))
  `(add-method ,(string->symbol
					  (string-append "set-" (symbol->string variable) "!"))
					(make-method (list ,myclass)
									 (lambda (self arg)
										(slot-set! self ',variable arg)))))

(define-macro (sclos-getter myclass variable)
  (if (or (not (symbol? variable)) (not (symbol? myclass)))
		(aborts "model-body: the class " myclass " and variable "
				  variable " must be atoms"))
  `(add-method ,variable
					(make-method (list ,myclass) 
									 (lambda (self)
										(slot-ref self ',variable)))))


(include "framework.scm")

;(define-macro (migration-test .....))
;; returns an indication of how the agent is situated
;; w.r.t. representation

;(define-macro (migrate .....))
;; returns a new representation of the agent

;-  The End 


;;; Local Variables:
;;; mode: scheme
;;; outline-regexp: ";-+"
;;; comment-column:0
;;; comment-start: ";;; "
;;; comment-end:"" 
;;; End:
