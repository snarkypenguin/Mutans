% Title:  new-attitude
%
% Doc: /local/home/randall/Projects/Attitudes/new-attitude.tex
% Original Author:	Randall Gray <randall@pooh>
% Created:		Wed Feb 19 2014
%

% Title:  new-attitude
%
% Doc: new-attitude.tex
% Original Author:	Randall Gray <gray@odin>
% Created:		19 Feb 2014
%


\documentclass[a4]{article}
\usepackage{a4}
\usepackage{mathtools}
%\usepackage{accents}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{mathtools}
\usepackage{enumitem}
%\usepackage{slashed}
%\usepackage{graphicx}
\usepackage{natbib}
%\let\chapter\section
%\usepackage{algorithm2e}
\usepackage{lmodern}
%\journal{Letters of the Unseen University}

\input{manifest.tex}


%%%%%%%%%%%%%%%%% IMPORTANT STUFF HERE %%%%%%%%%%%%%%%%%

\newcommand{\polystruct}{field\ }
\newcommand{\polyrat}{rational\ }
\newcommand{\polytype}{field of rational\ }

%\newcommand{\polystruct}{rng\ }
%\newcommand{\polyrat}{\ }
%\newcommand{\polytype}{commutative rng of\ }


%{\mbox{\mathsurround=0pt \makebox[0pt][l]{\(\cap\)}\(\centerdot\)})


%\def\capcross{\mathrel{\mathchoice{\CAPCROSS}{\CAPCROSS}{\scriptsize\CAPCROSS}{\tiny\CAPCROSS}}}
%\def\CAPCROSS{{\setbox0\hbox{\cap}\rlap{\hbox to \wd0{\centerdot}}\box0}}

%% \mbox{\ooalign{\(\checkmark\)\cr\hidewidth\(\square\)\hidewidth\cr}}
%% \mbox{\mathsurround=0pt \makebox[0pt][l]{\(\checkmark\)}\(\square\)}
%% \DeclareMathOperator{\overlay}{?\hspace{-9pt}=}
%% \def\qeq{\mathrel{%
%%     \mathchoice{\QEQ}{\QEQ}{\scriptsize\QEQ}{\tiny\QEQ}%
%% }}
%% \def\QEQ{{%
%%     \setbox0\hbox{=}%
%%     \rlap{\hbox to \wd0{\hss?\hss}}\box0
%% }}


\begin{document}

\title{A commutative \rng\ over a set of trees with a metric space}\author{Randall Gray}
\maketitle

\begin{abstract}
  This paper develops a vector space with a norm,and extends the space
  to more complex algebraic structures. The elements of the vector
  space are trees with nodes of the form $(v, \lbl{l}, \set{E})$ where
  $\set{E}$ is a possibly empty set of nodes, $v$ is a element from an
  arbitrary field, and $\lbl{l}$ is either the empty set, or a subset
  of a given set of symbols.
\end{abstract}

\section{Introduction}
The subject of this paper arose in course of trying to find a means of
using responses to survey questions to seed a population of ``virtual
individuals'' in simulation models which attempt to incorporate the
way public opinion changes in response to policy actions. This
structure also has application in controlling simulation models which
permit the representation of submodels to change in response to their
own local state and the local states of other submodels.

More generally we will be considering trees comprised of labelled
nodes with associated values.  Each such node may have an arbitrary
number of children. 

\section{Conventions and preliminary definitions}

Generally, we will use lower case, boldface symbols to denote a node
(or tree); upper case, boldface symbols to denote sets
(particularly sets of nodes); and other symbols (such as \(x\)) will
typically refer to numbers or \polyrat polynomials. Elements of a node,
\tnode{u} will be identified using an appropriate subscript, namely
\tnv{u}, for the node's value, \tnlabel{u} for its label and \textn{u}
for its set of extensions.  We will take $\PLY{A}$ to be the \polytype
multivariate polynomials with variables taken from a set of symbols
$\set{A}$.

\begin{definition}
A node, $\node{u}$, is a representative of a recursive structure of
the form $(v, p, \set{E})$ where $v \in \FIELD, p \in \PLY{A}$, and
its extension set, $\set{E} \subset \DOM$, contains no two elements
with the same label. Without necessarily limiting ourselves, we will
take $\FIELD$ to be $\REAL$.  Nodes or trees with \(\set{E} =
\emptyset\), the empty set, will be called \emph{simple nodes, simple
  trees}, or \emph{leaf nodes}, and simple nodes which also have
scalar polynomials as their labels may be referred to as \emph{scalar
  nodes} or \emph{scalar trees}. The domain of trees, $\DOM$, is the
collection of (acyclic) trees with a finite number of nodes of this
form.
%%%, with the caveat that we exclude nodes with \omit{scalar polynomials} and
%%%non-empty extension sets.
We will make use of a special element in $\DOM$, $\zerotree = (0, 0,
\emptyset)$, which is an analogue of zero we will refer to as the
\emph{zerotree}.


\end{definition}


Any two nodes are said to be \emph{compatible} if they have the same
label, or at least one of the nodes is the \tzerotree. Two trees are
compatible if their root nodes are compatible.  \marginnote{\Defn\ of
  compatible b nodes} This property is largely analogous with
compatibility in matrices.  When there is no risk
of ambiguity, we will use the same symbol to refer to a set, $\DOM$
for example, and a vector space based on that set.

\begin{definition}
  For \(\node{u} \in \DOM\)\ we define the function
  \marginnote{\Defn\ of \(\depth(\node{u})\)}
  \begin{align*}
      \depth(\node{u}) = \begin{cases}
        0 & \text{ if } \node{u} = (0,0,\emptyset) = \zerotree \\
        1 & \text{ if } \node{u} \text{ is a simple node} \\
        1 + \max(\lbrace\depth(\node{v}):\forall \node{v} \in \extn{u}\rbrace) & otherwise
      \end{cases}
  \end{align*}
  which gives us the depth of the tree.
\end{definition}

\begin{definition}
  We will also define for \(\node{u} \in \DOM\),
  \marginnote{\Defn\ of \(\trim(\node{u})\)}
  \begin{align*}
      \trim(\node{u}) = \begin{cases}
        \zerotree & \text{ if } \node{u} = \zerotree \\
        \zerotree & \text{ if } \node{u} \text{ is simple} \\
        \Node{\nv{u}}{\nlabel{u}}{\lbrace \trim(\node{e}): \forall\node{e}\in\extn{u} \rbrace \setminus \{\zerotree\}} & otherwise.
      \end{cases}
  \end{align*}
\end{definition}

Trimming essentially removes all simple nodes from the tree.  \marginnote{\Defn\ of \(\trim_{k}(\node{u})\)} A recursive
application of trimming will be denoted \(\trim_{k}\), indicating that the tree \tnode{u} will be trimmed
\(k\)\ times. Note that \(\trim_{\depth(\node{u})}{\node{u}} = 0\)\ and \(\depth(\trim_{\depth{\node{u}}-1}{\node{u}}) =
1\).

\begin{definition}
  The cardinality of a tree is the number of nodes it contains. We define it formally as
  \begin{align*}
  \Tcard{\node{u}} = \begin{cases}
    0 & \text{ if } \node{u} = \zerotree\\
    1 + \sum_{\node{e}\in\extn{u}} \Tcard{\node{e}}.
    \end{cases}
  \end{align*}

Simple nodes are the only nodes which have a cardinality of one, and \tzerotree\ is the only node or tree with a
cardinality of zero.
\end{definition}



\begin{definition}
The \emph{overlap} between two trees is defined
\[
  \overlap(\node{u},\node{v}) = \begin{cases}
    0 & \text{ if } \node{u} = \zerotree \mor \node{v} = \zerotree \mor \nlabel{u} \neq \nlabel{v} \\
    1 + \displaystyle\sum_{\substack{\node{e}\in\extn{u} \\ \node{f}\in\extn{v}}} \overlap(\node{e},\node{f}) & \text{otherwise}
  \end{cases}
\]

Clearly two trees, \tnode{u} and \tnode{v}, are compatible if and only if \(\overlap(\node{u},\node{v}) \neq 0 \) ; they will
be said to \emph{completely overlap} if \(\Tcard{\node{u}} = \Tcard{\node{v}} =
\overlap(\node{u},\node{v})\).
%We may also make use of the relative overlap of two nodes, \tnode{u} and \tnode{v}, given by \[\overlap_{r}(\node{u},\node{v})
%= \frac{2 \overlap(\node{u},\node{v})}{\Tcard{\node{u}}+\Tcard{\node{v}}}.\] The relative overlap of  \tzerotree\ with itself is
%not defined.
\end{definition}

%% \begin{definition}
%%   \label{delta-function}
%%   The degree of deviation between two trees, \tnode{u} and \tnode{v} is given  by the expression

%%    \begin{equation}
%%      \delta{\node{u}}{\node{v}} = (1+\nabs{\node{u} - \node{v}})\frac{\Tcard{\node{u}}\Tcard{\node{v}}}{\overlap{\node{u},\node{v})^2} - 1 
%%    \end{equation}
    
%%   The rationale behind this definition is that if trees \tnode{u} and \tnode{v} are identical, then
%%   $\delta{\node{u}}{\node{v}}$ will be zero. We also want nodes that aren't common to both trees to
%%   count as differences.
%% \end{definition}


\section{Addition and Scalar Multiplication}
We will define scalar multiplication of the trees in $\DOM$, then \marginnote{Scalar multiplication and addition with
  trees} we will define a few useful mappings which will help keep the expressions simple. Our aim, in this section, is
to define addition, and to show that the defined scalar multiplication and addition make this a vector space.

\begin{definition}
  Given \(a \in \FIELD\)\ and \(\node{u} \in \DOM\), we
  define\marginnote{\(a \node{u}\)}
  \begin{align*}
      a \node{u} = \begin{cases}
        \zerotree  & \text{ if } a = 0 \mor \node{u} = \zerotree \\
        (a \nv{u}, \nlabel{u}, a\extn{u}) & \text{ otherwise }
      \end{cases}
  \end{align*}
  and we observe that the notation \(-1 \node{u} \equiv  -\node{u}\)\ is
  consistent with common use.
\end{definition}

\begin{definition}\label{useful-set-functions}
  We will define a few useful notation or relations on sets of nodes
  in $\DOM$. Take \(\set{U}\) and \(\set{V}\) be such sets and
  \tnode{a} be a node in $\DOM$; then 
  \begin{align*}
      \nlabels{U} &= \{\nlabel{e}: \forall \node{e} \in \set{U}\} \notag\\
      & \notag\\
      \srestrictedto{U}{V} &= \{\node{f} \in \set{U}: \nlabel{f} \in \nlabels{V} \} \notag\\
      \nsrestrictedto{U}{V} &= \{ \node{f} \in \set{U}: \nlabel{f} \notin \nlabels{V} \} \label{restrictions}\notag\\
      \intertext{and}
      a \set{U} &= \{a \node{u}: \forall \node{u} \in \set{U}\} \notag
  \end{align*}
\end{definition}


\begin{definition}\label{useful-node-functions}
  For convenience, we define analogues of several of the above
  relations for nodes to implicitly refer to the extension sets of
  those nodes.

  Let \tnode{u} and \tnode{v} be arbitrary nodes in $\DOM$.  Then we
  define the following
  \begin{align*}
      \nlabels{u} &\equiv \nlabels{\extn{u}}\\
      \restrictedto{u}{v} &\equiv \restrictedto{\extn{u}}{\extn{v}}\\
      \nrestrictedto{u}{v} &\equiv \nrestrictedto{\extn{u}}{\extn{v}}
      %% \node{r} \oplus \node{s} &= \extn{r} \oplus \extn{s}
  \end{align*}
\end{definition}

\begin{definition}
  \label{treeaddition}
  For compatible nodes \tnode{u} and \(\node{v} \in \DOM\),\marginnote{\(\node{u}+\node{v}\)} 
  \begin{align*}
      \node{u} + \node{v} = \begin{cases}
        \node{u} &\text{ if } \node{v} = \zerotree \\
        \node{v} &\text{ if } \node{u} = \zerotree \\
%%%???        \zerotree &\text{ if } \extn{u} = \emptyset \mand \extn{v} = \emptyset \mand \nv{u} + \nv{v} = 0 \\
%%%%%%        \Node{\nv{u} + \nv{v}}{\nlabel{u}}{\emptyset} & \text{ if } \extn{u} = \emptyset \mand \extn{v} = \emptyset \\
        %% &\NNNode{\nv{u} + \nv{v}}{\nlabel{u}}{\bigl(\{\node{r}+\node{s} : \node{r} \in \extn{u} \mand \node{s} \in \extn{v}\mand\nlabel{r} = \nlabel{s}\} \\
        %% & \qquad \qquad \qquad \qquad \cup \{\node{r} : \node{r} \in \extn{u}\mand\nlabel{r} \notin \nlabels{v}\} \cup \{\node{s} : \node{s} \in \extn{v}\mand\nlabel{s} \notin \nlabels{u}\}\bigr) \setminus \{\zerotree\} \\
        \Bigl(\nv{u} + \nv{v}, \nlabel{u}, 
        \bigl(\nrestrictedto{u}{v}\cup\nrestrictedto{v}{u} & {} \\
        \quad\cup\{\node{r}+\node{s}:\node{r}\in\restrictedto{u}{v}\mand\node{s}\in\restrictedto{v}{u}\mand\nlabel{r}=\nlabel{s}\}\bigr)\setminus \{\zerotree\}\Bigr) & \text{ otherwise}
      \end{cases}
  \end{align*}
\end{definition}

{%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  \blockcomment{
    \begin{definition}
      For sets \(\set{B}, \set{C}\) with elements from $\DOM$, we define
      the set 
      \[
      \set{B}\capplus\set{C} = \{\node{r} + \node{s}: \node{r} \in \set{B}, \node{s} \in \set{C}
      \mand \nlabel{r} = \nlabel{s}.\}
      \]
    \end{definition}

    With these definitions, we can express the value of the sum of two
    non-null trees, \tnode{u} and \tnode{v}, as 
    \[
    \node{u} + \node{v} = \Bigl(\nv{u} + \nv{v}, \nlabel{u}, 
    \bigl(\nrestrictedto{u}{v} \cup \nrestrictedto{v}{u} \cup (\extn{u} \capplus \extn{v})\bigr)\setminus \{\zerotree\}\Bigr),
    \]
    and we note that the extension set of the sum is the disjoint union of the sets
    \(\nrestrictedto{u}{v}, \nrestrictedto{v}{u}\), and \((\extn{u} \capplus \extn{v})\).
  }
}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{definition}[Notation]
  We define a mapping which takes two sets, each comprised of nodes in
  $\DOM$, to another set of nodes.The resulting set contains the nodes
  of the first and second operands and the set obtained by applying
  the operator to compatible pairs from the first and second set. This
  notation is used to express the restriction of addition to
  compatible nodes in the extensions of the root nodes.  Let
  \begin{align*}
      \set{B}\stplus\set{C} = \extnO{B}{C}{r}{s}{+}.
  \end{align*}
\end{definition}



\section{Vector space}

\begin{proposition}\label{vspace} $\DOM$, with scalar multiplication and addition is a vector space.
  \begin{proof}
    We will assume that  \(\node{p}, \node{q}, \node{u},\node{v},\node{w} \in \DOM\)\ and \(a, b \in  \FIELD\), and that
    addition \tnode{u}, \tnode{v}\ and \tnode{w} are compatible.

    %%%%%% Delete the vspace if you remove margin notes
    \vspace{28pt}
    \begin{description} 
    \item[Additive identity element]
      \imarginnote{\(\zerotree+\node{u}=\node{u}\)}

      This is explicit in the definition of addition between elements
      of $\DOM$.

    \item[Inverse elements with respect to addition]
      \imarginnote{\(\node{u} - \node{u} = \zerotree\)}

      The element \(\zerotree\) is its own inverse, since \(\zerotree
      + \zerotree = \zerotree\) by definition.

      So, we consider the case of $\node{u}$, where \(\depth(\node{u})
      = 1\), then
      \begin{align*}
          \node{u} + -\node{u} &=  \Node{\nv{u}}{\nlabel{u}}{\emptyset} + \Node{-1\nv{u}}{\nlabel{u}}{\emptyset} \\
          &= (\nv{u} + -\nv{u}, \nlabel{u}, \emptyset) \\
          &= \zerotree
      \end{align*}
      so for any simple node, \(\node{u}\), \(-\node{u}\)\ is its
      inverse.

      Let \tnode{v} be a non-null node which is not simple, but has
      simple extension  nodes, that is to say \(\depth(\node{v}) = 2)\).  Then 
      \begin{align*}
          \node{v} + -\node{v} &= (\nv{v} - \nv{v}, \nlabel{v}, \lbrace \node{e} + -\node{e}: \forall \node{e} \in \extn{v}\rbrace \setminus\{\zerotree\}) \\
          %&= (0, \nlabel{v}, \{\zerotree\} \setminus\{\zerotree\} \\
          &= (0, \nlabel{v}, \emptyset) \\
          &= \zerotree
      \end{align*}
      since the simple leaf nodes are all added to their own additive
      inverse.

      Having established this, we can generalise to trees with a depth
      greater than two. Assuming that the proposition holds for
      elements of $\DOM$ with depth \(n\), we consider an element, \tnode{u},
      where \(\depth(\node{u}) = n+1\) added to the element
      \(-\node{u}\).
      \begin{align*}
          \node{u} + -\node{u} &= (0, \nlabel{u}, \lbrace \node{e} + -\node{e}: \forall \node{e} \in \extn{u}\rbrace)
      \end{align*}

      Since the extension nodes of the root node of \tnode{u} are, by
      assumption, added to their additive inverses, they then become
      \begin{align*}
          &= (\nv{v} + -\nv{v}, \nlabel{v}, \emptyset) \\
          &= \zerotree
      \end{align*}
      for each \(\node{v}\in\extn{u}\) and, by induction, our inverse
      holds for all members of $\DOM$.


    \item[Multiplicative identity element]
      \imarginnote{\(1 \node{u} = \node{u}\)}

      First observe that \(1\/\zerotree\)\ is by definition \tzerotree.

      Now consider an arbitrary  non-null tree in $\DOM$, \tnode{u};
      \tnode{u} is either simple, or it has extension nodes. In the
      case of a simple \tnode{u}, it is obvious that \(1 \in
      \FIELD\)\ acts as an identity.
      \begin{align*}
          \node{u} &= (\nv{u}, \nlabel{u}, \emptyset) \\
          &=  (1 \nv{u}, \nlabel{u}, \emptyset) \\
          &=  1 ( \nv{u}, \nlabel{u},\emptyset) \\
          &= 1 \node{u}
      \end{align*}

      Thus, for all leaf nodes on \tnode{u}, 1 is the multiplicative
      identity. Now we take \tnode{u}\ to be some non-simple node, 
      \begin{align*}
          \node{u} &= (\nv{u}, \nlabel{u},\extn{u}) \\
          &=  (1 \nv{u}, \nlabel{u}, 1 \extn{u}) \\
          &=  (1 \nv{u}, \nlabel{u}, \lbrace (1 \nv{e}, \nlabel{e}, \extn{e}): \forall \node{e} \in \extn{u} \rbrace),
      \end{align*}
      and, if the extensions are all simple nodes,
      \begin{align*}
          &=  1 (\nv{u}, \nlabel{u}, \extn{u}) \\
          &= 1 \node{u}.
      \end{align*}
      so it is the case that 1 is the multiplicative inverse for nodes which
      have a depths of less than three. 
      
      Now suppose that \(1\) is the multiplicative inverse of all
      members of $\DOM$ with a depth of \(n\) or less for some natural
      number \(n\), and we consider \tnode{v}\ which has a depth of
      \(n+1\). Then
      \begin{align*}
          \node{v} &= (\nv{v}, \nlabel{v}, \extn{v}) \\
          &=  (1 \nv{v}, \nlabel{v}, 1\extn{v})
      \end{align*}.

      But each of the elements in the set \(1\extn{v}\) either has a
      depth of \(n\) or less and so the the extension set of \(1 \node{v}\)
      is merely \textn{v}, and so \(1 \node{v} = \node{v}\).

      By induction, we can demonstrate that \(1\) is the multiplicative
      identity for nodes of arbitrary (finite) depth.



    \item[Commutativity]
      \imarginnote{\(\node{u} + \node{v} = \node{v} + \node{u}\)}

      Let us consider compatible nodes \tnode{u} and \tnode{v}.

      The commutativity of addition involving \tzerotree\ is
      guaranteed by the definition of addition. so we first address
      the case where both addends are simple.

      Take \tnode{u} and \tnode{v} to be simple nodes; then
      \begin{align*}
          \node{u} + \node{v} &= (\nv{u}, \nlabel{u}, \emptyset) + (\nv{v}, \nlabel{v}, \emptyset) \notag\\
          &= (\nv{u} + \nv{v}, \nlabel{u}, \emptyset) \notag\\
          &= (\nv{v} + \nv{u}, \nlabel{u}, \emptyset) \notag\\
          &= \node{v} + \node{u}.
      \end{align*}

      Now suppose that there is some number \(n\) for which
      \(\depth(\node{u}) \leq n \mand \depth(\node{v}) \leq n
      \implies \node{u} + \node{v} = \node{v} + \node{u}\).

      Then if we take \tnode{u} and \tnode{v} to be nodes with depths
      of \(n+1\) or less,
      \begin{align*}
          \node{u} + \node{v} &= (\nv{u}, \nlabel{u}, \extn{u}) + (\nv{v}, \nlabel{v}, \extn{v}) \notag\\
          &= \Bigl(\nv{u} + \nv{v}, \nlabel{u}, \bigl(\{\node{r}+\node{s} : \node{r} \in \restrictedto{u}{v} \mand \node{s} \in \restrictedto{v}{u}\mand\nlabel{r} = \nlabel{s}\} \notag\\
          & \qquad \qquad \qquad \qquad \cup \{\node{r} : \node{r} \in \extn{u}\mand\nlabel{r} \notin \nlabels{v}\} \cup \{\node{s} : \extn{s} \in \node{v}\mand\nlabel{s} \notin \nlabels{u}\}\bigr) \setminus \{\zerotree\}\Bigr) \notag\\
          &= \Bigl(\nv{u} + \nv{v}, \nlabel{u}, \bigl(\{\node{r}+\node{s} : \node{r} \in \extn{u} \mand \nlabel{r} \in \nlabels{v} \mand \node{s} \in \extn{v}\mand\nlabel{s} \in \nlabels{u}\} \notag\\
          & \qquad \qquad \qquad \qquad         \cup \nrestrictedto{\node{u}}{v} \cup \nrestrictedto{v}{u}\bigr) \setminus \{\zerotree\}
      \end{align*}
          
      So,
      \begin{align*}
          \node{u} + \node{v} &= \Bigl(\nv{v} + \nv{u}, \nlabel{u}, \bigl(\{\node{r}+\node{s} : \node{r} \in \extn{u} \mand \nlabel{r} \in \nlabels{v} \mand \node{s} \in \extn{v}\mand\nlabel{s} \in \nlabels{u}\} \notag\\
          & \qquad \qquad \qquad \qquad         \cup \nrestrictedto{\node{u}}{v} \cup \nrestrictedto{v}{u}\bigr) \setminus \{\zerotree\}
      \end{align*}

      since addition in $\DOM$ is commutative. If we can demonstrate
      that the expression for the extension set is independent of
      order, then it must be the case that sum of the addends,
      \tnode{u}\ and \tnode{v}, must also be order independent.
      
      The set \(\{\node{r}+\node{s}:\node{r}\in\extn{u}\mand\nlabel{r}\in\nlabels{v}\mand\node{s}\in\extn{v}\mand\nlabel{s}\in\nlabels{u}\}\) must be
      order independent since each of the candidate \tnode{r}\ and \tnode{s}\ addends must have a depth of \(n\) or less. Since set union is
      commutative, the order of \(\nrestrictedto{u}{v}\) and \(\nrestrictedto{v}{u}\) doesn't affect the result, thus, addition must be commutative
      for all \(\node{u} \text{ where } \depth({\node{u}}) \leq n+1\).  By induction, this must be true for all \(n \geq 0\).

    \item[Associativity]
      \imarginnote{\((\node{u}+\node{v})+\node{w} = \node{u}+(\node{v}+\node{w})\)}

      Let us consider compatible nodes \(\node{u}, \node{v}\) and
      \(\node{w}\) in $\DOM$. 

      First consider the situation where the depths of \(\node{u}, \node{v}\) and
      \(\node{w}\) are all less than or equal to one. If they all have
      a depth of zero, the sum is almost trivially the null
      tree. Similarly, if only one is the null tree, it rapidly
      degenerates to simple addition. So we take \tnode{u}, \tnode{v},
      and \tnode{w} to be simple. Then
      \begin{align*}
          (\node{u}+\node{v})+\node{w} &= ((\nv{u}, \nlabel{u}, \emptyset) + (\nv{v}, \nlabel{u}, \emptyset)) + (\nv{w}, \nlabel{u}, \emptyset) \\
          &= (\nv{u} + \nv{v}, \nlabel{u}, \emptyset) + (\nv{w}, \nlabel{u}, \emptyset) \\
          &= ((\nv{u} + \nv{v}) + \nv{w}, \nlabel{u}, \emptyset) \\
          &= (\nv{u} + (\nv{v}) + \nv{w}), \nlabel{u}, \emptyset) \\
          &= \node{u} + (\node{v} + \node{w}).
      \end{align*}
      
      Let us consider the case where these may be non-simple
      trees. Suppose there is an integer \(n\) such that associativity
      holds for any three trees \(\node{u}, \node{v} \mand \node{w}\),
      whose depth is less than or equal to \(n\), that is if
      \(\depth(\node{u}) \leq n, \depth(\node{v}) \leq n \mand
      \depth(\node{w}) \leq n\),
      then it must be the case that \[(\node{u} + \node{v}) + \node{w} = \node{u} + (\node{v} + \node{w})\].

      Now suppose one or more of these trees has a depth of
      \(n+1\).
      
      % Just the set
      %% \bigl\{\nrestrictedto{u}{v} \cup \nrestrictedto{v}{u} \\
      %% &\qquad\quad \cup \hspace{2pt} \{\node{r} + \node{s}:  \node{r} \in \restrictedto{u}{v}\mand \node{s} \in \restrictedto{v}{u} \} \bigr\} \setminus \{\zerotree\}

      \begin{align*}
          (\node{u}+\node{v})+\node{w} &= (\Node{\nv{u}}{\nlabel{u}}{\extn{u}} + \Node{\nv{v}}{\nlabel{u}}{\extn{v}}) + \Node{\nv{w}}{\nlabel{u}}{\extn{w}} \\
          &= \Node{\nv{u} + \nv{v}}{\nlabel{u}}{\extn{u}\stplus\extn{v}} + \Node{\nv{w}}{\nlabel{u}}{\extn{w}}
      \end{align*}

      Recall that 
      \begin{align*}
          \extn{u}\stplus\extn{v} &= \extnO{u}{v}{p}{q}{+}\\
          \intertext{so, letting}
          \set{B} &= \extn{u}\stplus\extn{v} \\
          \intertext{we get}
          (\node{u}+\node{v})+\node{w} &=\NNNode{(\nv{u} + \nv{v}) + \nv{w}}{\nlabel{u}}{\bigl(\nsrestrictedto{B}{w}\cup\nrestrictedto{w}{B} \cup \set{B}\stplus\extn{w}\bigr)\setminus\{\zerotree\}} \\
          &=\NNNode{\nv{u} + (\nv{v} + \nv{w})}{\nlabel{u}}{\bigl(\nsrestrictedto{B}{w}\cup\nrestrictedto{w}{B}\cup \set{B}\stplus\extn{w}\bigr)\setminus\{\zerotree\}} \\
          \intertext{since addition in $\DOM$ is associative}
      \end{align*}

      Notice that the elements of all the sets which comprise the extension set, those in \(\set{B}\) and in \textn{w},
      must have a depth of \(n\) or less; any addition which occurs amongst the elements of these sets must be
      associative by our inductive assumption. Hence
      \begin{align*}
          (\node{u}+\node{v})+\node{w} = \node{u}+(\node{v}+\node{w}).
      \end{align*}


    \item[Compatibility of scalar multiplication and multiplication in $\FIELD$]
      \imarginnote{\(a(b \node{u}) = (a b) \node{u}\)}

      Observe first that \(a \zerotree = \zerotree, \forall a \in
      \FIELD\). We also dispose with the case of simple nodes:
      \begin{align*}
          a(b \node{u}) &= (a(b \nv{u}), \nlabel{u}, \emptyset) \\
          &= (a b \nv{u}, \nlabel{u}, \emptyset) \\
          &= ((a b) \nv{u}, \nlabel{u}, \emptyset) \\
          &= (a b) \node{u};
      \end{align*}

      So assuming that multiplication is compatible with nodes with
      depths of \(n\) or less, we consider \tnode{u}, where \(\depth(\node{u})
      = n+1\),
      \begin{align*}
        a (b \node{u}) &= a (b  \nv{u}, \nlabel{u}, b\extn{u}) \\
        \intertext{since \(\depth(\node{e}) \leq n \forall \node{e}\in \extn{u},\) multiplication of these elements is compatible, and }
          &= (a b\/ \nv{u}, \nlabel{u}, a(b\extn{u})) \\
          \intertext{becomes}
          &= ((a b) \nv{u}, \nlabel{u}, (a b)\extn{u}) \\
          &= (a b) \node{u}
      \end{align*}

      Thus the scalar and field multiplication operators are compatible.

      
    \item[Distribution of scalar multiplication with respect to vector addition]
      \imarginnote{\(a(\node{u}+\node{v}) = a \node{u}+a \node{v}\)}

      Let us consider compatible trees, \tnode{u}\ and \tnode{v}.
      
      First, note that \[\forall \node{u} \in \DOM, a(\zerotree + \node{u}) = a \node{u} = a\zerotree + a \node{u},\]
      and that \[\forall \node{u},\node{v}\in\DOM, 0 (\node{u} + \node{v}) = \zerotree = 0 \node{u} + 0 \node{v}.\]

      The property holds for simple nodes, 
      \begin{align*}
        a(\node{u} + \node{v}) &= a (\Node{\nv{u}}{\nlabel{u}}{\emptyset} + \Node{\nv{v}}{\nlabel{v}}{\emptyset})\\ 
        &= a \Node{\nv{u} + \nv{v}}{\nlabel{u}}{\emptyset} \\
        &= \Node{a(\nv{u} + \nv{v})}{\nlabel{u}}{\emptyset} \\
        &= \Node{a\nv{u} + a\nv{v}}{\nlabel{u}}{\emptyset} \\
        &= \Node{a\nv{u}}{\nlabel{u}}{\emptyset} + \Node{a\nv{v}}{\nlabel{u}}{\emptyset} \\
        &= a \node{u} + a \node{v}
      \end{align*}.

      So, suppose that the equation \(a ( \node{p} + \node{q}) =
      a \node{p} + a \node{q}\) holds for all compatible nodes \tnode{p} and
      \tnode{q} such that \(depth(\node{p}) \leq k\), and
      \(\depth(\node{q}) \leq j\).

      Take \(n = \min(j, k)\), \(a\in\FIELD\), and nodes \tnode{u} and \tnode{v} such that
      \(\depth(\node{u}) = n+1\), and \(\depth(\node{v}) = n+1\).
      Note that \(n\) must be greater than zero since the property holds for simple
      nodes.  Then
      \begin{align*}
        a(\node{u} + \node{v}) &= a (\Node{\nv{u}}{\nlabel{u}}{\extn{u}} + \Node{\nv{v}}{\nlabel{v}}{\extn{v}}\\ 
        &= a \bigl(\nv{u} + \nv{v}, \nlabel{u}, \bigl\{\nrestrictedto{u}{v} \cup \nrestrictedto{v}{u} \\
        &\qquad \cup \hspace{2pt} \{\node{r} + \node{s}:  \node{r} \in \restrictedto{u}{v}\mand \node{s} \in \restrictedto{v}{u} \} \bigr\} \setminus \{\zerotree\} \bigr) \\
        &= \Bigl(a (\nv{u} + \nv{v}), \nlabel{u}, 
        \bigl\{\{a \node{e}: \node{e} \in \nrestrictedto{u}{v}\} \cup \{a \node{e}: \node{e} \in \nrestrictedto{v}{u}\} \\
        &\qquad \cup \hspace{2pt} \{a (\node{r} + \node{s}):  \node{r} \in \restrictedto{u}{v}\mand \node{s} \in \restrictedto{v}{u} \} \bigr\} \setminus \{\zerotree\} \bigr)\Bigr) \\
        &= \Bigl(a \nv{u} + a \nv{v}, \nlabel{u},  
        \bigl\{\{a \node{e}: \node{e} \in \nrestrictedto{u}{v}\} \cup \{a \node{e}: \node{e} \in \nrestrictedto{v}{u}\} \\
        &\qquad \cup \hspace{2pt} \{a (\node{r} + \node{s}):  \node{r} \in \restrictedto{u}{v}\mand \node{s} \in \restrictedto{v}{u} \} \bigr\} \setminus \{\zerotree\} \bigr)\Bigr)
      \end{align*}.

      Notice that the component sets of the extension to \(\node{u} +
      \node{v}\), namely \(\{a \node{e}: \node{e} \in
      \nrestrictedto{u}{v}\}\),  
      \(\{a \node{e}: \node{e} \in
      \nrestrictedto{v}{u}\}\) and \(\{a (\node{r} + \node{s}):
      \node{r} \in \restrictedto{u}{v}\mand \node{s} \in
      \restrictedto{v}{u} \}\) can only contain nodes with a depth of
      \(n\) or less; Thus, we can proceed inductively, increasing
      the least upper bound, (\(\min(j, k)\), for the set of trees
      that cooperate with distribution of scalar multiplication over
      vector addition, to any value we wish.

    \item[Distribution of scalar multiplication with respect to
      addition in $\FIELD$ ]
      \imarginnote{\(a+b)\node{u}) = a \node{u}+b \node{u}\)}

      The property is clearly true when \(\node{u} = \zerotree\),
      since \((a+b)\zerotree = \zerotree = a\zerotree+b\zerotree\).

      We first consider simple nodes:
      \begin{align*}
        (a + b)\node{u} &= (a + b) ((a + b)\nv{u}, \nlabel{u}, \emptyset) \\
        &= ((a + b)\nv{u}, \nlabel{u}, \emptyset) \\
        &= (a\nv{u}, \nlabel{u}, \emptyset) + (b  \nv{u}, \nlabel{u}, \emptyset) \\
        &= a \node{u} + b \node{u}.
      \end{align*}

      Nodes with a depth of two are slightly more complicated, 
      \begin{align*}
          (a + b)\node{u} &= (a + b) ((a + b)\nv{u}, \nlabel{u}, (a + b)\extn{u}) \\
          &= (a\nv{u} + b  \nv{u}, \nlabel{u}, \{(a + b)\node{e}:\node{e}\in\extn{u}\}) \\
          \intertext{but \(\extn{u}\) is composed of simple nodes, so,}
          &= (a\nv{u} + b  \nv{u}, \nlabel{u}, \{a \node{e} + b \node{e}:\node{e}\in\extn{u}\}) \\
          &= (a\nv{u} + b  \nv{u}, \nlabel{u}, a\extn{u}) + (b  \nv{u}, \nlabel{u}, b\extn{u}) \\
          &= a \node{u} + b \node{u}.
      \end{align*}
      %% a \node{e} + b \node{e} = (a + b) \node{e} because nodes in the
      %% extension only contribute (add to something non-zero) if they
      %% have the same label, and there are no oddities that appear in
      %% one addend and not the other.(modulo the scalars)

      
      Now suppose the property holds for nodes with a depth of \(n\).
      Then we consider node \(\node{u}\) with a depth of \(n+1\):
      \begin{align*}
          (a + b)\node{u} &= (a + b) (\nv{u}, \nlabel{u}, \extn{u}) \\
          &= ((a + b)\nv{u}, \nlabel{u}, (a + b)\extn{u}), \\
          &= (a\nv{u} + b  \nv{u}, \nlabel{u}, \{a \node{e} + b \node{e}:\node{e}\in\extn{u}\}) \\
        \intertext{since \(\depth(\node{e}) = n\)}
          &= a \node{u} + b \node{u}.
      \end{align*}

      %% Suppose there is an element \(\node{v} \in \extn{u}\)\ where
      %% this is not the case. It cannot be the case that \((a + b)\nv{v}
      %% \neq a\nv{v} + b  \nv{v}\)\ since all three addends are in $\FIELD$,
      %% so there is some must be some node in \textn{v}, say \tnode{g},
      %% for which \((a + b)\node{g} \neq a \node{g}+b \node{g}\). This
      %% process continues till we reach a simple node (as we must) with
      %% an empty extension set, so we must conclude that the assumption
      %% is false; there can be no element in the an extension set for
      %% which \((a+b)\node{e} \neq a \node{e}+b \node{e}\).
      
      %% So 
      %% \begin{align*}\label{Dsmf4}
      %%     (a + b)\node{u} &= (a\nv{u} + b  \nv{u}, \nlabel{u}, 
      %%     \{(a\nv{e} + b  \nv{e}, \nlabel{e}, \{a \node{e} + b \node{e}):
      %%     \node{e} \in \extn{u}\}) \\
      %%     &= a \node{u} + b \node{u} \\
      %% \end{align*}

      %%    (a + b)\node{u} &= (a\nv{u} + b  \nv{u}, \nlabel{u},
      %%    \{(a\nv{e} + b  \nv{e}, \nlabel{e}, a\extn{e} + b\extn{e}): \node{e} \in \extn{u}\}), \\


      %% The justification for splitting the sum of the terms from the extension set rests on the observation that we may
      %% deal with the simple nodes by appealing to the first part of this section of the proof. The non-simple nodes, can
      %% be expanded and dealt with using the same strategy used for \tnode{u}, and the fact that we are dealing with
      %% finite, trees means that along any branch we must eventually exaust the supply of non-simple nodes,
      %% leaving us with simple terminal nodes which are of the form \(a \node{u} + b \node{u}\). In this way the elements of
      %% very non-simple node's extension set *********
    \end{description}
    By induction, the property must hold for all \(n >= 0\)
  \end{proof}
\end{proposition}



\section{Seminorms, norms and metrics} %
% Seminorm: triangle inequality, |a|||v|| = ||av|| ... note |a| = 0 iff a = 0
We will now construct a seminorm on the vector space $\DOM$. This will induce a norm on a quotient space of $\DOM$ which
we can use as a tool for assessing the similarity of trees and, ultimately, provide both a means of clustering trees and
selecting trees with particular properties.

\subsection{$\DOM$ and its seminorm}
\begin{definition}\label{absolute-mag}
\marginnote{Absolute value: \(\nabs{\node{u}}\)} We define the absolute value of a node to be
\begin{align*}
\nabs{\node{u}} = \begin{cases}
  0 & \text{ if } \node{u} = \zerotree \\
  \abs{\nv{u}} & \text{ if }\extn{u} = \emptyset \\
  \abs{\nv{u}} + \sum_{\node{e}\in\extn{u}}\nabs{\node{e}} & \text{ otherwise.}
\end{cases}
\end{align*}
\end{definition}
%\begin{remark}
The absolute magnitude is only based only on the values of the
nodes of trees. % This corresponds to the $L^1$ norm on the tree space.
Note that each node in a tree can only contribute a non-negative
quantity to the absolute value of the tree, it is obvious that
\(\nabs{\node{u}} \geq 0\)\ for all \(\node{u} \in \DOM\)\ and that
equality only occurs if the value of each node in the tree \tnode{u}
is zero.
%\end{remark}

\begin{proposition}\label{absolutehomogeneity}
  For \(a \in \FIELD\) and \(\node{u} \in \DOM, \abs{a}\nabs{\node{u}} =
  \nabs{a \node{v}}\).
\begin{proof}
  The magnitude of the empty tree is trivially zero, so \(\abs{a}\nabs{\zerotree} =
  \nabs{a\zerotree} = 0\).

  Consider simple nodes in $\DOM$:
  \begin{align*}
      \abs{a}\nabs{\node{u}} &= \abs{a}(\abs{\nv{u}} + 0) \\
      &= \abs{a}\abs{\nv{u}} \\
      &= \nabs{a \node{u}}.
  \end{align*}

  Now suppose that there is \(n \ge 1\) such that the proposition is true for
  all trees with a depth of \(n\) or less. Then, taking \(\node{u} \in
  \DOM\) where \(\depth(\node{u}) = n+1\), we have
  \begin{align*}
      \abs{a}\nabs{\node{u}} &= \abs{a}\bigl((\abs{\nv{u}} + \sum_{\node{e}\in\extn{u}}\nabs{\node{e}})\bigr) \\
      &= \abs{a}\abs{\nv{u}} + \sum_{\node{e}\in\extn{u}}\abs{a}\nabs{\node{e}}\\
      \intertext{but all the elements in \(\extn{u}\) have a depth of \(k\) or less}
      &= \abs{\abs{a}\nv{u}} + \sum_{\node{e}\in\extn{u}}\nabs{\abs{a}\node{e}} \\
      &= \abs{a\nv{u}} + \sum_{\node{e}\in\extn{u}}\nabs{a \node{e}} \\
      &= \nabs{a \node{u}}.
  \end{align*}

  By induction, the proposition must be true for all \(n \geq 0\).
\end{proof}
\end{proposition}



\begin{proposition}\label{triangle1}
  For \(\node{u} \mand \node{v} \in \DOM, \nabs{\node{u} + \node{v}}
  \leq \nabs{\node{u}} + \nabs{\node{v}}\).

\begin{proof}
  We start by considering trees of depths zero and one. The case for null trees is trivial: \(\nabs{\zerotree +
    \zerotree} = \abs{0 + 0} = 0\), and if only one of the trees has a depth of one, we get either \(\nabs{\node{u} +
    \zerotree} = \nabs{\node{u}}\) or \(\nabs{\zerotree + \node{u}} = \nabs{\node{u}}\).

  For \(\node{u} \mand \node{v}\)  with depths of one, \[\nabs{\node{u} + \node{v}} = \nabs{(\nv{u}+\nv{v}, \nlabel{u}, \emptyset)}= \abs{\nv{u}+\nv{v}}\].
  Since \tnv{u} and \tnv{v} are scalars in $\FIELD$, we must have
  \(\abs{\nv{u} + \nv{v}} \leq \abs{\nv{u}}+\abs{\nv{v}}\),
  so \[\abs{\nv{u}+\nv{v}} \leq \abs{\nv{u}}+\abs{\nv{v}} = \nabs{\node{u}} + \nabs{\node{v}}.\]

  We will now proceed by induction; let \(n\) be a positive integer for which the triangle inequality holds for all
  trees with a depth of \(k\) or less.  Let's consider compatible trees, \tnode{u} and \tnode{v} whose depths are less
  than or equal to \(n+1\). Then
  \begin{align*}
      \nabs{\node{u} + \node{v}} &= \nabs{(\nv{u} + \nv{v}, \nlabel{u}, \extn{u}\stplus\extn{v})} \\
      &= \Bigl[\abs{\nv{u} + \nv{v}} + \mstsum{\node{e}\in{\extn{u}\stplus\extn{v}}}\nabs{\node{e}}\Bigr]. \\
  \end{align*}
  
  Observe that \(\abs{\nv{u} + \nv{v}} \leq \abs{\nv{u}} + \abs{\nv{v}}\), and that each 
  of the addends in \[\sum_{\node{e}\in{\extn{u}\stplus\extn{v}}}\nabs{\node{e}}\] has a depth of \(n\) or
  less, so 
\begin{align*}
  \sum_{\node{e}\in{\extn{u}\stplus\extn{v}}}\nabs{\node{e}} &\leq \sum_{\node{e}\in{\extn{u}}}\nabs{\node{e}} + \sum_{\node{e}\in\extn{v}}\nabs{\node{e}}.\\
  \intertext{ This implies that}
   \nabs{\node{u} + \node{v}} &\leq \Bigl[\abs{\nv{u}} + \abs{\nv{v}} + \sum_{\node{e}\in\extn{u}}\nabs{\node{e}} + \sum_{\node{e}\in\extn{v}}\nabs{\node{e}}\Bigr];\\
   \intertext{rearranging we get}
   \nabs{\node{u} + \node{v}}  &\leq \Bigl[\abs{\nv{u}} + \sum_{\node{e}\in\extn{u}}\nabs{\node{e}}\Bigr] + \Bigl[\abs{\nv{v}} + \sum_{\node{e}\in\extn{v}}\nabs{\node{e}}\Bigr] \\
   \intertext{and hence}
   \nabs{\node{u} + \node{v}} \leq \nabs{\node{u}}  + \nabs{\node{v}}.
\end{align*}
\end{proof}
\end{proposition}


\begin{corollary}\label{gseminorm}
  The absolute value forms a seminorm on $\DOM$.
  \begin{proof}  
    Propositions, \ref{absolutehomogeneity} and \ref{triangle1}, are 
    sufficient for the absolute value to be a seminorm on
    $\DOM$.
  \end{proof}
\end{corollary}

At this point we should consider the elements \(\node{o}\in\DOM\)
which are analogues of zero. We define the set \(\nullspace =
\{\node{o}\in\DOM : \nabs{\node{o}} = 0\}\), and observe that for any
\(\node{e} \in \DOM, \mand \node{o} \in \nullspace\) the equation
\(\nabs{\node{e} + \node{o}} = \nabs{\node{e}}\) must hold. 

Since $\DOM$ is a seminormed vector space, it is also a pseudometric
space and we can induce a fully fledged metric space over the quotient
space \(\DOMQ = \DOM / \nullspace\).
%%We note that for any element
%%$\qnode{e}\in\DOMQ$ there must be a tree $\node{f}\in\qnode{e}$ with a
%%minimum number of nodes and that this tree is the generating element for
%%the coset \(\qnode{e} \in\DOMQ\). With this in mind we define the
%%interior function:
%%\begin{definition}
%%  For \(\node{e} \in \DOM\) we define its interior to be,
%%  \[
%%  \interior(\node{e}) = \begin{cases}
%%    \zerotree & \text{if } \nabs{e} = 0\\
%%    (\nv{e}, \nlabel{e}, \{\interior(\node{r}): \forall \node{r} \in \extn{e} \text{ s.t. }\nabs{\node{r}} > 0\}\setminus\zerotree) & otherwise.
%%  \end{cases}
%%  \]
%%
%%This is really the tree \tnode{e} stripped of all the peripheral
%%branches or nodes which have an absolute value of zero. This, of
%%course, may discard symbolic information encoded by the labels within
%%the tree.
%%\end{definition}
For simplicity, we identify the coset of $\nullspace$ with respect to
$\zerotree$ with $\rzerotree$, and we take the induced metric on the
normed vector space $\DOMQ$, to be \[\dist(\qnode{u},\qnode{v}) =
\nabs{\qnode{u} - \qnode{v}} \text{ for all }\qnode{u}, \qnode{v} \in
\DOMQ\].

%% \subsection{Multiplication of elements in $\DOMQ$}
%% \begin{definition}\label{treemultiplication}
%%   The product of two elements $qnode{u}, \qnode{v}\in \DOMQ$
%%     is defined by
%%   \begin{align*}
%%     \qnode{u} \qnode{v} = \begin{cases}
%%       \zerotree & \text{ if either factor is } \zerotree \\

For the moment, we will satisfy ourselves with constructing a \rng\ of
these trees, and define a multiplicative operator without a
corresponding identity. First we define the pairwise multiplication of
the elements in two sets of nodes which is analogous to the $\stplus$
operator used in the addition of trees.
\begin{definition}\label{treesetmultiplication1} 
  For sets of nodes $\set{B}, \set{C}$, we define \marginnote{Cosets anyone?}
  \begin{align*}
    \set{B}\boxtimes\set{C}&=\{\rnode{f}\tdot\rnode{g}:\rnode{f}\in\set{B},\rnode{g}\in\set{C}\}\\
    \intertext{where $\tdot$ is the multiplicative operator for trees, and we also define}
    \sigma(p,\set{B},\set{C})&=\{\Sigma_{\rlabel{f}=p}:\rnode{f}\in\set{B}\boxtimes\set{C}\}\\
      \intertext{and}
    \set{B}\stdot\set{C}&=\{\sigma(p,\set{B},\set{C}): p\in\nlabels{\set{B}\boxtimes\set{C}}\}
  \end{align*}
  Clearly, if either of the operands is the empty set, the result for
  both operators must also be the empty set.  The purpose of
  $\set{B}\stdot\set{C}$ is to collect the compatible extension nodes
  within the product in much the same way as we collect terms in the
  product of two polynomials.

  We can see that if tree multiplication is commutative, then
  $\boxtimes$ must also be commutative. The operator $\stdot$ is also
  commutative, since the addition of trees is commutative.
\end{definition}


\begin{definition}\label{treemultiplication} 
For nodes $\rnode{u}, \rnode{v} \in \DOMR$, we define their product,
$\rnode{u} \tdot \rnode{v}$, by
\begin{equation}
  \rnode{u}, \rnode{v} = \begin{cases}
    \rzerotree & \text{if either of the nodes is } \rzerotree \\
%%%    (\rv{u} \rv{v}, 0, \emptyset) & \text{ if $\rnode{u}, \rnode{v}$ are both scalar nodes} \\
%%%    (\rv{u}\rv{v}, \rlabel{u}, \rextn{u}) & \text{if $\rnode{v}$ is scalar} \\
%%%    (\rv{u}\rv{v}, \rlabel{v}, \rextn{v}) & \text{if $\rnode{u}$ is scalar} \\
    (\rv{u}\rv{v}, \rlabel{u}\rlabel{v},\rextn{u}\stdot\rextn{v}) & \text{ otherwise} \\
  \end{cases}
\end{equation}

commutative, 
\end{definition}

%% So, an example using simple nodes, with the second candidate would
%% look like
%% \begin{align*}
%%   (3, \{{a}, {b}\}, \emptyset)\tdot(5, \{{a}, {b}\},
%%   \emptyset) &= (3 \cdot 5 \cdot \lscalar{\lfwd{\{{a}, {b}\}} \lfwd{\{{a},
%%       {b}\}}},\linv{\lfwd{\{{a}, {b}\}} \lfwd{\{{a},
%%       {b}\}}}, \emptyset) \\
%%   &=  (15 \lscalar{({a}+{b})},  \linv{({a}+{b})({a}+{b})}, \emptyset) \\
%%   &=  (15 \cdot 1 \cdot 2 \cdot 1, \linv{{a}^2 + 2{a b}+{b}^2}, \emptyset) \\
%%   &=  (30, \linv{{a}^2 + 2{a b}+{b}^2}, \emptyset) \\
%%   &=  (30, \{{a}^2, {a b}, {b}^2\}, \emptyset), \\
%% \end{align*}
%% With this definition, the values of the nodes in the product are
%% influenced by the nature of the labels associated with the nodes being multiplied.


\begin{proposition}\label{TMcommutativity}
Multiplication of trees in $\DOMR$ is commutative.
\begin{proof}
  Suppose there is a number $n$ such that multiplication is
  commutative for all trees $\rnode{u}, \rnode{v}$ such that
  $\depth(\rnode{u}), \depth(\rnode{v}) \le n$.


  Multiplication involving nodes with a depth of zero clearly commutes, so
  $n$ may reasonably take the value 0.

  In the case where both nodes are simple, it is evident that
  they must commute, since scalar multiplication commutes, and the
  multiplication of \polyrat polynomials is commutative.

  Suppose that one or both of the nodes has a depth of $n+1$. The
  extension sets of the nodes all have depths of $n$ or less, so the
  elements of the extension set of the product must be independent of
  the order of the operators in the multiplication, and both scalar
  multiplication and polynomial multiplication commute.  Hence the
  multiplication of nodes with a depth of $n+1$ must commute.  By
  induction, we can say that trees of arbitrary depth commute with
  this definition of multiplication in $\DOMR$.
  \end{proof}
\end{proposition}

\begin{proposition}\label{TMassociativity}
Multiplication of trees in $\DOMR$ is associative.
\begin{proof}
  Suppose there is a number $n$ such that multiplication is
  commutative for all trees $\rnode{u}, \mand \rnode{v}, \rnode{w}$ such that
  $\depth(\rnode{u}), \depth(\rnode{v}), \mand  \depth(\rnode{w}) \le n$.


  Multiplication involving nodes with a depth of zero is clearly associative, so
  $n$ may reasonably take the value 0.

  In the case where all of the nodes are simple, it is evident that
  they must be associative, since scalar multiplication is associative, and the
  multiplication of \polyrat polynomials is associative.

  Suppose that one or more of the nodes has a depth of $n+1$ or
  less. Then
  \begin{align*}
    \rnode{u} \tdot (\rnode{v} \tdot \rnode{w}) &=
    (\rv{u},\rlabel{u},\rextn{u}) \tdot (\rv{v} \rv{w},\rlabel{v} \rlabel{w},\rextn{v}\boxdot\rextn{w})\\
  \end{align*}





  Suppose that one or both of the nodes has a depth of $n+1$. The
%%  \marginnote{\fbox{\textbf{Is this adequate?}}}
  extension sets of the nodes all have depths of $n$ or less, so the
  elements in the extension set of their product must be independent of the order of the
  bracketting in the multiplication.  Hence the multiplication of
  nodes with a depth of $n+1$ must be associative.  By induction, we can say
  that multiplication of trees of arbitrary depth is associative.
  multiplication in $\DOMR$.
\end{proof}
\end{proposition}

\begin{proposition}\label{TMdistrib}
  Tree-multiplication distributes over tree-addition in $\DOMR$.

  Intuitively, the properties of operations on the scalar values and
  the \polyrat polynomial labels of each node suggests that this must be
  true. 

  \begin{proof}
    We want to show that for $\rnode{u}, \rnode{v}$, and $\rnode{w} \in
    \DOMR$, where nodes $\rnode{v} \mand \rnode{w}$ are compatible, 
    $\rnode{u}\tdot(\rnode{v}+\rnode{w}) = \rnode{u}\tdot\rnode{v}+\rnode{u}\tdot\rnode{w}$
    is true.
  
    Multiplication by nodes which have a depth less than two clearly
    distributes over addition, since the multiplication of scalars and
    of polynomials distributes over their addition, and there are no
    extension sets to complicate matters. The case of multiplication
    where one of the trees  has a depth of less than two and the other
    has an arbitrary depth also distributes, since the extension set 

    Let us consider the case of multiplication involving a node, $\rnode{u},$ with a depth
    of two, that is to say that $\rnode{u}$ has an extension set that
    contains only simple nodes.  Then for compatible summands with
    depths of two or less,

    \begin{align*}
      \rnode{u}\tdot(\rnode{v}+\rnode{w}) &=
      (\rv{u},\rlabel{u},\emptyset)\tdot((\rv{v},\rlabel{v},\rextn{v})+(\rv{w},\rlabel{w},\rextn{w}))\\
      &=(\rv{u},\rlabel{u},\emptyset)\tdot(\rv{v}+\rv{w},\rlabel{v},\rextn{v}\stplus\rextn{w})\\
      &=\bigl(\rv{u}(\rv{v} + \rv{w}),\rlabel{u}\rlabel{v},\emptyset\bigr)\tdot(\rv{v}+\rv{w},\rlabel{v},\rextn{v}\stplus\rextn{w})\\
      &=\bigl((\rv{u}\rv{v} + \rv{u}\rv{w}),\rlabel{u}\rlabel{v},\rextn{v}\stplus\rextn{w}\bigr)\\
      \intertext{but $\rlabel{u}$ must equal $\rlabel{v}$, so}
      &=(\rv{u}\rv{v} + \rv{u}\rv{w}),\rlabel{u}\rlabel{w},\rextn{v}\stplus\rextn{w})\\
      &=(\rv{u}\rv{v},\rlabel{u}\rlabel{v},\rextn{v})+(\rv{u}\rv{w},\rlabel{u}\rlabel{w},\extn{w})\\
      &=\rnode{u}\tdot\rnode{v} + \rnode{u}\tdot\rnode{w}
    \end{align*}
    Note that this is independent of the depths of nodes $\rnode{v}$ and $\rnode{w}$.

    Suppose then that there is an integer $n$ such that multiplication
    of nodes with a depth of $n$ or less distributes over
    addition, and we consider the case where our factors, $\rnode{u}$, have 
    depths of $n+1$ or less. Then
    \begin{align*}
      \rnode{u}\tdot(\rnode{v}+\rnode{w})&=(\rv{u},\rlabel{u},\rextn{u})\tdot((\rv{v},\rlabel{v},\rextn{v})+(\rv{w},\rlabel{w},\rextn{w}))\\
      &=(\rv{u}(\rv{v}+\rv{w},\rlabel{u}\rlabel{v},\rextn{u}\stdot(\rextn{v}\stplus\rextn{w}))\\
      &\intertext{all of the nodes in the expression for the extension
        set are of depth less than or equal to n, so}
      &= \rnode{u}\tdot(\rnode{w}+\rnode{v})
    \end{align*}

  %%   %% We now show that the property holds for nodes whose extensions are
  %%   %% simple. So we will consider $\rnode{u}\tdot(\rnode{v}+\rnode{w})$
  %%   %% for the following cases:
  %%   %% \begin{enumerate}
  %%   %%   \item $\rnode{u}$ is simple and both $\rnode{v}$ and
  %%   %%     $\rnode{w}$ are themselves simple,
  %%   %%   \item $\rnode{u}$ is simple  and one of $\rnode{v}$ and
  %%   %%     $\rnode{w}$ is simple and the other has simple extensions
  %%   %%   \item $\rnode{u}$ is simple and both $\rnode{v}$ and
  %%   %%     $\rnode{w}$ has simple extensions
  %%   %%   \item $\rnode{u}$ has simple extensions and both $\rnode{v}$ and
  %%   %%     $\rnode{w}$ are themselves simple,
  %%   %%   \item $\rnode{u}$ has simple extensions and one of $\rnode{v}$ and
  %%   %%     $\rnode{w}$ is simple and the other has simple extensions
  %%   %%   \item $\rnode{u}$ has simple extensions and both $\rnode{v}$ and
  %%   %%     $\rnode{w}$ has simple extensions
  %%   %% \end{enumerate}

  %%   Suppose that there is a $n \geq 1$ for which tree multiplication
  %%   distributes over addition when the depths of nodes is $n$ or less.
  %%   Then, we consider $\rnode{u},\rnode{v},\rnode{w})\in\DOMR$ which
  %%   have a depth of $n+1$ or less:
  %%   \begin{align*}
  %%     \rnode{u}\tdot(\rnode{v}+\rnode{w}) &= (\rv{u},\rlabel{u},\extn{u})\tdot((\rv{v},\rlabel{v},\extn{v})+(\rv{w},\rlabel{w},\extn{w}))\\
  %%     &=(\rv{u},\rlabel{u},extn{u})\tdot((\rv{v}+\rv{w},\rlabel{v},\extn{v}\stplus\extn{w})\\
  %%     &=(\rv{u}(\rv{v}+\rv{w}),\rlabel{u}\rlabel{v},extn{u}\stdot(\extn{v}\stplus\extn{w}))\\
  %%     &=(\rv{u}\rv{v}+\rv{u}\rv{w}),\rlabel{u}\rlabel{w},\extn{u}\stdot(\extn{v}\stplus\extn{w}))\\ %% This is almost what we want
  %%   \end{align*}

  %%   %%% Need to address the operations on the extensions HERE

  %%   So we need to convince ourselves that $\extn{u}\stdot(\extn{v}\stplus\extn{w})
  %%   = \extn{u}\stdot\extn{v}\extn{u}\stplus\extn{w}\). For each
  %%   element $\rnode{f}$ in $\extn{u}$ we may form the set of products
  %%   $\{\rnode{f}\tdot\rnode{g}:
  %%   \rnode{g}\in\extn{v}\stplus\extn{w}\},$ and the elements of this set
\end{proof}
\end{proposition}


\begin{corollary}\label{ItsARingHarry}
$\DOMR$ with tree addition and tree multiplication is a commutative \rng.
\begin{proof}
  Propositions \ref{TMcommutativity}, \ref{TMassociativity}, and
  \ref{TMdistrib} are sufficient to establish that it is a commutative
  \rng.
\end{proof}
\end{corollary}

\section{For the wildly optimistic}
\subsection{Our space is a complete metric space \ldots Hah!}

\begin{proposition}\label{cauchyseq}
Every Cauchy sequence  in $\DOMR$ converges to a tree in $\DOMR$.
\begin{proof}
\ldots
\end{proof}
\end{proposition}







%% A more explicit discussion of the construction of $\DOMR$ and the
%% induced operations can be found in the appendix for those who are
%% unfamiliar with quotient sets.



%% \marginnote{\Defn\ norm.}
%% % Norm: triangle inequality, a|v| = |av|, |a| = 0 iff a = 0

%% \begin{definition}
%%   \label{def-tree-norm} For a node \(\mathbf{u} \in \DOMR\), we define the
%%   value, \(\treeval{u}\), \begin{align*} \label{tree-value-eq}
%%     \treeval{u} = \begin{cases} \abs{\nv{u}} & \text{ if } \extn{u} = \emptyset
%%       \\
%%       \treeval{u} = \abs{\nv{u}} + \frac{1}{\card{\extn{u}}} \sum\limits_{\node{e} \in \extn{u}}
%%       \treeval{\node{e}} & \text{otherwise} \\ \end{cases} \end{align*}
%% \end{definition}



\section{Discussion}

\UseFirstVersion{}{This structure arose from attempts to capture the nuances
associated with survey questions of the form ``Thinking about kidney
beans, how would you rate the chances of your favourite sporting team
in the coming match?'', and to be able to incorporate the sorts of
possibly conflicting data into simulation models \marginnote{This
needs a lot more fleshing out. Probably a paragraph or two on MSE.}
and to elicit in these models the dynamic interaction between
simulated management strategies and the attitudes of modelled
individuals and stakeholders as they respond to the the managed
system.}

The way the extensions of a node influence the value of a node can be
perverse if the data in these nodes aren't appropriate.  The
overriding rule is that extensions to a node \emph{must be relevant to
  that node}. For extrapolation from surveys this is a matter associated
with the coding of data, for simulation models (like MSE models or
evaluating climate adaptation strategies) it is a matter of keeping
track of influences and connections appropriately.  I don't believe
that this is entirely a trivial matter, but I also don't believe it is
a complex one.



\section{Application}

MSE models incorporating public opinion (surveys)

Adaptive decision making (kind of like a Baysian net, I suppose)

Adaptive behaviour (things can learn by adjusting weightings or
adding new branches)

Constructing or assessing phylogenetic trees? 


\appendix
\section{Appendix}

\subsection{Quotient sets}

\textbf{Is this necessary?}

An equivalence relation is function which takes elements from a set, say \tset{U}, 
and identifies them with a particular subset of some other set, \tqset{U}, so that every element of \tset{U}\ is
identified with an element of \tqset{U}. Members of a given subset of \tset{U} which are identified with the same
element in \tqset{U}\ are said to be \emph{equivalent}. We do this with even and odd integers -- from the point of view
of splitting a block of chocolate between two friends, a block with only two partitions is equivalent to a block with
thirty partitions.

In the context of $\DOM$, we wish to partition the set into sets whose
members are essentially the same from the point of view of addition
and scalar multiplication.  We do this by picking out all of the
elements which behave like ``zero'' and making them one of the
equivalence classes (which is a technical name for the elements of the
quotient space). Elements of $\DOM$ which have only zero values in
their constituent nodes behave essentially like zero: multiplication
by a scalar does not change them at all, and adding them to another
node doesn't alter its magnitude in any discernable way, nor is the
result of such an addition going to influence addition or scalar
multiplication in any way different from from the original.

\begin{example}
  Let us consider the sets \[\set{F}_i = \{e \in \mB{Z}: e = 12 n + i, for some n \in \mB{Z}\}\].  Can an integer be in
  more than one of these sets?  Suppose we pick a number, say 14;  this is clearly in \(F_2\), since \(14 = 12\times1\ + 2\). What happens if we multiply by three?
\begin{align*}
    3\times14 &= 42 \\
    &= 36 + 6 \\
    &= 3\times12 + 6 \\
\end{align*}    
so \(3\times14\) is in \(F_6\) \ldots which is just what \(3\times2\) is in.  It doesn't take much experimentation to
discover that addition and scalar multiplication work in the \(F_n\) sets in the way we might hope: \(F_3(F_4 + F_9)\)
corresponds to \(3*(4 + 9)\) \ldots \emph{and to} \(75*(888+81)\).  The number 75 is clearly in \(F_{75}\), but this
isn't much use to us; looking at the definition of the \{F\} sets, we can see that 75 is also in \(F_3\), so perhaps
we can only consider the non-negative indices which are less than 12..  The reason is that the sets are analogous to the
remainder on division by 12.

\end{example}


%\bibliography{biblio}
%\bibliographystyle{harvard}
%\biboptions{}
\end{document}


%% The influence of a node contributes to the assessment of the
%% weighted distance between two attitudes: the distance between them
%% incorporates the influence as a multiplicative term



%%  The ``inertia'', \(r\)\ will typically be propagated from the root
%% node (though it can be different and may change with interactions)


%% We need a dereferencing function which takes a path comprised of
%% symbols and returns the subtree, as well as the excision operator
%% (which we can use \setminus for).  Pruning a limb  that doesn't exist
%% returns the tree, pruning the null tree returns the null tree. 

%% \(\node{a} \setminus \subtree(\node{a},(\nlabel{a}))  = \zerotree.

%%\begin{definition}
%% In a similar vein, we define, the domain \TPDOM\ whose elements are
%% finite sequences \(\lbrace s_i \rbrace\) where \(s_i \in \PLY\), and
%% the function \(\prune(\node{u},s): (\DOM, \PDOM) \mapsto \DOM)\).
%% \[
%%    \prune(\node{u}) = \begin{cases}
%%      \zerotree & \text{ if } \node{u} = \zerotree \\
%%      \zerotree & \text{ if } \nlabel{u} 
%%      (\nv{u}, \nlabel{u}, \lbrace \prune(\node{e}):
%%      \node{e}\in\extn{u} \rbrace) & otherwise \\
%% \end{cases}
%% \].
%% \end{definition}

